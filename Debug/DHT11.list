
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008888  08008888  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008890  08008890  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008890  08008890  00018890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000078  08008910  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08008910  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014181  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e84  00000000  00000000  00034221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  00038170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016933  00000000  00000000  000390f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001516c  00000000  00000000  0004fa23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823d4  00000000  00000000  00064b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6f63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  000e6fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080086a0 	.word	0x080086a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	080086a0 	.word	0x080086a0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f84c 	bl	8000300 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__aeabi_f2uiz>:
 80002d0:	219e      	movs	r1, #158	; 0x9e
 80002d2:	b510      	push	{r4, lr}
 80002d4:	05c9      	lsls	r1, r1, #23
 80002d6:	1c04      	adds	r4, r0, #0
 80002d8:	f002 f916 	bl	8002508 <__aeabi_fcmpge>
 80002dc:	2800      	cmp	r0, #0
 80002de:	d103      	bne.n	80002e8 <__aeabi_f2uiz+0x18>
 80002e0:	1c20      	adds	r0, r4, #0
 80002e2:	f000 fe79 	bl	8000fd8 <__aeabi_f2iz>
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	219e      	movs	r1, #158	; 0x9e
 80002ea:	1c20      	adds	r0, r4, #0
 80002ec:	05c9      	lsls	r1, r1, #23
 80002ee:	f000 fcaf 	bl	8000c50 <__aeabi_fsub>
 80002f2:	f000 fe71 	bl	8000fd8 <__aeabi_f2iz>
 80002f6:	2380      	movs	r3, #128	; 0x80
 80002f8:	061b      	lsls	r3, r3, #24
 80002fa:	469c      	mov	ip, r3
 80002fc:	4460      	add	r0, ip
 80002fe:	e7f2      	b.n	80002e6 <__aeabi_f2uiz+0x16>

08000300 <__udivmoddi4>:
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	4657      	mov	r7, sl
 8000304:	464e      	mov	r6, r9
 8000306:	4645      	mov	r5, r8
 8000308:	46de      	mov	lr, fp
 800030a:	b5e0      	push	{r5, r6, r7, lr}
 800030c:	0004      	movs	r4, r0
 800030e:	000d      	movs	r5, r1
 8000310:	4692      	mov	sl, r2
 8000312:	4699      	mov	r9, r3
 8000314:	b083      	sub	sp, #12
 8000316:	428b      	cmp	r3, r1
 8000318:	d830      	bhi.n	800037c <__udivmoddi4+0x7c>
 800031a:	d02d      	beq.n	8000378 <__udivmoddi4+0x78>
 800031c:	4649      	mov	r1, r9
 800031e:	4650      	mov	r0, sl
 8000320:	f002 f91a 	bl	8002558 <__clzdi2>
 8000324:	0029      	movs	r1, r5
 8000326:	0006      	movs	r6, r0
 8000328:	0020      	movs	r0, r4
 800032a:	f002 f915 	bl	8002558 <__clzdi2>
 800032e:	1a33      	subs	r3, r6, r0
 8000330:	4698      	mov	r8, r3
 8000332:	3b20      	subs	r3, #32
 8000334:	469b      	mov	fp, r3
 8000336:	d433      	bmi.n	80003a0 <__udivmoddi4+0xa0>
 8000338:	465a      	mov	r2, fp
 800033a:	4653      	mov	r3, sl
 800033c:	4093      	lsls	r3, r2
 800033e:	4642      	mov	r2, r8
 8000340:	001f      	movs	r7, r3
 8000342:	4653      	mov	r3, sl
 8000344:	4093      	lsls	r3, r2
 8000346:	001e      	movs	r6, r3
 8000348:	42af      	cmp	r7, r5
 800034a:	d83a      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 800034c:	42af      	cmp	r7, r5
 800034e:	d100      	bne.n	8000352 <__udivmoddi4+0x52>
 8000350:	e078      	b.n	8000444 <__udivmoddi4+0x144>
 8000352:	465b      	mov	r3, fp
 8000354:	1ba4      	subs	r4, r4, r6
 8000356:	41bd      	sbcs	r5, r7
 8000358:	2b00      	cmp	r3, #0
 800035a:	da00      	bge.n	800035e <__udivmoddi4+0x5e>
 800035c:	e075      	b.n	800044a <__udivmoddi4+0x14a>
 800035e:	2200      	movs	r2, #0
 8000360:	2300      	movs	r3, #0
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2301      	movs	r3, #1
 8000368:	465a      	mov	r2, fp
 800036a:	4093      	lsls	r3, r2
 800036c:	9301      	str	r3, [sp, #4]
 800036e:	2301      	movs	r3, #1
 8000370:	4642      	mov	r2, r8
 8000372:	4093      	lsls	r3, r2
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	e028      	b.n	80003ca <__udivmoddi4+0xca>
 8000378:	4282      	cmp	r2, r0
 800037a:	d9cf      	bls.n	800031c <__udivmoddi4+0x1c>
 800037c:	2200      	movs	r2, #0
 800037e:	2300      	movs	r3, #0
 8000380:	9200      	str	r2, [sp, #0]
 8000382:	9301      	str	r3, [sp, #4]
 8000384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <__udivmoddi4+0x8e>
 800038a:	601c      	str	r4, [r3, #0]
 800038c:	605d      	str	r5, [r3, #4]
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	b003      	add	sp, #12
 8000394:	bcf0      	pop	{r4, r5, r6, r7}
 8000396:	46bb      	mov	fp, r7
 8000398:	46b2      	mov	sl, r6
 800039a:	46a9      	mov	r9, r5
 800039c:	46a0      	mov	r8, r4
 800039e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003a0:	4642      	mov	r2, r8
 80003a2:	2320      	movs	r3, #32
 80003a4:	1a9b      	subs	r3, r3, r2
 80003a6:	4652      	mov	r2, sl
 80003a8:	40da      	lsrs	r2, r3
 80003aa:	4641      	mov	r1, r8
 80003ac:	0013      	movs	r3, r2
 80003ae:	464a      	mov	r2, r9
 80003b0:	408a      	lsls	r2, r1
 80003b2:	0017      	movs	r7, r2
 80003b4:	4642      	mov	r2, r8
 80003b6:	431f      	orrs	r7, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	4093      	lsls	r3, r2
 80003bc:	001e      	movs	r6, r3
 80003be:	42af      	cmp	r7, r5
 80003c0:	d9c4      	bls.n	800034c <__udivmoddi4+0x4c>
 80003c2:	2200      	movs	r2, #0
 80003c4:	2300      	movs	r3, #0
 80003c6:	9200      	str	r2, [sp, #0]
 80003c8:	9301      	str	r3, [sp, #4]
 80003ca:	4643      	mov	r3, r8
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0d9      	beq.n	8000384 <__udivmoddi4+0x84>
 80003d0:	07fb      	lsls	r3, r7, #31
 80003d2:	0872      	lsrs	r2, r6, #1
 80003d4:	431a      	orrs	r2, r3
 80003d6:	4646      	mov	r6, r8
 80003d8:	087b      	lsrs	r3, r7, #1
 80003da:	e00e      	b.n	80003fa <__udivmoddi4+0xfa>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	d101      	bne.n	80003e4 <__udivmoddi4+0xe4>
 80003e0:	42a2      	cmp	r2, r4
 80003e2:	d80c      	bhi.n	80003fe <__udivmoddi4+0xfe>
 80003e4:	1aa4      	subs	r4, r4, r2
 80003e6:	419d      	sbcs	r5, r3
 80003e8:	2001      	movs	r0, #1
 80003ea:	1924      	adds	r4, r4, r4
 80003ec:	416d      	adcs	r5, r5
 80003ee:	2100      	movs	r1, #0
 80003f0:	3e01      	subs	r6, #1
 80003f2:	1824      	adds	r4, r4, r0
 80003f4:	414d      	adcs	r5, r1
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	d006      	beq.n	8000408 <__udivmoddi4+0x108>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d9ee      	bls.n	80003dc <__udivmoddi4+0xdc>
 80003fe:	3e01      	subs	r6, #1
 8000400:	1924      	adds	r4, r4, r4
 8000402:	416d      	adcs	r5, r5
 8000404:	2e00      	cmp	r6, #0
 8000406:	d1f8      	bne.n	80003fa <__udivmoddi4+0xfa>
 8000408:	9800      	ldr	r0, [sp, #0]
 800040a:	9901      	ldr	r1, [sp, #4]
 800040c:	465b      	mov	r3, fp
 800040e:	1900      	adds	r0, r0, r4
 8000410:	4169      	adcs	r1, r5
 8000412:	2b00      	cmp	r3, #0
 8000414:	db24      	blt.n	8000460 <__udivmoddi4+0x160>
 8000416:	002b      	movs	r3, r5
 8000418:	465a      	mov	r2, fp
 800041a:	4644      	mov	r4, r8
 800041c:	40d3      	lsrs	r3, r2
 800041e:	002a      	movs	r2, r5
 8000420:	40e2      	lsrs	r2, r4
 8000422:	001c      	movs	r4, r3
 8000424:	465b      	mov	r3, fp
 8000426:	0015      	movs	r5, r2
 8000428:	2b00      	cmp	r3, #0
 800042a:	db2a      	blt.n	8000482 <__udivmoddi4+0x182>
 800042c:	0026      	movs	r6, r4
 800042e:	409e      	lsls	r6, r3
 8000430:	0033      	movs	r3, r6
 8000432:	0026      	movs	r6, r4
 8000434:	4647      	mov	r7, r8
 8000436:	40be      	lsls	r6, r7
 8000438:	0032      	movs	r2, r6
 800043a:	1a80      	subs	r0, r0, r2
 800043c:	4199      	sbcs	r1, r3
 800043e:	9000      	str	r0, [sp, #0]
 8000440:	9101      	str	r1, [sp, #4]
 8000442:	e79f      	b.n	8000384 <__udivmoddi4+0x84>
 8000444:	42a3      	cmp	r3, r4
 8000446:	d8bc      	bhi.n	80003c2 <__udivmoddi4+0xc2>
 8000448:	e783      	b.n	8000352 <__udivmoddi4+0x52>
 800044a:	4642      	mov	r2, r8
 800044c:	2320      	movs	r3, #32
 800044e:	2100      	movs	r1, #0
 8000450:	1a9b      	subs	r3, r3, r2
 8000452:	2200      	movs	r2, #0
 8000454:	9100      	str	r1, [sp, #0]
 8000456:	9201      	str	r2, [sp, #4]
 8000458:	2201      	movs	r2, #1
 800045a:	40da      	lsrs	r2, r3
 800045c:	9201      	str	r2, [sp, #4]
 800045e:	e786      	b.n	800036e <__udivmoddi4+0x6e>
 8000460:	4642      	mov	r2, r8
 8000462:	2320      	movs	r3, #32
 8000464:	1a9b      	subs	r3, r3, r2
 8000466:	002a      	movs	r2, r5
 8000468:	4646      	mov	r6, r8
 800046a:	409a      	lsls	r2, r3
 800046c:	0023      	movs	r3, r4
 800046e:	40f3      	lsrs	r3, r6
 8000470:	4644      	mov	r4, r8
 8000472:	4313      	orrs	r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	40e2      	lsrs	r2, r4
 8000478:	001c      	movs	r4, r3
 800047a:	465b      	mov	r3, fp
 800047c:	0015      	movs	r5, r2
 800047e:	2b00      	cmp	r3, #0
 8000480:	dad4      	bge.n	800042c <__udivmoddi4+0x12c>
 8000482:	4642      	mov	r2, r8
 8000484:	002f      	movs	r7, r5
 8000486:	2320      	movs	r3, #32
 8000488:	0026      	movs	r6, r4
 800048a:	4097      	lsls	r7, r2
 800048c:	1a9b      	subs	r3, r3, r2
 800048e:	40de      	lsrs	r6, r3
 8000490:	003b      	movs	r3, r7
 8000492:	4333      	orrs	r3, r6
 8000494:	e7cd      	b.n	8000432 <__udivmoddi4+0x132>
 8000496:	46c0      	nop			; (mov r8, r8)

08000498 <__aeabi_fadd>:
 8000498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049a:	46c6      	mov	lr, r8
 800049c:	0243      	lsls	r3, r0, #9
 800049e:	0a5b      	lsrs	r3, r3, #9
 80004a0:	024e      	lsls	r6, r1, #9
 80004a2:	0045      	lsls	r5, r0, #1
 80004a4:	004f      	lsls	r7, r1, #1
 80004a6:	00da      	lsls	r2, r3, #3
 80004a8:	0fc4      	lsrs	r4, r0, #31
 80004aa:	469c      	mov	ip, r3
 80004ac:	0a70      	lsrs	r0, r6, #9
 80004ae:	4690      	mov	r8, r2
 80004b0:	b500      	push	{lr}
 80004b2:	0e2d      	lsrs	r5, r5, #24
 80004b4:	0e3f      	lsrs	r7, r7, #24
 80004b6:	0fc9      	lsrs	r1, r1, #31
 80004b8:	09b6      	lsrs	r6, r6, #6
 80004ba:	428c      	cmp	r4, r1
 80004bc:	d04b      	beq.n	8000556 <__aeabi_fadd+0xbe>
 80004be:	1bea      	subs	r2, r5, r7
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	dd36      	ble.n	8000532 <__aeabi_fadd+0x9a>
 80004c4:	2f00      	cmp	r7, #0
 80004c6:	d061      	beq.n	800058c <__aeabi_fadd+0xf4>
 80004c8:	2dff      	cmp	r5, #255	; 0xff
 80004ca:	d100      	bne.n	80004ce <__aeabi_fadd+0x36>
 80004cc:	e0ad      	b.n	800062a <__aeabi_fadd+0x192>
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	04db      	lsls	r3, r3, #19
 80004d2:	431e      	orrs	r6, r3
 80004d4:	2a1b      	cmp	r2, #27
 80004d6:	dc00      	bgt.n	80004da <__aeabi_fadd+0x42>
 80004d8:	e0d3      	b.n	8000682 <__aeabi_fadd+0x1ea>
 80004da:	2001      	movs	r0, #1
 80004dc:	4643      	mov	r3, r8
 80004de:	1a18      	subs	r0, r3, r0
 80004e0:	0143      	lsls	r3, r0, #5
 80004e2:	d400      	bmi.n	80004e6 <__aeabi_fadd+0x4e>
 80004e4:	e08c      	b.n	8000600 <__aeabi_fadd+0x168>
 80004e6:	0180      	lsls	r0, r0, #6
 80004e8:	0987      	lsrs	r7, r0, #6
 80004ea:	0038      	movs	r0, r7
 80004ec:	f002 f816 	bl	800251c <__clzsi2>
 80004f0:	3805      	subs	r0, #5
 80004f2:	4087      	lsls	r7, r0
 80004f4:	4285      	cmp	r5, r0
 80004f6:	dc00      	bgt.n	80004fa <__aeabi_fadd+0x62>
 80004f8:	e0b6      	b.n	8000668 <__aeabi_fadd+0x1d0>
 80004fa:	1a2d      	subs	r5, r5, r0
 80004fc:	48b3      	ldr	r0, [pc, #716]	; (80007cc <__aeabi_fadd+0x334>)
 80004fe:	4038      	ands	r0, r7
 8000500:	0743      	lsls	r3, r0, #29
 8000502:	d004      	beq.n	800050e <__aeabi_fadd+0x76>
 8000504:	230f      	movs	r3, #15
 8000506:	4003      	ands	r3, r0
 8000508:	2b04      	cmp	r3, #4
 800050a:	d000      	beq.n	800050e <__aeabi_fadd+0x76>
 800050c:	3004      	adds	r0, #4
 800050e:	0143      	lsls	r3, r0, #5
 8000510:	d400      	bmi.n	8000514 <__aeabi_fadd+0x7c>
 8000512:	e078      	b.n	8000606 <__aeabi_fadd+0x16e>
 8000514:	1c6a      	adds	r2, r5, #1
 8000516:	2dfe      	cmp	r5, #254	; 0xfe
 8000518:	d065      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 800051a:	0180      	lsls	r0, r0, #6
 800051c:	0a43      	lsrs	r3, r0, #9
 800051e:	469c      	mov	ip, r3
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	4663      	mov	r3, ip
 8000524:	05d0      	lsls	r0, r2, #23
 8000526:	4318      	orrs	r0, r3
 8000528:	07e4      	lsls	r4, r4, #31
 800052a:	4320      	orrs	r0, r4
 800052c:	bc80      	pop	{r7}
 800052e:	46b8      	mov	r8, r7
 8000530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000532:	2a00      	cmp	r2, #0
 8000534:	d035      	beq.n	80005a2 <__aeabi_fadd+0x10a>
 8000536:	1b7a      	subs	r2, r7, r5
 8000538:	2d00      	cmp	r5, #0
 800053a:	d000      	beq.n	800053e <__aeabi_fadd+0xa6>
 800053c:	e0af      	b.n	800069e <__aeabi_fadd+0x206>
 800053e:	4643      	mov	r3, r8
 8000540:	2b00      	cmp	r3, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0xae>
 8000544:	e0a7      	b.n	8000696 <__aeabi_fadd+0x1fe>
 8000546:	1e53      	subs	r3, r2, #1
 8000548:	2a01      	cmp	r2, #1
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0xb6>
 800054c:	e12f      	b.n	80007ae <__aeabi_fadd+0x316>
 800054e:	2aff      	cmp	r2, #255	; 0xff
 8000550:	d069      	beq.n	8000626 <__aeabi_fadd+0x18e>
 8000552:	001a      	movs	r2, r3
 8000554:	e0aa      	b.n	80006ac <__aeabi_fadd+0x214>
 8000556:	1be9      	subs	r1, r5, r7
 8000558:	2900      	cmp	r1, #0
 800055a:	dd70      	ble.n	800063e <__aeabi_fadd+0x1a6>
 800055c:	2f00      	cmp	r7, #0
 800055e:	d037      	beq.n	80005d0 <__aeabi_fadd+0x138>
 8000560:	2dff      	cmp	r5, #255	; 0xff
 8000562:	d062      	beq.n	800062a <__aeabi_fadd+0x192>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	04db      	lsls	r3, r3, #19
 8000568:	431e      	orrs	r6, r3
 800056a:	291b      	cmp	r1, #27
 800056c:	dc00      	bgt.n	8000570 <__aeabi_fadd+0xd8>
 800056e:	e0b0      	b.n	80006d2 <__aeabi_fadd+0x23a>
 8000570:	2001      	movs	r0, #1
 8000572:	4440      	add	r0, r8
 8000574:	0143      	lsls	r3, r0, #5
 8000576:	d543      	bpl.n	8000600 <__aeabi_fadd+0x168>
 8000578:	3501      	adds	r5, #1
 800057a:	2dff      	cmp	r5, #255	; 0xff
 800057c:	d033      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 800057e:	2301      	movs	r3, #1
 8000580:	4a93      	ldr	r2, [pc, #588]	; (80007d0 <__aeabi_fadd+0x338>)
 8000582:	4003      	ands	r3, r0
 8000584:	0840      	lsrs	r0, r0, #1
 8000586:	4010      	ands	r0, r2
 8000588:	4318      	orrs	r0, r3
 800058a:	e7b9      	b.n	8000500 <__aeabi_fadd+0x68>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0xfa>
 8000590:	e083      	b.n	800069a <__aeabi_fadd+0x202>
 8000592:	1e51      	subs	r1, r2, #1
 8000594:	2a01      	cmp	r2, #1
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x102>
 8000598:	e0d8      	b.n	800074c <__aeabi_fadd+0x2b4>
 800059a:	2aff      	cmp	r2, #255	; 0xff
 800059c:	d045      	beq.n	800062a <__aeabi_fadd+0x192>
 800059e:	000a      	movs	r2, r1
 80005a0:	e798      	b.n	80004d4 <__aeabi_fadd+0x3c>
 80005a2:	27fe      	movs	r7, #254	; 0xfe
 80005a4:	1c6a      	adds	r2, r5, #1
 80005a6:	4217      	tst	r7, r2
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x114>
 80005aa:	e086      	b.n	80006ba <__aeabi_fadd+0x222>
 80005ac:	2d00      	cmp	r5, #0
 80005ae:	d000      	beq.n	80005b2 <__aeabi_fadd+0x11a>
 80005b0:	e0b7      	b.n	8000722 <__aeabi_fadd+0x28a>
 80005b2:	4643      	mov	r3, r8
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x122>
 80005b8:	e0f3      	b.n	80007a2 <__aeabi_fadd+0x30a>
 80005ba:	2200      	movs	r2, #0
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d0b0      	beq.n	8000522 <__aeabi_fadd+0x8a>
 80005c0:	1b98      	subs	r0, r3, r6
 80005c2:	0143      	lsls	r3, r0, #5
 80005c4:	d400      	bmi.n	80005c8 <__aeabi_fadd+0x130>
 80005c6:	e0fa      	b.n	80007be <__aeabi_fadd+0x326>
 80005c8:	4643      	mov	r3, r8
 80005ca:	000c      	movs	r4, r1
 80005cc:	1af0      	subs	r0, r6, r3
 80005ce:	e797      	b.n	8000500 <__aeabi_fadd+0x68>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x13e>
 80005d4:	e0c8      	b.n	8000768 <__aeabi_fadd+0x2d0>
 80005d6:	1e4a      	subs	r2, r1, #1
 80005d8:	2901      	cmp	r1, #1
 80005da:	d100      	bne.n	80005de <__aeabi_fadd+0x146>
 80005dc:	e0ae      	b.n	800073c <__aeabi_fadd+0x2a4>
 80005de:	29ff      	cmp	r1, #255	; 0xff
 80005e0:	d023      	beq.n	800062a <__aeabi_fadd+0x192>
 80005e2:	0011      	movs	r1, r2
 80005e4:	e7c1      	b.n	800056a <__aeabi_fadd+0xd2>
 80005e6:	2300      	movs	r3, #0
 80005e8:	22ff      	movs	r2, #255	; 0xff
 80005ea:	469c      	mov	ip, r3
 80005ec:	e799      	b.n	8000522 <__aeabi_fadd+0x8a>
 80005ee:	21fe      	movs	r1, #254	; 0xfe
 80005f0:	1c6a      	adds	r2, r5, #1
 80005f2:	4211      	tst	r1, r2
 80005f4:	d077      	beq.n	80006e6 <__aeabi_fadd+0x24e>
 80005f6:	2aff      	cmp	r2, #255	; 0xff
 80005f8:	d0f5      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 80005fa:	0015      	movs	r5, r2
 80005fc:	4446      	add	r6, r8
 80005fe:	0870      	lsrs	r0, r6, #1
 8000600:	0743      	lsls	r3, r0, #29
 8000602:	d000      	beq.n	8000606 <__aeabi_fadd+0x16e>
 8000604:	e77e      	b.n	8000504 <__aeabi_fadd+0x6c>
 8000606:	08c3      	lsrs	r3, r0, #3
 8000608:	2dff      	cmp	r5, #255	; 0xff
 800060a:	d00e      	beq.n	800062a <__aeabi_fadd+0x192>
 800060c:	025b      	lsls	r3, r3, #9
 800060e:	0a5b      	lsrs	r3, r3, #9
 8000610:	469c      	mov	ip, r3
 8000612:	b2ea      	uxtb	r2, r5
 8000614:	e785      	b.n	8000522 <__aeabi_fadd+0x8a>
 8000616:	2e00      	cmp	r6, #0
 8000618:	d007      	beq.n	800062a <__aeabi_fadd+0x192>
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	03d2      	lsls	r2, r2, #15
 800061e:	4213      	tst	r3, r2
 8000620:	d003      	beq.n	800062a <__aeabi_fadd+0x192>
 8000622:	4210      	tst	r0, r2
 8000624:	d101      	bne.n	800062a <__aeabi_fadd+0x192>
 8000626:	000c      	movs	r4, r1
 8000628:	0003      	movs	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0db      	beq.n	80005e6 <__aeabi_fadd+0x14e>
 800062e:	2080      	movs	r0, #128	; 0x80
 8000630:	03c0      	lsls	r0, r0, #15
 8000632:	4318      	orrs	r0, r3
 8000634:	0240      	lsls	r0, r0, #9
 8000636:	0a43      	lsrs	r3, r0, #9
 8000638:	469c      	mov	ip, r3
 800063a:	22ff      	movs	r2, #255	; 0xff
 800063c:	e771      	b.n	8000522 <__aeabi_fadd+0x8a>
 800063e:	2900      	cmp	r1, #0
 8000640:	d0d5      	beq.n	80005ee <__aeabi_fadd+0x156>
 8000642:	1b7a      	subs	r2, r7, r5
 8000644:	2d00      	cmp	r5, #0
 8000646:	d160      	bne.n	800070a <__aeabi_fadd+0x272>
 8000648:	4643      	mov	r3, r8
 800064a:	2b00      	cmp	r3, #0
 800064c:	d024      	beq.n	8000698 <__aeabi_fadd+0x200>
 800064e:	1e53      	subs	r3, r2, #1
 8000650:	2a01      	cmp	r2, #1
 8000652:	d073      	beq.n	800073c <__aeabi_fadd+0x2a4>
 8000654:	2aff      	cmp	r2, #255	; 0xff
 8000656:	d0e7      	beq.n	8000628 <__aeabi_fadd+0x190>
 8000658:	001a      	movs	r2, r3
 800065a:	2a1b      	cmp	r2, #27
 800065c:	dc00      	bgt.n	8000660 <__aeabi_fadd+0x1c8>
 800065e:	e085      	b.n	800076c <__aeabi_fadd+0x2d4>
 8000660:	2001      	movs	r0, #1
 8000662:	003d      	movs	r5, r7
 8000664:	1980      	adds	r0, r0, r6
 8000666:	e785      	b.n	8000574 <__aeabi_fadd+0xdc>
 8000668:	2320      	movs	r3, #32
 800066a:	003a      	movs	r2, r7
 800066c:	1b45      	subs	r5, r0, r5
 800066e:	0038      	movs	r0, r7
 8000670:	3501      	adds	r5, #1
 8000672:	40ea      	lsrs	r2, r5
 8000674:	1b5d      	subs	r5, r3, r5
 8000676:	40a8      	lsls	r0, r5
 8000678:	1e43      	subs	r3, r0, #1
 800067a:	4198      	sbcs	r0, r3
 800067c:	2500      	movs	r5, #0
 800067e:	4310      	orrs	r0, r2
 8000680:	e73e      	b.n	8000500 <__aeabi_fadd+0x68>
 8000682:	2320      	movs	r3, #32
 8000684:	0030      	movs	r0, r6
 8000686:	1a9b      	subs	r3, r3, r2
 8000688:	0031      	movs	r1, r6
 800068a:	4098      	lsls	r0, r3
 800068c:	40d1      	lsrs	r1, r2
 800068e:	1e43      	subs	r3, r0, #1
 8000690:	4198      	sbcs	r0, r3
 8000692:	4308      	orrs	r0, r1
 8000694:	e722      	b.n	80004dc <__aeabi_fadd+0x44>
 8000696:	000c      	movs	r4, r1
 8000698:	0003      	movs	r3, r0
 800069a:	0015      	movs	r5, r2
 800069c:	e7b4      	b.n	8000608 <__aeabi_fadd+0x170>
 800069e:	2fff      	cmp	r7, #255	; 0xff
 80006a0:	d0c1      	beq.n	8000626 <__aeabi_fadd+0x18e>
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	4640      	mov	r0, r8
 80006a6:	04db      	lsls	r3, r3, #19
 80006a8:	4318      	orrs	r0, r3
 80006aa:	4680      	mov	r8, r0
 80006ac:	2a1b      	cmp	r2, #27
 80006ae:	dd51      	ble.n	8000754 <__aeabi_fadd+0x2bc>
 80006b0:	2001      	movs	r0, #1
 80006b2:	000c      	movs	r4, r1
 80006b4:	003d      	movs	r5, r7
 80006b6:	1a30      	subs	r0, r6, r0
 80006b8:	e712      	b.n	80004e0 <__aeabi_fadd+0x48>
 80006ba:	4643      	mov	r3, r8
 80006bc:	1b9f      	subs	r7, r3, r6
 80006be:	017b      	lsls	r3, r7, #5
 80006c0:	d42b      	bmi.n	800071a <__aeabi_fadd+0x282>
 80006c2:	2f00      	cmp	r7, #0
 80006c4:	d000      	beq.n	80006c8 <__aeabi_fadd+0x230>
 80006c6:	e710      	b.n	80004ea <__aeabi_fadd+0x52>
 80006c8:	2300      	movs	r3, #0
 80006ca:	2400      	movs	r4, #0
 80006cc:	2200      	movs	r2, #0
 80006ce:	469c      	mov	ip, r3
 80006d0:	e727      	b.n	8000522 <__aeabi_fadd+0x8a>
 80006d2:	2320      	movs	r3, #32
 80006d4:	0032      	movs	r2, r6
 80006d6:	0030      	movs	r0, r6
 80006d8:	40ca      	lsrs	r2, r1
 80006da:	1a59      	subs	r1, r3, r1
 80006dc:	4088      	lsls	r0, r1
 80006de:	1e43      	subs	r3, r0, #1
 80006e0:	4198      	sbcs	r0, r3
 80006e2:	4310      	orrs	r0, r2
 80006e4:	e745      	b.n	8000572 <__aeabi_fadd+0xda>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d14a      	bne.n	8000780 <__aeabi_fadd+0x2e8>
 80006ea:	4643      	mov	r3, r8
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d063      	beq.n	80007b8 <__aeabi_fadd+0x320>
 80006f0:	2200      	movs	r2, #0
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x260>
 80006f6:	e714      	b.n	8000522 <__aeabi_fadd+0x8a>
 80006f8:	0030      	movs	r0, r6
 80006fa:	4440      	add	r0, r8
 80006fc:	0143      	lsls	r3, r0, #5
 80006fe:	d400      	bmi.n	8000702 <__aeabi_fadd+0x26a>
 8000700:	e77e      	b.n	8000600 <__aeabi_fadd+0x168>
 8000702:	4b32      	ldr	r3, [pc, #200]	; (80007cc <__aeabi_fadd+0x334>)
 8000704:	3501      	adds	r5, #1
 8000706:	4018      	ands	r0, r3
 8000708:	e77a      	b.n	8000600 <__aeabi_fadd+0x168>
 800070a:	2fff      	cmp	r7, #255	; 0xff
 800070c:	d08c      	beq.n	8000628 <__aeabi_fadd+0x190>
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	4641      	mov	r1, r8
 8000712:	04db      	lsls	r3, r3, #19
 8000714:	4319      	orrs	r1, r3
 8000716:	4688      	mov	r8, r1
 8000718:	e79f      	b.n	800065a <__aeabi_fadd+0x1c2>
 800071a:	4643      	mov	r3, r8
 800071c:	000c      	movs	r4, r1
 800071e:	1af7      	subs	r7, r6, r3
 8000720:	e6e3      	b.n	80004ea <__aeabi_fadd+0x52>
 8000722:	4642      	mov	r2, r8
 8000724:	2a00      	cmp	r2, #0
 8000726:	d000      	beq.n	800072a <__aeabi_fadd+0x292>
 8000728:	e775      	b.n	8000616 <__aeabi_fadd+0x17e>
 800072a:	2e00      	cmp	r6, #0
 800072c:	d000      	beq.n	8000730 <__aeabi_fadd+0x298>
 800072e:	e77a      	b.n	8000626 <__aeabi_fadd+0x18e>
 8000730:	2380      	movs	r3, #128	; 0x80
 8000732:	03db      	lsls	r3, r3, #15
 8000734:	2400      	movs	r4, #0
 8000736:	469c      	mov	ip, r3
 8000738:	22ff      	movs	r2, #255	; 0xff
 800073a:	e6f2      	b.n	8000522 <__aeabi_fadd+0x8a>
 800073c:	0030      	movs	r0, r6
 800073e:	4440      	add	r0, r8
 8000740:	2501      	movs	r5, #1
 8000742:	0143      	lsls	r3, r0, #5
 8000744:	d400      	bmi.n	8000748 <__aeabi_fadd+0x2b0>
 8000746:	e75b      	b.n	8000600 <__aeabi_fadd+0x168>
 8000748:	2502      	movs	r5, #2
 800074a:	e718      	b.n	800057e <__aeabi_fadd+0xe6>
 800074c:	4643      	mov	r3, r8
 800074e:	2501      	movs	r5, #1
 8000750:	1b98      	subs	r0, r3, r6
 8000752:	e6c5      	b.n	80004e0 <__aeabi_fadd+0x48>
 8000754:	2320      	movs	r3, #32
 8000756:	4644      	mov	r4, r8
 8000758:	4640      	mov	r0, r8
 800075a:	40d4      	lsrs	r4, r2
 800075c:	1a9a      	subs	r2, r3, r2
 800075e:	4090      	lsls	r0, r2
 8000760:	1e43      	subs	r3, r0, #1
 8000762:	4198      	sbcs	r0, r3
 8000764:	4320      	orrs	r0, r4
 8000766:	e7a4      	b.n	80006b2 <__aeabi_fadd+0x21a>
 8000768:	000d      	movs	r5, r1
 800076a:	e74d      	b.n	8000608 <__aeabi_fadd+0x170>
 800076c:	2320      	movs	r3, #32
 800076e:	4641      	mov	r1, r8
 8000770:	4640      	mov	r0, r8
 8000772:	40d1      	lsrs	r1, r2
 8000774:	1a9a      	subs	r2, r3, r2
 8000776:	4090      	lsls	r0, r2
 8000778:	1e43      	subs	r3, r0, #1
 800077a:	4198      	sbcs	r0, r3
 800077c:	4308      	orrs	r0, r1
 800077e:	e770      	b.n	8000662 <__aeabi_fadd+0x1ca>
 8000780:	4642      	mov	r2, r8
 8000782:	2a00      	cmp	r2, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x2f0>
 8000786:	e74f      	b.n	8000628 <__aeabi_fadd+0x190>
 8000788:	2e00      	cmp	r6, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0x2f6>
 800078c:	e74d      	b.n	800062a <__aeabi_fadd+0x192>
 800078e:	2280      	movs	r2, #128	; 0x80
 8000790:	03d2      	lsls	r2, r2, #15
 8000792:	4213      	tst	r3, r2
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x300>
 8000796:	e748      	b.n	800062a <__aeabi_fadd+0x192>
 8000798:	4210      	tst	r0, r2
 800079a:	d000      	beq.n	800079e <__aeabi_fadd+0x306>
 800079c:	e745      	b.n	800062a <__aeabi_fadd+0x192>
 800079e:	0003      	movs	r3, r0
 80007a0:	e743      	b.n	800062a <__aeabi_fadd+0x192>
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d090      	beq.n	80006c8 <__aeabi_fadd+0x230>
 80007a6:	000c      	movs	r4, r1
 80007a8:	4684      	mov	ip, r0
 80007aa:	2200      	movs	r2, #0
 80007ac:	e6b9      	b.n	8000522 <__aeabi_fadd+0x8a>
 80007ae:	4643      	mov	r3, r8
 80007b0:	000c      	movs	r4, r1
 80007b2:	1af0      	subs	r0, r6, r3
 80007b4:	3501      	adds	r5, #1
 80007b6:	e693      	b.n	80004e0 <__aeabi_fadd+0x48>
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b1      	b.n	8000522 <__aeabi_fadd+0x8a>
 80007be:	2800      	cmp	r0, #0
 80007c0:	d000      	beq.n	80007c4 <__aeabi_fadd+0x32c>
 80007c2:	e71d      	b.n	8000600 <__aeabi_fadd+0x168>
 80007c4:	2300      	movs	r3, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	469c      	mov	ip, r3
 80007ca:	e6aa      	b.n	8000522 <__aeabi_fadd+0x8a>
 80007cc:	fbffffff 	.word	0xfbffffff
 80007d0:	7dffffff 	.word	0x7dffffff

080007d4 <__aeabi_fdiv>:
 80007d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007d6:	464f      	mov	r7, r9
 80007d8:	4646      	mov	r6, r8
 80007da:	46d6      	mov	lr, sl
 80007dc:	0245      	lsls	r5, r0, #9
 80007de:	b5c0      	push	{r6, r7, lr}
 80007e0:	0047      	lsls	r7, r0, #1
 80007e2:	1c0c      	adds	r4, r1, #0
 80007e4:	0a6d      	lsrs	r5, r5, #9
 80007e6:	0e3f      	lsrs	r7, r7, #24
 80007e8:	0fc6      	lsrs	r6, r0, #31
 80007ea:	2f00      	cmp	r7, #0
 80007ec:	d100      	bne.n	80007f0 <__aeabi_fdiv+0x1c>
 80007ee:	e070      	b.n	80008d2 <__aeabi_fdiv+0xfe>
 80007f0:	2fff      	cmp	r7, #255	; 0xff
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fdiv+0x22>
 80007f4:	e075      	b.n	80008e2 <__aeabi_fdiv+0x10e>
 80007f6:	00eb      	lsls	r3, r5, #3
 80007f8:	2580      	movs	r5, #128	; 0x80
 80007fa:	04ed      	lsls	r5, r5, #19
 80007fc:	431d      	orrs	r5, r3
 80007fe:	2300      	movs	r3, #0
 8000800:	4699      	mov	r9, r3
 8000802:	469a      	mov	sl, r3
 8000804:	3f7f      	subs	r7, #127	; 0x7f
 8000806:	0260      	lsls	r0, r4, #9
 8000808:	0a43      	lsrs	r3, r0, #9
 800080a:	4698      	mov	r8, r3
 800080c:	0063      	lsls	r3, r4, #1
 800080e:	0e1b      	lsrs	r3, r3, #24
 8000810:	0fe4      	lsrs	r4, r4, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d04e      	beq.n	80008b4 <__aeabi_fdiv+0xe0>
 8000816:	2bff      	cmp	r3, #255	; 0xff
 8000818:	d046      	beq.n	80008a8 <__aeabi_fdiv+0xd4>
 800081a:	4642      	mov	r2, r8
 800081c:	00d0      	lsls	r0, r2, #3
 800081e:	2280      	movs	r2, #128	; 0x80
 8000820:	04d2      	lsls	r2, r2, #19
 8000822:	4302      	orrs	r2, r0
 8000824:	4690      	mov	r8, r2
 8000826:	2200      	movs	r2, #0
 8000828:	3b7f      	subs	r3, #127	; 0x7f
 800082a:	0031      	movs	r1, r6
 800082c:	1aff      	subs	r7, r7, r3
 800082e:	464b      	mov	r3, r9
 8000830:	4061      	eors	r1, r4
 8000832:	b2c9      	uxtb	r1, r1
 8000834:	4313      	orrs	r3, r2
 8000836:	2b0f      	cmp	r3, #15
 8000838:	d900      	bls.n	800083c <__aeabi_fdiv+0x68>
 800083a:	e0b5      	b.n	80009a8 <__aeabi_fdiv+0x1d4>
 800083c:	486e      	ldr	r0, [pc, #440]	; (80009f8 <__aeabi_fdiv+0x224>)
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	58c3      	ldr	r3, [r0, r3]
 8000842:	469f      	mov	pc, r3
 8000844:	2300      	movs	r3, #0
 8000846:	4698      	mov	r8, r3
 8000848:	0026      	movs	r6, r4
 800084a:	4645      	mov	r5, r8
 800084c:	4692      	mov	sl, r2
 800084e:	4653      	mov	r3, sl
 8000850:	2b02      	cmp	r3, #2
 8000852:	d100      	bne.n	8000856 <__aeabi_fdiv+0x82>
 8000854:	e089      	b.n	800096a <__aeabi_fdiv+0x196>
 8000856:	2b03      	cmp	r3, #3
 8000858:	d100      	bne.n	800085c <__aeabi_fdiv+0x88>
 800085a:	e09e      	b.n	800099a <__aeabi_fdiv+0x1c6>
 800085c:	2b01      	cmp	r3, #1
 800085e:	d018      	beq.n	8000892 <__aeabi_fdiv+0xbe>
 8000860:	003b      	movs	r3, r7
 8000862:	337f      	adds	r3, #127	; 0x7f
 8000864:	2b00      	cmp	r3, #0
 8000866:	dd69      	ble.n	800093c <__aeabi_fdiv+0x168>
 8000868:	076a      	lsls	r2, r5, #29
 800086a:	d004      	beq.n	8000876 <__aeabi_fdiv+0xa2>
 800086c:	220f      	movs	r2, #15
 800086e:	402a      	ands	r2, r5
 8000870:	2a04      	cmp	r2, #4
 8000872:	d000      	beq.n	8000876 <__aeabi_fdiv+0xa2>
 8000874:	3504      	adds	r5, #4
 8000876:	012a      	lsls	r2, r5, #4
 8000878:	d503      	bpl.n	8000882 <__aeabi_fdiv+0xae>
 800087a:	4b60      	ldr	r3, [pc, #384]	; (80009fc <__aeabi_fdiv+0x228>)
 800087c:	401d      	ands	r5, r3
 800087e:	003b      	movs	r3, r7
 8000880:	3380      	adds	r3, #128	; 0x80
 8000882:	2bfe      	cmp	r3, #254	; 0xfe
 8000884:	dd00      	ble.n	8000888 <__aeabi_fdiv+0xb4>
 8000886:	e070      	b.n	800096a <__aeabi_fdiv+0x196>
 8000888:	01ad      	lsls	r5, r5, #6
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	b2d8      	uxtb	r0, r3
 800088e:	e002      	b.n	8000896 <__aeabi_fdiv+0xc2>
 8000890:	000e      	movs	r6, r1
 8000892:	2000      	movs	r0, #0
 8000894:	2500      	movs	r5, #0
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4328      	orrs	r0, r5
 800089a:	07f6      	lsls	r6, r6, #31
 800089c:	4330      	orrs	r0, r6
 800089e:	bce0      	pop	{r5, r6, r7}
 80008a0:	46ba      	mov	sl, r7
 80008a2:	46b1      	mov	r9, r6
 80008a4:	46a8      	mov	r8, r5
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	4643      	mov	r3, r8
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d13f      	bne.n	800092e <__aeabi_fdiv+0x15a>
 80008ae:	2202      	movs	r2, #2
 80008b0:	3fff      	subs	r7, #255	; 0xff
 80008b2:	e003      	b.n	80008bc <__aeabi_fdiv+0xe8>
 80008b4:	4643      	mov	r3, r8
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d12d      	bne.n	8000916 <__aeabi_fdiv+0x142>
 80008ba:	2201      	movs	r2, #1
 80008bc:	0031      	movs	r1, r6
 80008be:	464b      	mov	r3, r9
 80008c0:	4061      	eors	r1, r4
 80008c2:	b2c9      	uxtb	r1, r1
 80008c4:	4313      	orrs	r3, r2
 80008c6:	2b0f      	cmp	r3, #15
 80008c8:	d834      	bhi.n	8000934 <__aeabi_fdiv+0x160>
 80008ca:	484d      	ldr	r0, [pc, #308]	; (8000a00 <__aeabi_fdiv+0x22c>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58c3      	ldr	r3, [r0, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d113      	bne.n	80008fe <__aeabi_fdiv+0x12a>
 80008d6:	2304      	movs	r3, #4
 80008d8:	4699      	mov	r9, r3
 80008da:	3b03      	subs	r3, #3
 80008dc:	2700      	movs	r7, #0
 80008de:	469a      	mov	sl, r3
 80008e0:	e791      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d105      	bne.n	80008f2 <__aeabi_fdiv+0x11e>
 80008e6:	2308      	movs	r3, #8
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b06      	subs	r3, #6
 80008ec:	27ff      	movs	r7, #255	; 0xff
 80008ee:	469a      	mov	sl, r3
 80008f0:	e789      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008f2:	230c      	movs	r3, #12
 80008f4:	4699      	mov	r9, r3
 80008f6:	3b09      	subs	r3, #9
 80008f8:	27ff      	movs	r7, #255	; 0xff
 80008fa:	469a      	mov	sl, r3
 80008fc:	e783      	b.n	8000806 <__aeabi_fdiv+0x32>
 80008fe:	0028      	movs	r0, r5
 8000900:	f001 fe0c 	bl	800251c <__clzsi2>
 8000904:	2776      	movs	r7, #118	; 0x76
 8000906:	1f43      	subs	r3, r0, #5
 8000908:	409d      	lsls	r5, r3
 800090a:	2300      	movs	r3, #0
 800090c:	427f      	negs	r7, r7
 800090e:	4699      	mov	r9, r3
 8000910:	469a      	mov	sl, r3
 8000912:	1a3f      	subs	r7, r7, r0
 8000914:	e777      	b.n	8000806 <__aeabi_fdiv+0x32>
 8000916:	4640      	mov	r0, r8
 8000918:	f001 fe00 	bl	800251c <__clzsi2>
 800091c:	4642      	mov	r2, r8
 800091e:	1f43      	subs	r3, r0, #5
 8000920:	409a      	lsls	r2, r3
 8000922:	2376      	movs	r3, #118	; 0x76
 8000924:	425b      	negs	r3, r3
 8000926:	4690      	mov	r8, r2
 8000928:	1a1b      	subs	r3, r3, r0
 800092a:	2200      	movs	r2, #0
 800092c:	e77d      	b.n	800082a <__aeabi_fdiv+0x56>
 800092e:	23ff      	movs	r3, #255	; 0xff
 8000930:	2203      	movs	r2, #3
 8000932:	e77a      	b.n	800082a <__aeabi_fdiv+0x56>
 8000934:	000e      	movs	r6, r1
 8000936:	20ff      	movs	r0, #255	; 0xff
 8000938:	2500      	movs	r5, #0
 800093a:	e7ac      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800093c:	2001      	movs	r0, #1
 800093e:	1ac0      	subs	r0, r0, r3
 8000940:	281b      	cmp	r0, #27
 8000942:	dca6      	bgt.n	8000892 <__aeabi_fdiv+0xbe>
 8000944:	379e      	adds	r7, #158	; 0x9e
 8000946:	002a      	movs	r2, r5
 8000948:	40bd      	lsls	r5, r7
 800094a:	40c2      	lsrs	r2, r0
 800094c:	1e6b      	subs	r3, r5, #1
 800094e:	419d      	sbcs	r5, r3
 8000950:	4315      	orrs	r5, r2
 8000952:	076b      	lsls	r3, r5, #29
 8000954:	d004      	beq.n	8000960 <__aeabi_fdiv+0x18c>
 8000956:	230f      	movs	r3, #15
 8000958:	402b      	ands	r3, r5
 800095a:	2b04      	cmp	r3, #4
 800095c:	d000      	beq.n	8000960 <__aeabi_fdiv+0x18c>
 800095e:	3504      	adds	r5, #4
 8000960:	016b      	lsls	r3, r5, #5
 8000962:	d544      	bpl.n	80009ee <__aeabi_fdiv+0x21a>
 8000964:	2001      	movs	r0, #1
 8000966:	2500      	movs	r5, #0
 8000968:	e795      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	2500      	movs	r5, #0
 800096e:	e792      	b.n	8000896 <__aeabi_fdiv+0xc2>
 8000970:	2580      	movs	r5, #128	; 0x80
 8000972:	2600      	movs	r6, #0
 8000974:	20ff      	movs	r0, #255	; 0xff
 8000976:	03ed      	lsls	r5, r5, #15
 8000978:	e78d      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800097a:	2300      	movs	r3, #0
 800097c:	4698      	mov	r8, r3
 800097e:	2080      	movs	r0, #128	; 0x80
 8000980:	03c0      	lsls	r0, r0, #15
 8000982:	4205      	tst	r5, r0
 8000984:	d009      	beq.n	800099a <__aeabi_fdiv+0x1c6>
 8000986:	4643      	mov	r3, r8
 8000988:	4203      	tst	r3, r0
 800098a:	d106      	bne.n	800099a <__aeabi_fdiv+0x1c6>
 800098c:	4645      	mov	r5, r8
 800098e:	4305      	orrs	r5, r0
 8000990:	026d      	lsls	r5, r5, #9
 8000992:	0026      	movs	r6, r4
 8000994:	20ff      	movs	r0, #255	; 0xff
 8000996:	0a6d      	lsrs	r5, r5, #9
 8000998:	e77d      	b.n	8000896 <__aeabi_fdiv+0xc2>
 800099a:	2080      	movs	r0, #128	; 0x80
 800099c:	03c0      	lsls	r0, r0, #15
 800099e:	4305      	orrs	r5, r0
 80009a0:	026d      	lsls	r5, r5, #9
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	0a6d      	lsrs	r5, r5, #9
 80009a6:	e776      	b.n	8000896 <__aeabi_fdiv+0xc2>
 80009a8:	4642      	mov	r2, r8
 80009aa:	016b      	lsls	r3, r5, #5
 80009ac:	0150      	lsls	r0, r2, #5
 80009ae:	4283      	cmp	r3, r0
 80009b0:	d219      	bcs.n	80009e6 <__aeabi_fdiv+0x212>
 80009b2:	221b      	movs	r2, #27
 80009b4:	2500      	movs	r5, #0
 80009b6:	3f01      	subs	r7, #1
 80009b8:	2601      	movs	r6, #1
 80009ba:	001c      	movs	r4, r3
 80009bc:	006d      	lsls	r5, r5, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	db01      	blt.n	80009c8 <__aeabi_fdiv+0x1f4>
 80009c4:	4298      	cmp	r0, r3
 80009c6:	d801      	bhi.n	80009cc <__aeabi_fdiv+0x1f8>
 80009c8:	1a1b      	subs	r3, r3, r0
 80009ca:	4335      	orrs	r5, r6
 80009cc:	3a01      	subs	r2, #1
 80009ce:	2a00      	cmp	r2, #0
 80009d0:	d1f3      	bne.n	80009ba <__aeabi_fdiv+0x1e6>
 80009d2:	1e5a      	subs	r2, r3, #1
 80009d4:	4193      	sbcs	r3, r2
 80009d6:	431d      	orrs	r5, r3
 80009d8:	003b      	movs	r3, r7
 80009da:	337f      	adds	r3, #127	; 0x7f
 80009dc:	000e      	movs	r6, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	dd00      	ble.n	80009e4 <__aeabi_fdiv+0x210>
 80009e2:	e741      	b.n	8000868 <__aeabi_fdiv+0x94>
 80009e4:	e7aa      	b.n	800093c <__aeabi_fdiv+0x168>
 80009e6:	221a      	movs	r2, #26
 80009e8:	2501      	movs	r5, #1
 80009ea:	1a1b      	subs	r3, r3, r0
 80009ec:	e7e4      	b.n	80009b8 <__aeabi_fdiv+0x1e4>
 80009ee:	01ad      	lsls	r5, r5, #6
 80009f0:	2000      	movs	r0, #0
 80009f2:	0a6d      	lsrs	r5, r5, #9
 80009f4:	e74f      	b.n	8000896 <__aeabi_fdiv+0xc2>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	080086e8 	.word	0x080086e8
 80009fc:	f7ffffff 	.word	0xf7ffffff
 8000a00:	08008728 	.word	0x08008728

08000a04 <__aeabi_fmul>:
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	464f      	mov	r7, r9
 8000a08:	4646      	mov	r6, r8
 8000a0a:	46d6      	mov	lr, sl
 8000a0c:	0244      	lsls	r4, r0, #9
 8000a0e:	0045      	lsls	r5, r0, #1
 8000a10:	b5c0      	push	{r6, r7, lr}
 8000a12:	0a64      	lsrs	r4, r4, #9
 8000a14:	1c0f      	adds	r7, r1, #0
 8000a16:	0e2d      	lsrs	r5, r5, #24
 8000a18:	0fc6      	lsrs	r6, r0, #31
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_fmul+0x1c>
 8000a1e:	e08d      	b.n	8000b3c <__aeabi_fmul+0x138>
 8000a20:	2dff      	cmp	r5, #255	; 0xff
 8000a22:	d100      	bne.n	8000a26 <__aeabi_fmul+0x22>
 8000a24:	e092      	b.n	8000b4c <__aeabi_fmul+0x148>
 8000a26:	2300      	movs	r3, #0
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	4699      	mov	r9, r3
 8000a2c:	469a      	mov	sl, r3
 8000a2e:	00e4      	lsls	r4, r4, #3
 8000a30:	04c0      	lsls	r0, r0, #19
 8000a32:	4304      	orrs	r4, r0
 8000a34:	3d7f      	subs	r5, #127	; 0x7f
 8000a36:	0278      	lsls	r0, r7, #9
 8000a38:	0a43      	lsrs	r3, r0, #9
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	007b      	lsls	r3, r7, #1
 8000a3e:	0e1b      	lsrs	r3, r3, #24
 8000a40:	0fff      	lsrs	r7, r7, #31
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_fmul+0x44>
 8000a46:	e070      	b.n	8000b2a <__aeabi_fmul+0x126>
 8000a48:	2bff      	cmp	r3, #255	; 0xff
 8000a4a:	d100      	bne.n	8000a4e <__aeabi_fmul+0x4a>
 8000a4c:	e086      	b.n	8000b5c <__aeabi_fmul+0x158>
 8000a4e:	4642      	mov	r2, r8
 8000a50:	00d0      	lsls	r0, r2, #3
 8000a52:	2280      	movs	r2, #128	; 0x80
 8000a54:	3b7f      	subs	r3, #127	; 0x7f
 8000a56:	18ed      	adds	r5, r5, r3
 8000a58:	2300      	movs	r3, #0
 8000a5a:	04d2      	lsls	r2, r2, #19
 8000a5c:	4302      	orrs	r2, r0
 8000a5e:	4690      	mov	r8, r2
 8000a60:	469c      	mov	ip, r3
 8000a62:	0031      	movs	r1, r6
 8000a64:	464b      	mov	r3, r9
 8000a66:	4079      	eors	r1, r7
 8000a68:	1c68      	adds	r0, r5, #1
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d81c      	bhi.n	8000aa8 <__aeabi_fmul+0xa4>
 8000a6e:	4a76      	ldr	r2, [pc, #472]	; (8000c48 <__aeabi_fmul+0x244>)
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	469f      	mov	pc, r3
 8000a76:	0039      	movs	r1, r7
 8000a78:	4644      	mov	r4, r8
 8000a7a:	46e2      	mov	sl, ip
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	2b02      	cmp	r3, #2
 8000a80:	d00f      	beq.n	8000aa2 <__aeabi_fmul+0x9e>
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fmul+0x84>
 8000a86:	e0d7      	b.n	8000c38 <__aeabi_fmul+0x234>
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d137      	bne.n	8000afc <__aeabi_fmul+0xf8>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2400      	movs	r4, #0
 8000a90:	05c0      	lsls	r0, r0, #23
 8000a92:	4320      	orrs	r0, r4
 8000a94:	07c9      	lsls	r1, r1, #31
 8000a96:	4308      	orrs	r0, r1
 8000a98:	bce0      	pop	{r5, r6, r7}
 8000a9a:	46ba      	mov	sl, r7
 8000a9c:	46b1      	mov	r9, r6
 8000a9e:	46a8      	mov	r8, r5
 8000aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000aa2:	20ff      	movs	r0, #255	; 0xff
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	e7f3      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000aa8:	0c26      	lsrs	r6, r4, #16
 8000aaa:	0424      	lsls	r4, r4, #16
 8000aac:	0c22      	lsrs	r2, r4, #16
 8000aae:	4644      	mov	r4, r8
 8000ab0:	0424      	lsls	r4, r4, #16
 8000ab2:	0c24      	lsrs	r4, r4, #16
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	0027      	movs	r7, r4
 8000ab8:	0c1b      	lsrs	r3, r3, #16
 8000aba:	4357      	muls	r7, r2
 8000abc:	4374      	muls	r4, r6
 8000abe:	435a      	muls	r2, r3
 8000ac0:	435e      	muls	r6, r3
 8000ac2:	1912      	adds	r2, r2, r4
 8000ac4:	0c3b      	lsrs	r3, r7, #16
 8000ac6:	189b      	adds	r3, r3, r2
 8000ac8:	429c      	cmp	r4, r3
 8000aca:	d903      	bls.n	8000ad4 <__aeabi_fmul+0xd0>
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	0252      	lsls	r2, r2, #9
 8000ad0:	4694      	mov	ip, r2
 8000ad2:	4466      	add	r6, ip
 8000ad4:	043f      	lsls	r7, r7, #16
 8000ad6:	041a      	lsls	r2, r3, #16
 8000ad8:	0c3f      	lsrs	r7, r7, #16
 8000ada:	19d2      	adds	r2, r2, r7
 8000adc:	0194      	lsls	r4, r2, #6
 8000ade:	1e67      	subs	r7, r4, #1
 8000ae0:	41bc      	sbcs	r4, r7
 8000ae2:	0c1b      	lsrs	r3, r3, #16
 8000ae4:	0e92      	lsrs	r2, r2, #26
 8000ae6:	199b      	adds	r3, r3, r6
 8000ae8:	4314      	orrs	r4, r2
 8000aea:	019b      	lsls	r3, r3, #6
 8000aec:	431c      	orrs	r4, r3
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	d400      	bmi.n	8000af4 <__aeabi_fmul+0xf0>
 8000af2:	e09b      	b.n	8000c2c <__aeabi_fmul+0x228>
 8000af4:	2301      	movs	r3, #1
 8000af6:	0862      	lsrs	r2, r4, #1
 8000af8:	401c      	ands	r4, r3
 8000afa:	4314      	orrs	r4, r2
 8000afc:	0002      	movs	r2, r0
 8000afe:	327f      	adds	r2, #127	; 0x7f
 8000b00:	2a00      	cmp	r2, #0
 8000b02:	dd64      	ble.n	8000bce <__aeabi_fmul+0x1ca>
 8000b04:	0763      	lsls	r3, r4, #29
 8000b06:	d004      	beq.n	8000b12 <__aeabi_fmul+0x10e>
 8000b08:	230f      	movs	r3, #15
 8000b0a:	4023      	ands	r3, r4
 8000b0c:	2b04      	cmp	r3, #4
 8000b0e:	d000      	beq.n	8000b12 <__aeabi_fmul+0x10e>
 8000b10:	3404      	adds	r4, #4
 8000b12:	0123      	lsls	r3, r4, #4
 8000b14:	d503      	bpl.n	8000b1e <__aeabi_fmul+0x11a>
 8000b16:	0002      	movs	r2, r0
 8000b18:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <__aeabi_fmul+0x248>)
 8000b1a:	3280      	adds	r2, #128	; 0x80
 8000b1c:	401c      	ands	r4, r3
 8000b1e:	2afe      	cmp	r2, #254	; 0xfe
 8000b20:	dcbf      	bgt.n	8000aa2 <__aeabi_fmul+0x9e>
 8000b22:	01a4      	lsls	r4, r4, #6
 8000b24:	0a64      	lsrs	r4, r4, #9
 8000b26:	b2d0      	uxtb	r0, r2
 8000b28:	e7b2      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000b2a:	4643      	mov	r3, r8
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d13d      	bne.n	8000bac <__aeabi_fmul+0x1a8>
 8000b30:	464a      	mov	r2, r9
 8000b32:	3301      	adds	r3, #1
 8000b34:	431a      	orrs	r2, r3
 8000b36:	4691      	mov	r9, r2
 8000b38:	469c      	mov	ip, r3
 8000b3a:	e792      	b.n	8000a62 <__aeabi_fmul+0x5e>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d129      	bne.n	8000b94 <__aeabi_fmul+0x190>
 8000b40:	2304      	movs	r3, #4
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b03      	subs	r3, #3
 8000b46:	2500      	movs	r5, #0
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e774      	b.n	8000a36 <__aeabi_fmul+0x32>
 8000b4c:	2c00      	cmp	r4, #0
 8000b4e:	d11b      	bne.n	8000b88 <__aeabi_fmul+0x184>
 8000b50:	2308      	movs	r3, #8
 8000b52:	4699      	mov	r9, r3
 8000b54:	3b06      	subs	r3, #6
 8000b56:	25ff      	movs	r5, #255	; 0xff
 8000b58:	469a      	mov	sl, r3
 8000b5a:	e76c      	b.n	8000a36 <__aeabi_fmul+0x32>
 8000b5c:	4643      	mov	r3, r8
 8000b5e:	35ff      	adds	r5, #255	; 0xff
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10b      	bne.n	8000b7c <__aeabi_fmul+0x178>
 8000b64:	2302      	movs	r3, #2
 8000b66:	464a      	mov	r2, r9
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	4691      	mov	r9, r2
 8000b6c:	469c      	mov	ip, r3
 8000b6e:	e778      	b.n	8000a62 <__aeabi_fmul+0x5e>
 8000b70:	4653      	mov	r3, sl
 8000b72:	0031      	movs	r1, r6
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fmul+0x176>
 8000b78:	e783      	b.n	8000a82 <__aeabi_fmul+0x7e>
 8000b7a:	e792      	b.n	8000aa2 <__aeabi_fmul+0x9e>
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	464a      	mov	r2, r9
 8000b80:	431a      	orrs	r2, r3
 8000b82:	4691      	mov	r9, r2
 8000b84:	469c      	mov	ip, r3
 8000b86:	e76c      	b.n	8000a62 <__aeabi_fmul+0x5e>
 8000b88:	230c      	movs	r3, #12
 8000b8a:	4699      	mov	r9, r3
 8000b8c:	3b09      	subs	r3, #9
 8000b8e:	25ff      	movs	r5, #255	; 0xff
 8000b90:	469a      	mov	sl, r3
 8000b92:	e750      	b.n	8000a36 <__aeabi_fmul+0x32>
 8000b94:	0020      	movs	r0, r4
 8000b96:	f001 fcc1 	bl	800251c <__clzsi2>
 8000b9a:	2576      	movs	r5, #118	; 0x76
 8000b9c:	1f43      	subs	r3, r0, #5
 8000b9e:	409c      	lsls	r4, r3
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	426d      	negs	r5, r5
 8000ba4:	4699      	mov	r9, r3
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	1a2d      	subs	r5, r5, r0
 8000baa:	e744      	b.n	8000a36 <__aeabi_fmul+0x32>
 8000bac:	4640      	mov	r0, r8
 8000bae:	f001 fcb5 	bl	800251c <__clzsi2>
 8000bb2:	4642      	mov	r2, r8
 8000bb4:	1f43      	subs	r3, r0, #5
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	1a2d      	subs	r5, r5, r0
 8000bbc:	4690      	mov	r8, r2
 8000bbe:	469c      	mov	ip, r3
 8000bc0:	3d76      	subs	r5, #118	; 0x76
 8000bc2:	e74e      	b.n	8000a62 <__aeabi_fmul+0x5e>
 8000bc4:	2480      	movs	r4, #128	; 0x80
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	20ff      	movs	r0, #255	; 0xff
 8000bca:	03e4      	lsls	r4, r4, #15
 8000bcc:	e760      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	1a9b      	subs	r3, r3, r2
 8000bd2:	2b1b      	cmp	r3, #27
 8000bd4:	dd00      	ble.n	8000bd8 <__aeabi_fmul+0x1d4>
 8000bd6:	e759      	b.n	8000a8c <__aeabi_fmul+0x88>
 8000bd8:	0022      	movs	r2, r4
 8000bda:	309e      	adds	r0, #158	; 0x9e
 8000bdc:	40da      	lsrs	r2, r3
 8000bde:	4084      	lsls	r4, r0
 8000be0:	0013      	movs	r3, r2
 8000be2:	1e62      	subs	r2, r4, #1
 8000be4:	4194      	sbcs	r4, r2
 8000be6:	431c      	orrs	r4, r3
 8000be8:	0763      	lsls	r3, r4, #29
 8000bea:	d004      	beq.n	8000bf6 <__aeabi_fmul+0x1f2>
 8000bec:	230f      	movs	r3, #15
 8000bee:	4023      	ands	r3, r4
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d000      	beq.n	8000bf6 <__aeabi_fmul+0x1f2>
 8000bf4:	3404      	adds	r4, #4
 8000bf6:	0163      	lsls	r3, r4, #5
 8000bf8:	d51a      	bpl.n	8000c30 <__aeabi_fmul+0x22c>
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	2400      	movs	r4, #0
 8000bfe:	e747      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000c00:	2080      	movs	r0, #128	; 0x80
 8000c02:	03c0      	lsls	r0, r0, #15
 8000c04:	4204      	tst	r4, r0
 8000c06:	d009      	beq.n	8000c1c <__aeabi_fmul+0x218>
 8000c08:	4643      	mov	r3, r8
 8000c0a:	4203      	tst	r3, r0
 8000c0c:	d106      	bne.n	8000c1c <__aeabi_fmul+0x218>
 8000c0e:	4644      	mov	r4, r8
 8000c10:	4304      	orrs	r4, r0
 8000c12:	0264      	lsls	r4, r4, #9
 8000c14:	0039      	movs	r1, r7
 8000c16:	20ff      	movs	r0, #255	; 0xff
 8000c18:	0a64      	lsrs	r4, r4, #9
 8000c1a:	e739      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000c1c:	2080      	movs	r0, #128	; 0x80
 8000c1e:	03c0      	lsls	r0, r0, #15
 8000c20:	4304      	orrs	r4, r0
 8000c22:	0264      	lsls	r4, r4, #9
 8000c24:	0031      	movs	r1, r6
 8000c26:	20ff      	movs	r0, #255	; 0xff
 8000c28:	0a64      	lsrs	r4, r4, #9
 8000c2a:	e731      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000c2c:	0028      	movs	r0, r5
 8000c2e:	e765      	b.n	8000afc <__aeabi_fmul+0xf8>
 8000c30:	01a4      	lsls	r4, r4, #6
 8000c32:	2000      	movs	r0, #0
 8000c34:	0a64      	lsrs	r4, r4, #9
 8000c36:	e72b      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000c38:	2080      	movs	r0, #128	; 0x80
 8000c3a:	03c0      	lsls	r0, r0, #15
 8000c3c:	4304      	orrs	r4, r0
 8000c3e:	0264      	lsls	r4, r4, #9
 8000c40:	20ff      	movs	r0, #255	; 0xff
 8000c42:	0a64      	lsrs	r4, r4, #9
 8000c44:	e724      	b.n	8000a90 <__aeabi_fmul+0x8c>
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	08008768 	.word	0x08008768
 8000c4c:	f7ffffff 	.word	0xf7ffffff

08000c50 <__aeabi_fsub>:
 8000c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c52:	46ce      	mov	lr, r9
 8000c54:	4647      	mov	r7, r8
 8000c56:	0243      	lsls	r3, r0, #9
 8000c58:	0a5b      	lsrs	r3, r3, #9
 8000c5a:	024e      	lsls	r6, r1, #9
 8000c5c:	00da      	lsls	r2, r3, #3
 8000c5e:	4694      	mov	ip, r2
 8000c60:	0a72      	lsrs	r2, r6, #9
 8000c62:	4691      	mov	r9, r2
 8000c64:	0045      	lsls	r5, r0, #1
 8000c66:	004a      	lsls	r2, r1, #1
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	0e2d      	lsrs	r5, r5, #24
 8000c6c:	001f      	movs	r7, r3
 8000c6e:	0fc4      	lsrs	r4, r0, #31
 8000c70:	0e12      	lsrs	r2, r2, #24
 8000c72:	0fc9      	lsrs	r1, r1, #31
 8000c74:	09b6      	lsrs	r6, r6, #6
 8000c76:	2aff      	cmp	r2, #255	; 0xff
 8000c78:	d05b      	beq.n	8000d32 <__aeabi_fsub+0xe2>
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	4041      	eors	r1, r0
 8000c7e:	428c      	cmp	r4, r1
 8000c80:	d039      	beq.n	8000cf6 <__aeabi_fsub+0xa6>
 8000c82:	1aa8      	subs	r0, r5, r2
 8000c84:	2800      	cmp	r0, #0
 8000c86:	dd5a      	ble.n	8000d3e <__aeabi_fsub+0xee>
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d06a      	beq.n	8000d62 <__aeabi_fsub+0x112>
 8000c8c:	2dff      	cmp	r5, #255	; 0xff
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x42>
 8000c90:	e0d9      	b.n	8000e46 <__aeabi_fsub+0x1f6>
 8000c92:	2280      	movs	r2, #128	; 0x80
 8000c94:	04d2      	lsls	r2, r2, #19
 8000c96:	4316      	orrs	r6, r2
 8000c98:	281b      	cmp	r0, #27
 8000c9a:	dc00      	bgt.n	8000c9e <__aeabi_fsub+0x4e>
 8000c9c:	e0e9      	b.n	8000e72 <__aeabi_fsub+0x222>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4663      	mov	r3, ip
 8000ca2:	1a18      	subs	r0, r3, r0
 8000ca4:	0143      	lsls	r3, r0, #5
 8000ca6:	d400      	bmi.n	8000caa <__aeabi_fsub+0x5a>
 8000ca8:	e0b4      	b.n	8000e14 <__aeabi_fsub+0x1c4>
 8000caa:	0180      	lsls	r0, r0, #6
 8000cac:	0987      	lsrs	r7, r0, #6
 8000cae:	0038      	movs	r0, r7
 8000cb0:	f001 fc34 	bl	800251c <__clzsi2>
 8000cb4:	3805      	subs	r0, #5
 8000cb6:	4087      	lsls	r7, r0
 8000cb8:	4285      	cmp	r5, r0
 8000cba:	dc00      	bgt.n	8000cbe <__aeabi_fsub+0x6e>
 8000cbc:	e0cc      	b.n	8000e58 <__aeabi_fsub+0x208>
 8000cbe:	1a2d      	subs	r5, r5, r0
 8000cc0:	48b5      	ldr	r0, [pc, #724]	; (8000f98 <__aeabi_fsub+0x348>)
 8000cc2:	4038      	ands	r0, r7
 8000cc4:	0743      	lsls	r3, r0, #29
 8000cc6:	d004      	beq.n	8000cd2 <__aeabi_fsub+0x82>
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4003      	ands	r3, r0
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_fsub+0x82>
 8000cd0:	3004      	adds	r0, #4
 8000cd2:	0143      	lsls	r3, r0, #5
 8000cd4:	d400      	bmi.n	8000cd8 <__aeabi_fsub+0x88>
 8000cd6:	e0a0      	b.n	8000e1a <__aeabi_fsub+0x1ca>
 8000cd8:	1c6a      	adds	r2, r5, #1
 8000cda:	2dfe      	cmp	r5, #254	; 0xfe
 8000cdc:	d100      	bne.n	8000ce0 <__aeabi_fsub+0x90>
 8000cde:	e08d      	b.n	8000dfc <__aeabi_fsub+0x1ac>
 8000ce0:	0180      	lsls	r0, r0, #6
 8000ce2:	0a47      	lsrs	r7, r0, #9
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	05d0      	lsls	r0, r2, #23
 8000ce8:	4338      	orrs	r0, r7
 8000cea:	07e4      	lsls	r4, r4, #31
 8000cec:	4320      	orrs	r0, r4
 8000cee:	bcc0      	pop	{r6, r7}
 8000cf0:	46b9      	mov	r9, r7
 8000cf2:	46b0      	mov	r8, r6
 8000cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cf6:	1aa8      	subs	r0, r5, r2
 8000cf8:	4680      	mov	r8, r0
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	dd45      	ble.n	8000d8a <__aeabi_fsub+0x13a>
 8000cfe:	2a00      	cmp	r2, #0
 8000d00:	d070      	beq.n	8000de4 <__aeabi_fsub+0x194>
 8000d02:	2dff      	cmp	r5, #255	; 0xff
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0xb8>
 8000d06:	e09e      	b.n	8000e46 <__aeabi_fsub+0x1f6>
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	04db      	lsls	r3, r3, #19
 8000d0c:	431e      	orrs	r6, r3
 8000d0e:	4643      	mov	r3, r8
 8000d10:	2b1b      	cmp	r3, #27
 8000d12:	dc00      	bgt.n	8000d16 <__aeabi_fsub+0xc6>
 8000d14:	e0d2      	b.n	8000ebc <__aeabi_fsub+0x26c>
 8000d16:	2001      	movs	r0, #1
 8000d18:	4460      	add	r0, ip
 8000d1a:	0143      	lsls	r3, r0, #5
 8000d1c:	d57a      	bpl.n	8000e14 <__aeabi_fsub+0x1c4>
 8000d1e:	3501      	adds	r5, #1
 8000d20:	2dff      	cmp	r5, #255	; 0xff
 8000d22:	d06b      	beq.n	8000dfc <__aeabi_fsub+0x1ac>
 8000d24:	2301      	movs	r3, #1
 8000d26:	4a9d      	ldr	r2, [pc, #628]	; (8000f9c <__aeabi_fsub+0x34c>)
 8000d28:	4003      	ands	r3, r0
 8000d2a:	0840      	lsrs	r0, r0, #1
 8000d2c:	4010      	ands	r0, r2
 8000d2e:	4318      	orrs	r0, r3
 8000d30:	e7c8      	b.n	8000cc4 <__aeabi_fsub+0x74>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d020      	beq.n	8000d78 <__aeabi_fsub+0x128>
 8000d36:	428c      	cmp	r4, r1
 8000d38:	d023      	beq.n	8000d82 <__aeabi_fsub+0x132>
 8000d3a:	0028      	movs	r0, r5
 8000d3c:	38ff      	subs	r0, #255	; 0xff
 8000d3e:	2800      	cmp	r0, #0
 8000d40:	d039      	beq.n	8000db6 <__aeabi_fsub+0x166>
 8000d42:	1b57      	subs	r7, r2, r5
 8000d44:	2d00      	cmp	r5, #0
 8000d46:	d000      	beq.n	8000d4a <__aeabi_fsub+0xfa>
 8000d48:	e09d      	b.n	8000e86 <__aeabi_fsub+0x236>
 8000d4a:	4663      	mov	r3, ip
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d100      	bne.n	8000d52 <__aeabi_fsub+0x102>
 8000d50:	e0db      	b.n	8000f0a <__aeabi_fsub+0x2ba>
 8000d52:	1e7b      	subs	r3, r7, #1
 8000d54:	2f01      	cmp	r7, #1
 8000d56:	d100      	bne.n	8000d5a <__aeabi_fsub+0x10a>
 8000d58:	e10d      	b.n	8000f76 <__aeabi_fsub+0x326>
 8000d5a:	2fff      	cmp	r7, #255	; 0xff
 8000d5c:	d071      	beq.n	8000e42 <__aeabi_fsub+0x1f2>
 8000d5e:	001f      	movs	r7, r3
 8000d60:	e098      	b.n	8000e94 <__aeabi_fsub+0x244>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d100      	bne.n	8000d68 <__aeabi_fsub+0x118>
 8000d66:	e0a7      	b.n	8000eb8 <__aeabi_fsub+0x268>
 8000d68:	1e42      	subs	r2, r0, #1
 8000d6a:	2801      	cmp	r0, #1
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x120>
 8000d6e:	e0e6      	b.n	8000f3e <__aeabi_fsub+0x2ee>
 8000d70:	28ff      	cmp	r0, #255	; 0xff
 8000d72:	d068      	beq.n	8000e46 <__aeabi_fsub+0x1f6>
 8000d74:	0010      	movs	r0, r2
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fsub+0x48>
 8000d78:	2001      	movs	r0, #1
 8000d7a:	4041      	eors	r1, r0
 8000d7c:	42a1      	cmp	r1, r4
 8000d7e:	d000      	beq.n	8000d82 <__aeabi_fsub+0x132>
 8000d80:	e77f      	b.n	8000c82 <__aeabi_fsub+0x32>
 8000d82:	20ff      	movs	r0, #255	; 0xff
 8000d84:	4240      	negs	r0, r0
 8000d86:	4680      	mov	r8, r0
 8000d88:	44a8      	add	r8, r5
 8000d8a:	4640      	mov	r0, r8
 8000d8c:	2800      	cmp	r0, #0
 8000d8e:	d038      	beq.n	8000e02 <__aeabi_fsub+0x1b2>
 8000d90:	1b51      	subs	r1, r2, r5
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	d100      	bne.n	8000d98 <__aeabi_fsub+0x148>
 8000d96:	e0ae      	b.n	8000ef6 <__aeabi_fsub+0x2a6>
 8000d98:	2aff      	cmp	r2, #255	; 0xff
 8000d9a:	d100      	bne.n	8000d9e <__aeabi_fsub+0x14e>
 8000d9c:	e0df      	b.n	8000f5e <__aeabi_fsub+0x30e>
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	4660      	mov	r0, ip
 8000da2:	04db      	lsls	r3, r3, #19
 8000da4:	4318      	orrs	r0, r3
 8000da6:	4684      	mov	ip, r0
 8000da8:	291b      	cmp	r1, #27
 8000daa:	dc00      	bgt.n	8000dae <__aeabi_fsub+0x15e>
 8000dac:	e0d9      	b.n	8000f62 <__aeabi_fsub+0x312>
 8000dae:	2001      	movs	r0, #1
 8000db0:	0015      	movs	r5, r2
 8000db2:	1980      	adds	r0, r0, r6
 8000db4:	e7b1      	b.n	8000d1a <__aeabi_fsub+0xca>
 8000db6:	20fe      	movs	r0, #254	; 0xfe
 8000db8:	1c6a      	adds	r2, r5, #1
 8000dba:	4210      	tst	r0, r2
 8000dbc:	d171      	bne.n	8000ea2 <__aeabi_fsub+0x252>
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d000      	beq.n	8000dc4 <__aeabi_fsub+0x174>
 8000dc2:	e0a6      	b.n	8000f12 <__aeabi_fsub+0x2c2>
 8000dc4:	4663      	mov	r3, ip
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d100      	bne.n	8000dcc <__aeabi_fsub+0x17c>
 8000dca:	e0d9      	b.n	8000f80 <__aeabi_fsub+0x330>
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x184>
 8000dd2:	e788      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000dd4:	1b98      	subs	r0, r3, r6
 8000dd6:	0143      	lsls	r3, r0, #5
 8000dd8:	d400      	bmi.n	8000ddc <__aeabi_fsub+0x18c>
 8000dda:	e0e1      	b.n	8000fa0 <__aeabi_fsub+0x350>
 8000ddc:	4663      	mov	r3, ip
 8000dde:	000c      	movs	r4, r1
 8000de0:	1af0      	subs	r0, r6, r3
 8000de2:	e76f      	b.n	8000cc4 <__aeabi_fsub+0x74>
 8000de4:	2e00      	cmp	r6, #0
 8000de6:	d100      	bne.n	8000dea <__aeabi_fsub+0x19a>
 8000de8:	e0b7      	b.n	8000f5a <__aeabi_fsub+0x30a>
 8000dea:	0002      	movs	r2, r0
 8000dec:	3a01      	subs	r2, #1
 8000dee:	2801      	cmp	r0, #1
 8000df0:	d100      	bne.n	8000df4 <__aeabi_fsub+0x1a4>
 8000df2:	e09c      	b.n	8000f2e <__aeabi_fsub+0x2de>
 8000df4:	28ff      	cmp	r0, #255	; 0xff
 8000df6:	d026      	beq.n	8000e46 <__aeabi_fsub+0x1f6>
 8000df8:	4690      	mov	r8, r2
 8000dfa:	e788      	b.n	8000d0e <__aeabi_fsub+0xbe>
 8000dfc:	22ff      	movs	r2, #255	; 0xff
 8000dfe:	2700      	movs	r7, #0
 8000e00:	e771      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000e02:	20fe      	movs	r0, #254	; 0xfe
 8000e04:	1c6a      	adds	r2, r5, #1
 8000e06:	4210      	tst	r0, r2
 8000e08:	d064      	beq.n	8000ed4 <__aeabi_fsub+0x284>
 8000e0a:	2aff      	cmp	r2, #255	; 0xff
 8000e0c:	d0f6      	beq.n	8000dfc <__aeabi_fsub+0x1ac>
 8000e0e:	0015      	movs	r5, r2
 8000e10:	4466      	add	r6, ip
 8000e12:	0870      	lsrs	r0, r6, #1
 8000e14:	0743      	lsls	r3, r0, #29
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x1ca>
 8000e18:	e756      	b.n	8000cc8 <__aeabi_fsub+0x78>
 8000e1a:	08c3      	lsrs	r3, r0, #3
 8000e1c:	2dff      	cmp	r5, #255	; 0xff
 8000e1e:	d012      	beq.n	8000e46 <__aeabi_fsub+0x1f6>
 8000e20:	025b      	lsls	r3, r3, #9
 8000e22:	0a5f      	lsrs	r7, r3, #9
 8000e24:	b2ea      	uxtb	r2, r5
 8000e26:	e75e      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000e28:	4662      	mov	r2, ip
 8000e2a:	2a00      	cmp	r2, #0
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fsub+0x1e0>
 8000e2e:	e096      	b.n	8000f5e <__aeabi_fsub+0x30e>
 8000e30:	2e00      	cmp	r6, #0
 8000e32:	d008      	beq.n	8000e46 <__aeabi_fsub+0x1f6>
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	03d2      	lsls	r2, r2, #15
 8000e38:	4213      	tst	r3, r2
 8000e3a:	d004      	beq.n	8000e46 <__aeabi_fsub+0x1f6>
 8000e3c:	4648      	mov	r0, r9
 8000e3e:	4210      	tst	r0, r2
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fsub+0x1f6>
 8000e42:	000c      	movs	r4, r1
 8000e44:	464b      	mov	r3, r9
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0d8      	beq.n	8000dfc <__aeabi_fsub+0x1ac>
 8000e4a:	2780      	movs	r7, #128	; 0x80
 8000e4c:	03ff      	lsls	r7, r7, #15
 8000e4e:	431f      	orrs	r7, r3
 8000e50:	027f      	lsls	r7, r7, #9
 8000e52:	22ff      	movs	r2, #255	; 0xff
 8000e54:	0a7f      	lsrs	r7, r7, #9
 8000e56:	e746      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000e58:	2320      	movs	r3, #32
 8000e5a:	003a      	movs	r2, r7
 8000e5c:	1b45      	subs	r5, r0, r5
 8000e5e:	0038      	movs	r0, r7
 8000e60:	3501      	adds	r5, #1
 8000e62:	40ea      	lsrs	r2, r5
 8000e64:	1b5d      	subs	r5, r3, r5
 8000e66:	40a8      	lsls	r0, r5
 8000e68:	1e43      	subs	r3, r0, #1
 8000e6a:	4198      	sbcs	r0, r3
 8000e6c:	2500      	movs	r5, #0
 8000e6e:	4310      	orrs	r0, r2
 8000e70:	e728      	b.n	8000cc4 <__aeabi_fsub+0x74>
 8000e72:	2320      	movs	r3, #32
 8000e74:	1a1b      	subs	r3, r3, r0
 8000e76:	0032      	movs	r2, r6
 8000e78:	409e      	lsls	r6, r3
 8000e7a:	40c2      	lsrs	r2, r0
 8000e7c:	0030      	movs	r0, r6
 8000e7e:	1e43      	subs	r3, r0, #1
 8000e80:	4198      	sbcs	r0, r3
 8000e82:	4310      	orrs	r0, r2
 8000e84:	e70c      	b.n	8000ca0 <__aeabi_fsub+0x50>
 8000e86:	2aff      	cmp	r2, #255	; 0xff
 8000e88:	d0db      	beq.n	8000e42 <__aeabi_fsub+0x1f2>
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	04db      	lsls	r3, r3, #19
 8000e90:	4318      	orrs	r0, r3
 8000e92:	4684      	mov	ip, r0
 8000e94:	2f1b      	cmp	r7, #27
 8000e96:	dd56      	ble.n	8000f46 <__aeabi_fsub+0x2f6>
 8000e98:	2001      	movs	r0, #1
 8000e9a:	000c      	movs	r4, r1
 8000e9c:	0015      	movs	r5, r2
 8000e9e:	1a30      	subs	r0, r6, r0
 8000ea0:	e700      	b.n	8000ca4 <__aeabi_fsub+0x54>
 8000ea2:	4663      	mov	r3, ip
 8000ea4:	1b9f      	subs	r7, r3, r6
 8000ea6:	017b      	lsls	r3, r7, #5
 8000ea8:	d43d      	bmi.n	8000f26 <__aeabi_fsub+0x2d6>
 8000eaa:	2f00      	cmp	r7, #0
 8000eac:	d000      	beq.n	8000eb0 <__aeabi_fsub+0x260>
 8000eae:	e6fe      	b.n	8000cae <__aeabi_fsub+0x5e>
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e716      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000eb8:	0005      	movs	r5, r0
 8000eba:	e7af      	b.n	8000e1c <__aeabi_fsub+0x1cc>
 8000ebc:	0032      	movs	r2, r6
 8000ebe:	4643      	mov	r3, r8
 8000ec0:	4641      	mov	r1, r8
 8000ec2:	40da      	lsrs	r2, r3
 8000ec4:	2320      	movs	r3, #32
 8000ec6:	1a5b      	subs	r3, r3, r1
 8000ec8:	409e      	lsls	r6, r3
 8000eca:	0030      	movs	r0, r6
 8000ecc:	1e43      	subs	r3, r0, #1
 8000ece:	4198      	sbcs	r0, r3
 8000ed0:	4310      	orrs	r0, r2
 8000ed2:	e721      	b.n	8000d18 <__aeabi_fsub+0xc8>
 8000ed4:	2d00      	cmp	r5, #0
 8000ed6:	d1a7      	bne.n	8000e28 <__aeabi_fsub+0x1d8>
 8000ed8:	4663      	mov	r3, ip
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d059      	beq.n	8000f92 <__aeabi_fsub+0x342>
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2e00      	cmp	r6, #0
 8000ee2:	d100      	bne.n	8000ee6 <__aeabi_fsub+0x296>
 8000ee4:	e6ff      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000ee6:	0030      	movs	r0, r6
 8000ee8:	4460      	add	r0, ip
 8000eea:	0143      	lsls	r3, r0, #5
 8000eec:	d592      	bpl.n	8000e14 <__aeabi_fsub+0x1c4>
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <__aeabi_fsub+0x348>)
 8000ef0:	3501      	adds	r5, #1
 8000ef2:	4018      	ands	r0, r3
 8000ef4:	e78e      	b.n	8000e14 <__aeabi_fsub+0x1c4>
 8000ef6:	4663      	mov	r3, ip
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d047      	beq.n	8000f8c <__aeabi_fsub+0x33c>
 8000efc:	1e4b      	subs	r3, r1, #1
 8000efe:	2901      	cmp	r1, #1
 8000f00:	d015      	beq.n	8000f2e <__aeabi_fsub+0x2de>
 8000f02:	29ff      	cmp	r1, #255	; 0xff
 8000f04:	d02b      	beq.n	8000f5e <__aeabi_fsub+0x30e>
 8000f06:	0019      	movs	r1, r3
 8000f08:	e74e      	b.n	8000da8 <__aeabi_fsub+0x158>
 8000f0a:	000c      	movs	r4, r1
 8000f0c:	464b      	mov	r3, r9
 8000f0e:	003d      	movs	r5, r7
 8000f10:	e784      	b.n	8000e1c <__aeabi_fsub+0x1cc>
 8000f12:	4662      	mov	r2, ip
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d18b      	bne.n	8000e30 <__aeabi_fsub+0x1e0>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d192      	bne.n	8000e42 <__aeabi_fsub+0x1f2>
 8000f1c:	2780      	movs	r7, #128	; 0x80
 8000f1e:	2400      	movs	r4, #0
 8000f20:	22ff      	movs	r2, #255	; 0xff
 8000f22:	03ff      	lsls	r7, r7, #15
 8000f24:	e6df      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000f26:	4663      	mov	r3, ip
 8000f28:	000c      	movs	r4, r1
 8000f2a:	1af7      	subs	r7, r6, r3
 8000f2c:	e6bf      	b.n	8000cae <__aeabi_fsub+0x5e>
 8000f2e:	0030      	movs	r0, r6
 8000f30:	4460      	add	r0, ip
 8000f32:	2501      	movs	r5, #1
 8000f34:	0143      	lsls	r3, r0, #5
 8000f36:	d400      	bmi.n	8000f3a <__aeabi_fsub+0x2ea>
 8000f38:	e76c      	b.n	8000e14 <__aeabi_fsub+0x1c4>
 8000f3a:	2502      	movs	r5, #2
 8000f3c:	e6f2      	b.n	8000d24 <__aeabi_fsub+0xd4>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	2501      	movs	r5, #1
 8000f42:	1b98      	subs	r0, r3, r6
 8000f44:	e6ae      	b.n	8000ca4 <__aeabi_fsub+0x54>
 8000f46:	2320      	movs	r3, #32
 8000f48:	4664      	mov	r4, ip
 8000f4a:	4660      	mov	r0, ip
 8000f4c:	40fc      	lsrs	r4, r7
 8000f4e:	1bdf      	subs	r7, r3, r7
 8000f50:	40b8      	lsls	r0, r7
 8000f52:	1e43      	subs	r3, r0, #1
 8000f54:	4198      	sbcs	r0, r3
 8000f56:	4320      	orrs	r0, r4
 8000f58:	e79f      	b.n	8000e9a <__aeabi_fsub+0x24a>
 8000f5a:	0005      	movs	r5, r0
 8000f5c:	e75e      	b.n	8000e1c <__aeabi_fsub+0x1cc>
 8000f5e:	464b      	mov	r3, r9
 8000f60:	e771      	b.n	8000e46 <__aeabi_fsub+0x1f6>
 8000f62:	2320      	movs	r3, #32
 8000f64:	4665      	mov	r5, ip
 8000f66:	4660      	mov	r0, ip
 8000f68:	40cd      	lsrs	r5, r1
 8000f6a:	1a59      	subs	r1, r3, r1
 8000f6c:	4088      	lsls	r0, r1
 8000f6e:	1e43      	subs	r3, r0, #1
 8000f70:	4198      	sbcs	r0, r3
 8000f72:	4328      	orrs	r0, r5
 8000f74:	e71c      	b.n	8000db0 <__aeabi_fsub+0x160>
 8000f76:	4663      	mov	r3, ip
 8000f78:	000c      	movs	r4, r1
 8000f7a:	2501      	movs	r5, #1
 8000f7c:	1af0      	subs	r0, r6, r3
 8000f7e:	e691      	b.n	8000ca4 <__aeabi_fsub+0x54>
 8000f80:	2e00      	cmp	r6, #0
 8000f82:	d095      	beq.n	8000eb0 <__aeabi_fsub+0x260>
 8000f84:	000c      	movs	r4, r1
 8000f86:	464f      	mov	r7, r9
 8000f88:	2200      	movs	r2, #0
 8000f8a:	e6ac      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000f8c:	464b      	mov	r3, r9
 8000f8e:	000d      	movs	r5, r1
 8000f90:	e744      	b.n	8000e1c <__aeabi_fsub+0x1cc>
 8000f92:	464f      	mov	r7, r9
 8000f94:	2200      	movs	r2, #0
 8000f96:	e6a6      	b.n	8000ce6 <__aeabi_fsub+0x96>
 8000f98:	fbffffff 	.word	0xfbffffff
 8000f9c:	7dffffff 	.word	0x7dffffff
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_fsub+0x356>
 8000fa4:	e736      	b.n	8000e14 <__aeabi_fsub+0x1c4>
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	2700      	movs	r7, #0
 8000faa:	e69c      	b.n	8000ce6 <__aeabi_fsub+0x96>

08000fac <__aeabi_fcmpun>:
 8000fac:	0243      	lsls	r3, r0, #9
 8000fae:	024a      	lsls	r2, r1, #9
 8000fb0:	0040      	lsls	r0, r0, #1
 8000fb2:	0049      	lsls	r1, r1, #1
 8000fb4:	0a5b      	lsrs	r3, r3, #9
 8000fb6:	0a52      	lsrs	r2, r2, #9
 8000fb8:	0e09      	lsrs	r1, r1, #24
 8000fba:	0e00      	lsrs	r0, r0, #24
 8000fbc:	28ff      	cmp	r0, #255	; 0xff
 8000fbe:	d006      	beq.n	8000fce <__aeabi_fcmpun+0x22>
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	29ff      	cmp	r1, #255	; 0xff
 8000fc4:	d102      	bne.n	8000fcc <__aeabi_fcmpun+0x20>
 8000fc6:	1e53      	subs	r3, r2, #1
 8000fc8:	419a      	sbcs	r2, r3
 8000fca:	0010      	movs	r0, r2
 8000fcc:	4770      	bx	lr
 8000fce:	38fe      	subs	r0, #254	; 0xfe
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1fb      	bne.n	8000fcc <__aeabi_fcmpun+0x20>
 8000fd4:	e7f4      	b.n	8000fc0 <__aeabi_fcmpun+0x14>
 8000fd6:	46c0      	nop			; (mov r8, r8)

08000fd8 <__aeabi_f2iz>:
 8000fd8:	0241      	lsls	r1, r0, #9
 8000fda:	0042      	lsls	r2, r0, #1
 8000fdc:	0fc3      	lsrs	r3, r0, #31
 8000fde:	0a49      	lsrs	r1, r1, #9
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	0e12      	lsrs	r2, r2, #24
 8000fe4:	2a7e      	cmp	r2, #126	; 0x7e
 8000fe6:	dd03      	ble.n	8000ff0 <__aeabi_f2iz+0x18>
 8000fe8:	2a9d      	cmp	r2, #157	; 0x9d
 8000fea:	dd02      	ble.n	8000ff2 <__aeabi_f2iz+0x1a>
 8000fec:	4a09      	ldr	r2, [pc, #36]	; (8001014 <__aeabi_f2iz+0x3c>)
 8000fee:	1898      	adds	r0, r3, r2
 8000ff0:	4770      	bx	lr
 8000ff2:	2080      	movs	r0, #128	; 0x80
 8000ff4:	0400      	lsls	r0, r0, #16
 8000ff6:	4301      	orrs	r1, r0
 8000ff8:	2a95      	cmp	r2, #149	; 0x95
 8000ffa:	dc07      	bgt.n	800100c <__aeabi_f2iz+0x34>
 8000ffc:	2096      	movs	r0, #150	; 0x96
 8000ffe:	1a82      	subs	r2, r0, r2
 8001000:	40d1      	lsrs	r1, r2
 8001002:	4248      	negs	r0, r1
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1f3      	bne.n	8000ff0 <__aeabi_f2iz+0x18>
 8001008:	0008      	movs	r0, r1
 800100a:	e7f1      	b.n	8000ff0 <__aeabi_f2iz+0x18>
 800100c:	3a96      	subs	r2, #150	; 0x96
 800100e:	4091      	lsls	r1, r2
 8001010:	e7f7      	b.n	8001002 <__aeabi_f2iz+0x2a>
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	7fffffff 	.word	0x7fffffff

08001018 <__aeabi_i2f>:
 8001018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101a:	2800      	cmp	r0, #0
 800101c:	d013      	beq.n	8001046 <__aeabi_i2f+0x2e>
 800101e:	17c3      	asrs	r3, r0, #31
 8001020:	18c6      	adds	r6, r0, r3
 8001022:	405e      	eors	r6, r3
 8001024:	0fc4      	lsrs	r4, r0, #31
 8001026:	0030      	movs	r0, r6
 8001028:	f001 fa78 	bl	800251c <__clzsi2>
 800102c:	239e      	movs	r3, #158	; 0x9e
 800102e:	0005      	movs	r5, r0
 8001030:	1a1b      	subs	r3, r3, r0
 8001032:	2b96      	cmp	r3, #150	; 0x96
 8001034:	dc0f      	bgt.n	8001056 <__aeabi_i2f+0x3e>
 8001036:	2808      	cmp	r0, #8
 8001038:	dd01      	ble.n	800103e <__aeabi_i2f+0x26>
 800103a:	3d08      	subs	r5, #8
 800103c:	40ae      	lsls	r6, r5
 800103e:	0276      	lsls	r6, r6, #9
 8001040:	0a76      	lsrs	r6, r6, #9
 8001042:	b2d8      	uxtb	r0, r3
 8001044:	e002      	b.n	800104c <__aeabi_i2f+0x34>
 8001046:	2400      	movs	r4, #0
 8001048:	2000      	movs	r0, #0
 800104a:	2600      	movs	r6, #0
 800104c:	05c0      	lsls	r0, r0, #23
 800104e:	4330      	orrs	r0, r6
 8001050:	07e4      	lsls	r4, r4, #31
 8001052:	4320      	orrs	r0, r4
 8001054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001056:	2b99      	cmp	r3, #153	; 0x99
 8001058:	dd0c      	ble.n	8001074 <__aeabi_i2f+0x5c>
 800105a:	2205      	movs	r2, #5
 800105c:	0031      	movs	r1, r6
 800105e:	1a12      	subs	r2, r2, r0
 8001060:	40d1      	lsrs	r1, r2
 8001062:	000a      	movs	r2, r1
 8001064:	0001      	movs	r1, r0
 8001066:	0030      	movs	r0, r6
 8001068:	311b      	adds	r1, #27
 800106a:	4088      	lsls	r0, r1
 800106c:	1e41      	subs	r1, r0, #1
 800106e:	4188      	sbcs	r0, r1
 8001070:	4302      	orrs	r2, r0
 8001072:	0016      	movs	r6, r2
 8001074:	2d05      	cmp	r5, #5
 8001076:	dc12      	bgt.n	800109e <__aeabi_i2f+0x86>
 8001078:	0031      	movs	r1, r6
 800107a:	4f0d      	ldr	r7, [pc, #52]	; (80010b0 <__aeabi_i2f+0x98>)
 800107c:	4039      	ands	r1, r7
 800107e:	0772      	lsls	r2, r6, #29
 8001080:	d009      	beq.n	8001096 <__aeabi_i2f+0x7e>
 8001082:	200f      	movs	r0, #15
 8001084:	4030      	ands	r0, r6
 8001086:	2804      	cmp	r0, #4
 8001088:	d005      	beq.n	8001096 <__aeabi_i2f+0x7e>
 800108a:	3104      	adds	r1, #4
 800108c:	014a      	lsls	r2, r1, #5
 800108e:	d502      	bpl.n	8001096 <__aeabi_i2f+0x7e>
 8001090:	239f      	movs	r3, #159	; 0x9f
 8001092:	4039      	ands	r1, r7
 8001094:	1b5b      	subs	r3, r3, r5
 8001096:	0189      	lsls	r1, r1, #6
 8001098:	0a4e      	lsrs	r6, r1, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7d6      	b.n	800104c <__aeabi_i2f+0x34>
 800109e:	1f6a      	subs	r2, r5, #5
 80010a0:	4096      	lsls	r6, r2
 80010a2:	0031      	movs	r1, r6
 80010a4:	4f02      	ldr	r7, [pc, #8]	; (80010b0 <__aeabi_i2f+0x98>)
 80010a6:	4039      	ands	r1, r7
 80010a8:	0772      	lsls	r2, r6, #29
 80010aa:	d0f4      	beq.n	8001096 <__aeabi_i2f+0x7e>
 80010ac:	e7e9      	b.n	8001082 <__aeabi_i2f+0x6a>
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	fbffffff 	.word	0xfbffffff

080010b4 <__aeabi_ui2f>:
 80010b4:	b570      	push	{r4, r5, r6, lr}
 80010b6:	1e05      	subs	r5, r0, #0
 80010b8:	d00e      	beq.n	80010d8 <__aeabi_ui2f+0x24>
 80010ba:	f001 fa2f 	bl	800251c <__clzsi2>
 80010be:	239e      	movs	r3, #158	; 0x9e
 80010c0:	0004      	movs	r4, r0
 80010c2:	1a1b      	subs	r3, r3, r0
 80010c4:	2b96      	cmp	r3, #150	; 0x96
 80010c6:	dc0c      	bgt.n	80010e2 <__aeabi_ui2f+0x2e>
 80010c8:	2808      	cmp	r0, #8
 80010ca:	dd01      	ble.n	80010d0 <__aeabi_ui2f+0x1c>
 80010cc:	3c08      	subs	r4, #8
 80010ce:	40a5      	lsls	r5, r4
 80010d0:	026d      	lsls	r5, r5, #9
 80010d2:	0a6d      	lsrs	r5, r5, #9
 80010d4:	b2d8      	uxtb	r0, r3
 80010d6:	e001      	b.n	80010dc <__aeabi_ui2f+0x28>
 80010d8:	2000      	movs	r0, #0
 80010da:	2500      	movs	r5, #0
 80010dc:	05c0      	lsls	r0, r0, #23
 80010de:	4328      	orrs	r0, r5
 80010e0:	bd70      	pop	{r4, r5, r6, pc}
 80010e2:	2b99      	cmp	r3, #153	; 0x99
 80010e4:	dd09      	ble.n	80010fa <__aeabi_ui2f+0x46>
 80010e6:	0002      	movs	r2, r0
 80010e8:	0029      	movs	r1, r5
 80010ea:	321b      	adds	r2, #27
 80010ec:	4091      	lsls	r1, r2
 80010ee:	1e4a      	subs	r2, r1, #1
 80010f0:	4191      	sbcs	r1, r2
 80010f2:	2205      	movs	r2, #5
 80010f4:	1a12      	subs	r2, r2, r0
 80010f6:	40d5      	lsrs	r5, r2
 80010f8:	430d      	orrs	r5, r1
 80010fa:	2c05      	cmp	r4, #5
 80010fc:	dc12      	bgt.n	8001124 <__aeabi_ui2f+0x70>
 80010fe:	0029      	movs	r1, r5
 8001100:	4e0c      	ldr	r6, [pc, #48]	; (8001134 <__aeabi_ui2f+0x80>)
 8001102:	4031      	ands	r1, r6
 8001104:	076a      	lsls	r2, r5, #29
 8001106:	d009      	beq.n	800111c <__aeabi_ui2f+0x68>
 8001108:	200f      	movs	r0, #15
 800110a:	4028      	ands	r0, r5
 800110c:	2804      	cmp	r0, #4
 800110e:	d005      	beq.n	800111c <__aeabi_ui2f+0x68>
 8001110:	3104      	adds	r1, #4
 8001112:	014a      	lsls	r2, r1, #5
 8001114:	d502      	bpl.n	800111c <__aeabi_ui2f+0x68>
 8001116:	239f      	movs	r3, #159	; 0x9f
 8001118:	4031      	ands	r1, r6
 800111a:	1b1b      	subs	r3, r3, r4
 800111c:	0189      	lsls	r1, r1, #6
 800111e:	0a4d      	lsrs	r5, r1, #9
 8001120:	b2d8      	uxtb	r0, r3
 8001122:	e7db      	b.n	80010dc <__aeabi_ui2f+0x28>
 8001124:	1f62      	subs	r2, r4, #5
 8001126:	4095      	lsls	r5, r2
 8001128:	0029      	movs	r1, r5
 800112a:	4e02      	ldr	r6, [pc, #8]	; (8001134 <__aeabi_ui2f+0x80>)
 800112c:	4031      	ands	r1, r6
 800112e:	076a      	lsls	r2, r5, #29
 8001130:	d0f4      	beq.n	800111c <__aeabi_ui2f+0x68>
 8001132:	e7e9      	b.n	8001108 <__aeabi_ui2f+0x54>
 8001134:	fbffffff 	.word	0xfbffffff

08001138 <__aeabi_dadd>:
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	464f      	mov	r7, r9
 800113c:	4646      	mov	r6, r8
 800113e:	46d6      	mov	lr, sl
 8001140:	000d      	movs	r5, r1
 8001142:	0004      	movs	r4, r0
 8001144:	b5c0      	push	{r6, r7, lr}
 8001146:	001f      	movs	r7, r3
 8001148:	0011      	movs	r1, r2
 800114a:	0328      	lsls	r0, r5, #12
 800114c:	0f62      	lsrs	r2, r4, #29
 800114e:	0a40      	lsrs	r0, r0, #9
 8001150:	4310      	orrs	r0, r2
 8001152:	007a      	lsls	r2, r7, #1
 8001154:	0d52      	lsrs	r2, r2, #21
 8001156:	00e3      	lsls	r3, r4, #3
 8001158:	033c      	lsls	r4, r7, #12
 800115a:	4691      	mov	r9, r2
 800115c:	0a64      	lsrs	r4, r4, #9
 800115e:	0ffa      	lsrs	r2, r7, #31
 8001160:	0f4f      	lsrs	r7, r1, #29
 8001162:	006e      	lsls	r6, r5, #1
 8001164:	4327      	orrs	r7, r4
 8001166:	4692      	mov	sl, r2
 8001168:	46b8      	mov	r8, r7
 800116a:	0d76      	lsrs	r6, r6, #21
 800116c:	0fed      	lsrs	r5, r5, #31
 800116e:	00c9      	lsls	r1, r1, #3
 8001170:	4295      	cmp	r5, r2
 8001172:	d100      	bne.n	8001176 <__aeabi_dadd+0x3e>
 8001174:	e099      	b.n	80012aa <__aeabi_dadd+0x172>
 8001176:	464c      	mov	r4, r9
 8001178:	1b34      	subs	r4, r6, r4
 800117a:	46a4      	mov	ip, r4
 800117c:	2c00      	cmp	r4, #0
 800117e:	dc00      	bgt.n	8001182 <__aeabi_dadd+0x4a>
 8001180:	e07c      	b.n	800127c <__aeabi_dadd+0x144>
 8001182:	464a      	mov	r2, r9
 8001184:	2a00      	cmp	r2, #0
 8001186:	d100      	bne.n	800118a <__aeabi_dadd+0x52>
 8001188:	e0b8      	b.n	80012fc <__aeabi_dadd+0x1c4>
 800118a:	4ac5      	ldr	r2, [pc, #788]	; (80014a0 <__aeabi_dadd+0x368>)
 800118c:	4296      	cmp	r6, r2
 800118e:	d100      	bne.n	8001192 <__aeabi_dadd+0x5a>
 8001190:	e11c      	b.n	80013cc <__aeabi_dadd+0x294>
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	003c      	movs	r4, r7
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	4314      	orrs	r4, r2
 800119a:	46a0      	mov	r8, r4
 800119c:	4662      	mov	r2, ip
 800119e:	2a38      	cmp	r2, #56	; 0x38
 80011a0:	dd00      	ble.n	80011a4 <__aeabi_dadd+0x6c>
 80011a2:	e161      	b.n	8001468 <__aeabi_dadd+0x330>
 80011a4:	2a1f      	cmp	r2, #31
 80011a6:	dd00      	ble.n	80011aa <__aeabi_dadd+0x72>
 80011a8:	e1cc      	b.n	8001544 <__aeabi_dadd+0x40c>
 80011aa:	4664      	mov	r4, ip
 80011ac:	2220      	movs	r2, #32
 80011ae:	1b12      	subs	r2, r2, r4
 80011b0:	4644      	mov	r4, r8
 80011b2:	4094      	lsls	r4, r2
 80011b4:	000f      	movs	r7, r1
 80011b6:	46a1      	mov	r9, r4
 80011b8:	4664      	mov	r4, ip
 80011ba:	4091      	lsls	r1, r2
 80011bc:	40e7      	lsrs	r7, r4
 80011be:	464c      	mov	r4, r9
 80011c0:	1e4a      	subs	r2, r1, #1
 80011c2:	4191      	sbcs	r1, r2
 80011c4:	433c      	orrs	r4, r7
 80011c6:	4642      	mov	r2, r8
 80011c8:	4321      	orrs	r1, r4
 80011ca:	4664      	mov	r4, ip
 80011cc:	40e2      	lsrs	r2, r4
 80011ce:	1a80      	subs	r0, r0, r2
 80011d0:	1a5c      	subs	r4, r3, r1
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	419b      	sbcs	r3, r3
 80011d6:	425f      	negs	r7, r3
 80011d8:	1bc7      	subs	r7, r0, r7
 80011da:	023b      	lsls	r3, r7, #8
 80011dc:	d400      	bmi.n	80011e0 <__aeabi_dadd+0xa8>
 80011de:	e0d0      	b.n	8001382 <__aeabi_dadd+0x24a>
 80011e0:	027f      	lsls	r7, r7, #9
 80011e2:	0a7f      	lsrs	r7, r7, #9
 80011e4:	2f00      	cmp	r7, #0
 80011e6:	d100      	bne.n	80011ea <__aeabi_dadd+0xb2>
 80011e8:	e0ff      	b.n	80013ea <__aeabi_dadd+0x2b2>
 80011ea:	0038      	movs	r0, r7
 80011ec:	f001 f996 	bl	800251c <__clzsi2>
 80011f0:	0001      	movs	r1, r0
 80011f2:	3908      	subs	r1, #8
 80011f4:	2320      	movs	r3, #32
 80011f6:	0022      	movs	r2, r4
 80011f8:	1a5b      	subs	r3, r3, r1
 80011fa:	408f      	lsls	r7, r1
 80011fc:	40da      	lsrs	r2, r3
 80011fe:	408c      	lsls	r4, r1
 8001200:	4317      	orrs	r7, r2
 8001202:	42b1      	cmp	r1, r6
 8001204:	da00      	bge.n	8001208 <__aeabi_dadd+0xd0>
 8001206:	e0ff      	b.n	8001408 <__aeabi_dadd+0x2d0>
 8001208:	1b89      	subs	r1, r1, r6
 800120a:	1c4b      	adds	r3, r1, #1
 800120c:	2b1f      	cmp	r3, #31
 800120e:	dd00      	ble.n	8001212 <__aeabi_dadd+0xda>
 8001210:	e0a8      	b.n	8001364 <__aeabi_dadd+0x22c>
 8001212:	2220      	movs	r2, #32
 8001214:	0039      	movs	r1, r7
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	0020      	movs	r0, r4
 800121a:	4094      	lsls	r4, r2
 800121c:	4091      	lsls	r1, r2
 800121e:	40d8      	lsrs	r0, r3
 8001220:	1e62      	subs	r2, r4, #1
 8001222:	4194      	sbcs	r4, r2
 8001224:	40df      	lsrs	r7, r3
 8001226:	2600      	movs	r6, #0
 8001228:	4301      	orrs	r1, r0
 800122a:	430c      	orrs	r4, r1
 800122c:	0763      	lsls	r3, r4, #29
 800122e:	d009      	beq.n	8001244 <__aeabi_dadd+0x10c>
 8001230:	230f      	movs	r3, #15
 8001232:	4023      	ands	r3, r4
 8001234:	2b04      	cmp	r3, #4
 8001236:	d005      	beq.n	8001244 <__aeabi_dadd+0x10c>
 8001238:	1d23      	adds	r3, r4, #4
 800123a:	42a3      	cmp	r3, r4
 800123c:	41a4      	sbcs	r4, r4
 800123e:	4264      	negs	r4, r4
 8001240:	193f      	adds	r7, r7, r4
 8001242:	001c      	movs	r4, r3
 8001244:	023b      	lsls	r3, r7, #8
 8001246:	d400      	bmi.n	800124a <__aeabi_dadd+0x112>
 8001248:	e09e      	b.n	8001388 <__aeabi_dadd+0x250>
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <__aeabi_dadd+0x368>)
 800124c:	3601      	adds	r6, #1
 800124e:	429e      	cmp	r6, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x11c>
 8001252:	e0b7      	b.n	80013c4 <__aeabi_dadd+0x28c>
 8001254:	4a93      	ldr	r2, [pc, #588]	; (80014a4 <__aeabi_dadd+0x36c>)
 8001256:	08e4      	lsrs	r4, r4, #3
 8001258:	4017      	ands	r7, r2
 800125a:	077b      	lsls	r3, r7, #29
 800125c:	0571      	lsls	r1, r6, #21
 800125e:	027f      	lsls	r7, r7, #9
 8001260:	4323      	orrs	r3, r4
 8001262:	0b3f      	lsrs	r7, r7, #12
 8001264:	0d4a      	lsrs	r2, r1, #21
 8001266:	0512      	lsls	r2, r2, #20
 8001268:	433a      	orrs	r2, r7
 800126a:	07ed      	lsls	r5, r5, #31
 800126c:	432a      	orrs	r2, r5
 800126e:	0018      	movs	r0, r3
 8001270:	0011      	movs	r1, r2
 8001272:	bce0      	pop	{r5, r6, r7}
 8001274:	46ba      	mov	sl, r7
 8001276:	46b1      	mov	r9, r6
 8001278:	46a8      	mov	r8, r5
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127c:	2c00      	cmp	r4, #0
 800127e:	d04b      	beq.n	8001318 <__aeabi_dadd+0x1e0>
 8001280:	464c      	mov	r4, r9
 8001282:	1ba4      	subs	r4, r4, r6
 8001284:	46a4      	mov	ip, r4
 8001286:	2e00      	cmp	r6, #0
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x154>
 800128a:	e123      	b.n	80014d4 <__aeabi_dadd+0x39c>
 800128c:	0004      	movs	r4, r0
 800128e:	431c      	orrs	r4, r3
 8001290:	d100      	bne.n	8001294 <__aeabi_dadd+0x15c>
 8001292:	e1af      	b.n	80015f4 <__aeabi_dadd+0x4bc>
 8001294:	4662      	mov	r2, ip
 8001296:	1e54      	subs	r4, r2, #1
 8001298:	2a01      	cmp	r2, #1
 800129a:	d100      	bne.n	800129e <__aeabi_dadd+0x166>
 800129c:	e215      	b.n	80016ca <__aeabi_dadd+0x592>
 800129e:	4d80      	ldr	r5, [pc, #512]	; (80014a0 <__aeabi_dadd+0x368>)
 80012a0:	45ac      	cmp	ip, r5
 80012a2:	d100      	bne.n	80012a6 <__aeabi_dadd+0x16e>
 80012a4:	e1c8      	b.n	8001638 <__aeabi_dadd+0x500>
 80012a6:	46a4      	mov	ip, r4
 80012a8:	e11b      	b.n	80014e2 <__aeabi_dadd+0x3aa>
 80012aa:	464a      	mov	r2, r9
 80012ac:	1ab2      	subs	r2, r6, r2
 80012ae:	4694      	mov	ip, r2
 80012b0:	2a00      	cmp	r2, #0
 80012b2:	dc00      	bgt.n	80012b6 <__aeabi_dadd+0x17e>
 80012b4:	e0ac      	b.n	8001410 <__aeabi_dadd+0x2d8>
 80012b6:	464a      	mov	r2, r9
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d043      	beq.n	8001344 <__aeabi_dadd+0x20c>
 80012bc:	4a78      	ldr	r2, [pc, #480]	; (80014a0 <__aeabi_dadd+0x368>)
 80012be:	4296      	cmp	r6, r2
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x18c>
 80012c2:	e1af      	b.n	8001624 <__aeabi_dadd+0x4ec>
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	003c      	movs	r4, r7
 80012c8:	0412      	lsls	r2, r2, #16
 80012ca:	4314      	orrs	r4, r2
 80012cc:	46a0      	mov	r8, r4
 80012ce:	4662      	mov	r2, ip
 80012d0:	2a38      	cmp	r2, #56	; 0x38
 80012d2:	dc67      	bgt.n	80013a4 <__aeabi_dadd+0x26c>
 80012d4:	2a1f      	cmp	r2, #31
 80012d6:	dc00      	bgt.n	80012da <__aeabi_dadd+0x1a2>
 80012d8:	e15f      	b.n	800159a <__aeabi_dadd+0x462>
 80012da:	4647      	mov	r7, r8
 80012dc:	3a20      	subs	r2, #32
 80012de:	40d7      	lsrs	r7, r2
 80012e0:	4662      	mov	r2, ip
 80012e2:	2a20      	cmp	r2, #32
 80012e4:	d005      	beq.n	80012f2 <__aeabi_dadd+0x1ba>
 80012e6:	4664      	mov	r4, ip
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	1b12      	subs	r2, r2, r4
 80012ec:	4644      	mov	r4, r8
 80012ee:	4094      	lsls	r4, r2
 80012f0:	4321      	orrs	r1, r4
 80012f2:	1e4a      	subs	r2, r1, #1
 80012f4:	4191      	sbcs	r1, r2
 80012f6:	000c      	movs	r4, r1
 80012f8:	433c      	orrs	r4, r7
 80012fa:	e057      	b.n	80013ac <__aeabi_dadd+0x274>
 80012fc:	003a      	movs	r2, r7
 80012fe:	430a      	orrs	r2, r1
 8001300:	d100      	bne.n	8001304 <__aeabi_dadd+0x1cc>
 8001302:	e105      	b.n	8001510 <__aeabi_dadd+0x3d8>
 8001304:	0022      	movs	r2, r4
 8001306:	3a01      	subs	r2, #1
 8001308:	2c01      	cmp	r4, #1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x1d6>
 800130c:	e182      	b.n	8001614 <__aeabi_dadd+0x4dc>
 800130e:	4c64      	ldr	r4, [pc, #400]	; (80014a0 <__aeabi_dadd+0x368>)
 8001310:	45a4      	cmp	ip, r4
 8001312:	d05b      	beq.n	80013cc <__aeabi_dadd+0x294>
 8001314:	4694      	mov	ip, r2
 8001316:	e741      	b.n	800119c <__aeabi_dadd+0x64>
 8001318:	4c63      	ldr	r4, [pc, #396]	; (80014a8 <__aeabi_dadd+0x370>)
 800131a:	1c77      	adds	r7, r6, #1
 800131c:	4227      	tst	r7, r4
 800131e:	d000      	beq.n	8001322 <__aeabi_dadd+0x1ea>
 8001320:	e0c4      	b.n	80014ac <__aeabi_dadd+0x374>
 8001322:	0004      	movs	r4, r0
 8001324:	431c      	orrs	r4, r3
 8001326:	2e00      	cmp	r6, #0
 8001328:	d000      	beq.n	800132c <__aeabi_dadd+0x1f4>
 800132a:	e169      	b.n	8001600 <__aeabi_dadd+0x4c8>
 800132c:	2c00      	cmp	r4, #0
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0x1fa>
 8001330:	e1bf      	b.n	80016b2 <__aeabi_dadd+0x57a>
 8001332:	4644      	mov	r4, r8
 8001334:	430c      	orrs	r4, r1
 8001336:	d000      	beq.n	800133a <__aeabi_dadd+0x202>
 8001338:	e1d0      	b.n	80016dc <__aeabi_dadd+0x5a4>
 800133a:	0742      	lsls	r2, r0, #29
 800133c:	08db      	lsrs	r3, r3, #3
 800133e:	4313      	orrs	r3, r2
 8001340:	08c0      	lsrs	r0, r0, #3
 8001342:	e029      	b.n	8001398 <__aeabi_dadd+0x260>
 8001344:	003a      	movs	r2, r7
 8001346:	430a      	orrs	r2, r1
 8001348:	d100      	bne.n	800134c <__aeabi_dadd+0x214>
 800134a:	e170      	b.n	800162e <__aeabi_dadd+0x4f6>
 800134c:	4662      	mov	r2, ip
 800134e:	4664      	mov	r4, ip
 8001350:	3a01      	subs	r2, #1
 8001352:	2c01      	cmp	r4, #1
 8001354:	d100      	bne.n	8001358 <__aeabi_dadd+0x220>
 8001356:	e0e0      	b.n	800151a <__aeabi_dadd+0x3e2>
 8001358:	4c51      	ldr	r4, [pc, #324]	; (80014a0 <__aeabi_dadd+0x368>)
 800135a:	45a4      	cmp	ip, r4
 800135c:	d100      	bne.n	8001360 <__aeabi_dadd+0x228>
 800135e:	e161      	b.n	8001624 <__aeabi_dadd+0x4ec>
 8001360:	4694      	mov	ip, r2
 8001362:	e7b4      	b.n	80012ce <__aeabi_dadd+0x196>
 8001364:	003a      	movs	r2, r7
 8001366:	391f      	subs	r1, #31
 8001368:	40ca      	lsrs	r2, r1
 800136a:	0011      	movs	r1, r2
 800136c:	2b20      	cmp	r3, #32
 800136e:	d003      	beq.n	8001378 <__aeabi_dadd+0x240>
 8001370:	2240      	movs	r2, #64	; 0x40
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	409f      	lsls	r7, r3
 8001376:	433c      	orrs	r4, r7
 8001378:	1e63      	subs	r3, r4, #1
 800137a:	419c      	sbcs	r4, r3
 800137c:	2700      	movs	r7, #0
 800137e:	2600      	movs	r6, #0
 8001380:	430c      	orrs	r4, r1
 8001382:	0763      	lsls	r3, r4, #29
 8001384:	d000      	beq.n	8001388 <__aeabi_dadd+0x250>
 8001386:	e753      	b.n	8001230 <__aeabi_dadd+0xf8>
 8001388:	46b4      	mov	ip, r6
 800138a:	08e4      	lsrs	r4, r4, #3
 800138c:	077b      	lsls	r3, r7, #29
 800138e:	4323      	orrs	r3, r4
 8001390:	08f8      	lsrs	r0, r7, #3
 8001392:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <__aeabi_dadd+0x368>)
 8001394:	4594      	cmp	ip, r2
 8001396:	d01d      	beq.n	80013d4 <__aeabi_dadd+0x29c>
 8001398:	4662      	mov	r2, ip
 800139a:	0307      	lsls	r7, r0, #12
 800139c:	0552      	lsls	r2, r2, #21
 800139e:	0b3f      	lsrs	r7, r7, #12
 80013a0:	0d52      	lsrs	r2, r2, #21
 80013a2:	e760      	b.n	8001266 <__aeabi_dadd+0x12e>
 80013a4:	4644      	mov	r4, r8
 80013a6:	430c      	orrs	r4, r1
 80013a8:	1e62      	subs	r2, r4, #1
 80013aa:	4194      	sbcs	r4, r2
 80013ac:	18e4      	adds	r4, r4, r3
 80013ae:	429c      	cmp	r4, r3
 80013b0:	419b      	sbcs	r3, r3
 80013b2:	425f      	negs	r7, r3
 80013b4:	183f      	adds	r7, r7, r0
 80013b6:	023b      	lsls	r3, r7, #8
 80013b8:	d5e3      	bpl.n	8001382 <__aeabi_dadd+0x24a>
 80013ba:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <__aeabi_dadd+0x368>)
 80013bc:	3601      	adds	r6, #1
 80013be:	429e      	cmp	r6, r3
 80013c0:	d000      	beq.n	80013c4 <__aeabi_dadd+0x28c>
 80013c2:	e0b5      	b.n	8001530 <__aeabi_dadd+0x3f8>
 80013c4:	0032      	movs	r2, r6
 80013c6:	2700      	movs	r7, #0
 80013c8:	2300      	movs	r3, #0
 80013ca:	e74c      	b.n	8001266 <__aeabi_dadd+0x12e>
 80013cc:	0742      	lsls	r2, r0, #29
 80013ce:	08db      	lsrs	r3, r3, #3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	08c0      	lsrs	r0, r0, #3
 80013d4:	001a      	movs	r2, r3
 80013d6:	4302      	orrs	r2, r0
 80013d8:	d100      	bne.n	80013dc <__aeabi_dadd+0x2a4>
 80013da:	e1e1      	b.n	80017a0 <__aeabi_dadd+0x668>
 80013dc:	2780      	movs	r7, #128	; 0x80
 80013de:	033f      	lsls	r7, r7, #12
 80013e0:	4307      	orrs	r7, r0
 80013e2:	033f      	lsls	r7, r7, #12
 80013e4:	4a2e      	ldr	r2, [pc, #184]	; (80014a0 <__aeabi_dadd+0x368>)
 80013e6:	0b3f      	lsrs	r7, r7, #12
 80013e8:	e73d      	b.n	8001266 <__aeabi_dadd+0x12e>
 80013ea:	0020      	movs	r0, r4
 80013ec:	f001 f896 	bl	800251c <__clzsi2>
 80013f0:	0001      	movs	r1, r0
 80013f2:	3118      	adds	r1, #24
 80013f4:	291f      	cmp	r1, #31
 80013f6:	dc00      	bgt.n	80013fa <__aeabi_dadd+0x2c2>
 80013f8:	e6fc      	b.n	80011f4 <__aeabi_dadd+0xbc>
 80013fa:	3808      	subs	r0, #8
 80013fc:	4084      	lsls	r4, r0
 80013fe:	0027      	movs	r7, r4
 8001400:	2400      	movs	r4, #0
 8001402:	42b1      	cmp	r1, r6
 8001404:	db00      	blt.n	8001408 <__aeabi_dadd+0x2d0>
 8001406:	e6ff      	b.n	8001208 <__aeabi_dadd+0xd0>
 8001408:	4a26      	ldr	r2, [pc, #152]	; (80014a4 <__aeabi_dadd+0x36c>)
 800140a:	1a76      	subs	r6, r6, r1
 800140c:	4017      	ands	r7, r2
 800140e:	e70d      	b.n	800122c <__aeabi_dadd+0xf4>
 8001410:	2a00      	cmp	r2, #0
 8001412:	d02f      	beq.n	8001474 <__aeabi_dadd+0x33c>
 8001414:	464a      	mov	r2, r9
 8001416:	1b92      	subs	r2, r2, r6
 8001418:	4694      	mov	ip, r2
 800141a:	2e00      	cmp	r6, #0
 800141c:	d100      	bne.n	8001420 <__aeabi_dadd+0x2e8>
 800141e:	e0ad      	b.n	800157c <__aeabi_dadd+0x444>
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <__aeabi_dadd+0x368>)
 8001422:	4591      	cmp	r9, r2
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x2f0>
 8001426:	e10f      	b.n	8001648 <__aeabi_dadd+0x510>
 8001428:	2280      	movs	r2, #128	; 0x80
 800142a:	0412      	lsls	r2, r2, #16
 800142c:	4310      	orrs	r0, r2
 800142e:	4662      	mov	r2, ip
 8001430:	2a38      	cmp	r2, #56	; 0x38
 8001432:	dd00      	ble.n	8001436 <__aeabi_dadd+0x2fe>
 8001434:	e10f      	b.n	8001656 <__aeabi_dadd+0x51e>
 8001436:	2a1f      	cmp	r2, #31
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0x304>
 800143a:	e180      	b.n	800173e <__aeabi_dadd+0x606>
 800143c:	4664      	mov	r4, ip
 800143e:	2220      	movs	r2, #32
 8001440:	001e      	movs	r6, r3
 8001442:	1b12      	subs	r2, r2, r4
 8001444:	4667      	mov	r7, ip
 8001446:	0004      	movs	r4, r0
 8001448:	4093      	lsls	r3, r2
 800144a:	4094      	lsls	r4, r2
 800144c:	40fe      	lsrs	r6, r7
 800144e:	1e5a      	subs	r2, r3, #1
 8001450:	4193      	sbcs	r3, r2
 8001452:	40f8      	lsrs	r0, r7
 8001454:	4334      	orrs	r4, r6
 8001456:	431c      	orrs	r4, r3
 8001458:	4480      	add	r8, r0
 800145a:	1864      	adds	r4, r4, r1
 800145c:	428c      	cmp	r4, r1
 800145e:	41bf      	sbcs	r7, r7
 8001460:	427f      	negs	r7, r7
 8001462:	464e      	mov	r6, r9
 8001464:	4447      	add	r7, r8
 8001466:	e7a6      	b.n	80013b6 <__aeabi_dadd+0x27e>
 8001468:	4642      	mov	r2, r8
 800146a:	430a      	orrs	r2, r1
 800146c:	0011      	movs	r1, r2
 800146e:	1e4a      	subs	r2, r1, #1
 8001470:	4191      	sbcs	r1, r2
 8001472:	e6ad      	b.n	80011d0 <__aeabi_dadd+0x98>
 8001474:	4c0c      	ldr	r4, [pc, #48]	; (80014a8 <__aeabi_dadd+0x370>)
 8001476:	1c72      	adds	r2, r6, #1
 8001478:	4222      	tst	r2, r4
 800147a:	d000      	beq.n	800147e <__aeabi_dadd+0x346>
 800147c:	e0a1      	b.n	80015c2 <__aeabi_dadd+0x48a>
 800147e:	0002      	movs	r2, r0
 8001480:	431a      	orrs	r2, r3
 8001482:	2e00      	cmp	r6, #0
 8001484:	d000      	beq.n	8001488 <__aeabi_dadd+0x350>
 8001486:	e0fa      	b.n	800167e <__aeabi_dadd+0x546>
 8001488:	2a00      	cmp	r2, #0
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x356>
 800148c:	e145      	b.n	800171a <__aeabi_dadd+0x5e2>
 800148e:	003a      	movs	r2, r7
 8001490:	430a      	orrs	r2, r1
 8001492:	d000      	beq.n	8001496 <__aeabi_dadd+0x35e>
 8001494:	e146      	b.n	8001724 <__aeabi_dadd+0x5ec>
 8001496:	0742      	lsls	r2, r0, #29
 8001498:	08db      	lsrs	r3, r3, #3
 800149a:	4313      	orrs	r3, r2
 800149c:	08c0      	lsrs	r0, r0, #3
 800149e:	e77b      	b.n	8001398 <__aeabi_dadd+0x260>
 80014a0:	000007ff 	.word	0x000007ff
 80014a4:	ff7fffff 	.word	0xff7fffff
 80014a8:	000007fe 	.word	0x000007fe
 80014ac:	4647      	mov	r7, r8
 80014ae:	1a5c      	subs	r4, r3, r1
 80014b0:	1bc2      	subs	r2, r0, r7
 80014b2:	42a3      	cmp	r3, r4
 80014b4:	41bf      	sbcs	r7, r7
 80014b6:	427f      	negs	r7, r7
 80014b8:	46b9      	mov	r9, r7
 80014ba:	0017      	movs	r7, r2
 80014bc:	464a      	mov	r2, r9
 80014be:	1abf      	subs	r7, r7, r2
 80014c0:	023a      	lsls	r2, r7, #8
 80014c2:	d500      	bpl.n	80014c6 <__aeabi_dadd+0x38e>
 80014c4:	e08d      	b.n	80015e2 <__aeabi_dadd+0x4aa>
 80014c6:	0023      	movs	r3, r4
 80014c8:	433b      	orrs	r3, r7
 80014ca:	d000      	beq.n	80014ce <__aeabi_dadd+0x396>
 80014cc:	e68a      	b.n	80011e4 <__aeabi_dadd+0xac>
 80014ce:	2000      	movs	r0, #0
 80014d0:	2500      	movs	r5, #0
 80014d2:	e761      	b.n	8001398 <__aeabi_dadd+0x260>
 80014d4:	4cb4      	ldr	r4, [pc, #720]	; (80017a8 <__aeabi_dadd+0x670>)
 80014d6:	45a1      	cmp	r9, r4
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x3a4>
 80014da:	e0ad      	b.n	8001638 <__aeabi_dadd+0x500>
 80014dc:	2480      	movs	r4, #128	; 0x80
 80014de:	0424      	lsls	r4, r4, #16
 80014e0:	4320      	orrs	r0, r4
 80014e2:	4664      	mov	r4, ip
 80014e4:	2c38      	cmp	r4, #56	; 0x38
 80014e6:	dc3d      	bgt.n	8001564 <__aeabi_dadd+0x42c>
 80014e8:	4662      	mov	r2, ip
 80014ea:	2c1f      	cmp	r4, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x3b8>
 80014ee:	e0b7      	b.n	8001660 <__aeabi_dadd+0x528>
 80014f0:	2520      	movs	r5, #32
 80014f2:	001e      	movs	r6, r3
 80014f4:	1b2d      	subs	r5, r5, r4
 80014f6:	0004      	movs	r4, r0
 80014f8:	40ab      	lsls	r3, r5
 80014fa:	40ac      	lsls	r4, r5
 80014fc:	40d6      	lsrs	r6, r2
 80014fe:	40d0      	lsrs	r0, r2
 8001500:	4642      	mov	r2, r8
 8001502:	1e5d      	subs	r5, r3, #1
 8001504:	41ab      	sbcs	r3, r5
 8001506:	4334      	orrs	r4, r6
 8001508:	1a12      	subs	r2, r2, r0
 800150a:	4690      	mov	r8, r2
 800150c:	4323      	orrs	r3, r4
 800150e:	e02c      	b.n	800156a <__aeabi_dadd+0x432>
 8001510:	0742      	lsls	r2, r0, #29
 8001512:	08db      	lsrs	r3, r3, #3
 8001514:	4313      	orrs	r3, r2
 8001516:	08c0      	lsrs	r0, r0, #3
 8001518:	e73b      	b.n	8001392 <__aeabi_dadd+0x25a>
 800151a:	185c      	adds	r4, r3, r1
 800151c:	429c      	cmp	r4, r3
 800151e:	419b      	sbcs	r3, r3
 8001520:	4440      	add	r0, r8
 8001522:	425b      	negs	r3, r3
 8001524:	18c7      	adds	r7, r0, r3
 8001526:	2601      	movs	r6, #1
 8001528:	023b      	lsls	r3, r7, #8
 800152a:	d400      	bmi.n	800152e <__aeabi_dadd+0x3f6>
 800152c:	e729      	b.n	8001382 <__aeabi_dadd+0x24a>
 800152e:	2602      	movs	r6, #2
 8001530:	4a9e      	ldr	r2, [pc, #632]	; (80017ac <__aeabi_dadd+0x674>)
 8001532:	0863      	lsrs	r3, r4, #1
 8001534:	4017      	ands	r7, r2
 8001536:	2201      	movs	r2, #1
 8001538:	4014      	ands	r4, r2
 800153a:	431c      	orrs	r4, r3
 800153c:	07fb      	lsls	r3, r7, #31
 800153e:	431c      	orrs	r4, r3
 8001540:	087f      	lsrs	r7, r7, #1
 8001542:	e673      	b.n	800122c <__aeabi_dadd+0xf4>
 8001544:	4644      	mov	r4, r8
 8001546:	3a20      	subs	r2, #32
 8001548:	40d4      	lsrs	r4, r2
 800154a:	4662      	mov	r2, ip
 800154c:	2a20      	cmp	r2, #32
 800154e:	d005      	beq.n	800155c <__aeabi_dadd+0x424>
 8001550:	4667      	mov	r7, ip
 8001552:	2240      	movs	r2, #64	; 0x40
 8001554:	1bd2      	subs	r2, r2, r7
 8001556:	4647      	mov	r7, r8
 8001558:	4097      	lsls	r7, r2
 800155a:	4339      	orrs	r1, r7
 800155c:	1e4a      	subs	r2, r1, #1
 800155e:	4191      	sbcs	r1, r2
 8001560:	4321      	orrs	r1, r4
 8001562:	e635      	b.n	80011d0 <__aeabi_dadd+0x98>
 8001564:	4303      	orrs	r3, r0
 8001566:	1e58      	subs	r0, r3, #1
 8001568:	4183      	sbcs	r3, r0
 800156a:	1acc      	subs	r4, r1, r3
 800156c:	42a1      	cmp	r1, r4
 800156e:	41bf      	sbcs	r7, r7
 8001570:	4643      	mov	r3, r8
 8001572:	427f      	negs	r7, r7
 8001574:	4655      	mov	r5, sl
 8001576:	464e      	mov	r6, r9
 8001578:	1bdf      	subs	r7, r3, r7
 800157a:	e62e      	b.n	80011da <__aeabi_dadd+0xa2>
 800157c:	0002      	movs	r2, r0
 800157e:	431a      	orrs	r2, r3
 8001580:	d100      	bne.n	8001584 <__aeabi_dadd+0x44c>
 8001582:	e0bd      	b.n	8001700 <__aeabi_dadd+0x5c8>
 8001584:	4662      	mov	r2, ip
 8001586:	4664      	mov	r4, ip
 8001588:	3a01      	subs	r2, #1
 800158a:	2c01      	cmp	r4, #1
 800158c:	d100      	bne.n	8001590 <__aeabi_dadd+0x458>
 800158e:	e0e5      	b.n	800175c <__aeabi_dadd+0x624>
 8001590:	4c85      	ldr	r4, [pc, #532]	; (80017a8 <__aeabi_dadd+0x670>)
 8001592:	45a4      	cmp	ip, r4
 8001594:	d058      	beq.n	8001648 <__aeabi_dadd+0x510>
 8001596:	4694      	mov	ip, r2
 8001598:	e749      	b.n	800142e <__aeabi_dadd+0x2f6>
 800159a:	4664      	mov	r4, ip
 800159c:	2220      	movs	r2, #32
 800159e:	1b12      	subs	r2, r2, r4
 80015a0:	4644      	mov	r4, r8
 80015a2:	4094      	lsls	r4, r2
 80015a4:	000f      	movs	r7, r1
 80015a6:	46a1      	mov	r9, r4
 80015a8:	4664      	mov	r4, ip
 80015aa:	4091      	lsls	r1, r2
 80015ac:	40e7      	lsrs	r7, r4
 80015ae:	464c      	mov	r4, r9
 80015b0:	1e4a      	subs	r2, r1, #1
 80015b2:	4191      	sbcs	r1, r2
 80015b4:	433c      	orrs	r4, r7
 80015b6:	4642      	mov	r2, r8
 80015b8:	430c      	orrs	r4, r1
 80015ba:	4661      	mov	r1, ip
 80015bc:	40ca      	lsrs	r2, r1
 80015be:	1880      	adds	r0, r0, r2
 80015c0:	e6f4      	b.n	80013ac <__aeabi_dadd+0x274>
 80015c2:	4c79      	ldr	r4, [pc, #484]	; (80017a8 <__aeabi_dadd+0x670>)
 80015c4:	42a2      	cmp	r2, r4
 80015c6:	d100      	bne.n	80015ca <__aeabi_dadd+0x492>
 80015c8:	e6fd      	b.n	80013c6 <__aeabi_dadd+0x28e>
 80015ca:	1859      	adds	r1, r3, r1
 80015cc:	4299      	cmp	r1, r3
 80015ce:	419b      	sbcs	r3, r3
 80015d0:	4440      	add	r0, r8
 80015d2:	425f      	negs	r7, r3
 80015d4:	19c7      	adds	r7, r0, r7
 80015d6:	07fc      	lsls	r4, r7, #31
 80015d8:	0849      	lsrs	r1, r1, #1
 80015da:	0016      	movs	r6, r2
 80015dc:	430c      	orrs	r4, r1
 80015de:	087f      	lsrs	r7, r7, #1
 80015e0:	e6cf      	b.n	8001382 <__aeabi_dadd+0x24a>
 80015e2:	1acc      	subs	r4, r1, r3
 80015e4:	42a1      	cmp	r1, r4
 80015e6:	41bf      	sbcs	r7, r7
 80015e8:	4643      	mov	r3, r8
 80015ea:	427f      	negs	r7, r7
 80015ec:	1a18      	subs	r0, r3, r0
 80015ee:	4655      	mov	r5, sl
 80015f0:	1bc7      	subs	r7, r0, r7
 80015f2:	e5f7      	b.n	80011e4 <__aeabi_dadd+0xac>
 80015f4:	08c9      	lsrs	r1, r1, #3
 80015f6:	077b      	lsls	r3, r7, #29
 80015f8:	4655      	mov	r5, sl
 80015fa:	430b      	orrs	r3, r1
 80015fc:	08f8      	lsrs	r0, r7, #3
 80015fe:	e6c8      	b.n	8001392 <__aeabi_dadd+0x25a>
 8001600:	2c00      	cmp	r4, #0
 8001602:	d000      	beq.n	8001606 <__aeabi_dadd+0x4ce>
 8001604:	e081      	b.n	800170a <__aeabi_dadd+0x5d2>
 8001606:	4643      	mov	r3, r8
 8001608:	430b      	orrs	r3, r1
 800160a:	d115      	bne.n	8001638 <__aeabi_dadd+0x500>
 800160c:	2080      	movs	r0, #128	; 0x80
 800160e:	2500      	movs	r5, #0
 8001610:	0300      	lsls	r0, r0, #12
 8001612:	e6e3      	b.n	80013dc <__aeabi_dadd+0x2a4>
 8001614:	1a5c      	subs	r4, r3, r1
 8001616:	42a3      	cmp	r3, r4
 8001618:	419b      	sbcs	r3, r3
 800161a:	1bc7      	subs	r7, r0, r7
 800161c:	425b      	negs	r3, r3
 800161e:	2601      	movs	r6, #1
 8001620:	1aff      	subs	r7, r7, r3
 8001622:	e5da      	b.n	80011da <__aeabi_dadd+0xa2>
 8001624:	0742      	lsls	r2, r0, #29
 8001626:	08db      	lsrs	r3, r3, #3
 8001628:	4313      	orrs	r3, r2
 800162a:	08c0      	lsrs	r0, r0, #3
 800162c:	e6d2      	b.n	80013d4 <__aeabi_dadd+0x29c>
 800162e:	0742      	lsls	r2, r0, #29
 8001630:	08db      	lsrs	r3, r3, #3
 8001632:	4313      	orrs	r3, r2
 8001634:	08c0      	lsrs	r0, r0, #3
 8001636:	e6ac      	b.n	8001392 <__aeabi_dadd+0x25a>
 8001638:	4643      	mov	r3, r8
 800163a:	4642      	mov	r2, r8
 800163c:	08c9      	lsrs	r1, r1, #3
 800163e:	075b      	lsls	r3, r3, #29
 8001640:	4655      	mov	r5, sl
 8001642:	430b      	orrs	r3, r1
 8001644:	08d0      	lsrs	r0, r2, #3
 8001646:	e6c5      	b.n	80013d4 <__aeabi_dadd+0x29c>
 8001648:	4643      	mov	r3, r8
 800164a:	4642      	mov	r2, r8
 800164c:	075b      	lsls	r3, r3, #29
 800164e:	08c9      	lsrs	r1, r1, #3
 8001650:	430b      	orrs	r3, r1
 8001652:	08d0      	lsrs	r0, r2, #3
 8001654:	e6be      	b.n	80013d4 <__aeabi_dadd+0x29c>
 8001656:	4303      	orrs	r3, r0
 8001658:	001c      	movs	r4, r3
 800165a:	1e63      	subs	r3, r4, #1
 800165c:	419c      	sbcs	r4, r3
 800165e:	e6fc      	b.n	800145a <__aeabi_dadd+0x322>
 8001660:	0002      	movs	r2, r0
 8001662:	3c20      	subs	r4, #32
 8001664:	40e2      	lsrs	r2, r4
 8001666:	0014      	movs	r4, r2
 8001668:	4662      	mov	r2, ip
 800166a:	2a20      	cmp	r2, #32
 800166c:	d003      	beq.n	8001676 <__aeabi_dadd+0x53e>
 800166e:	2540      	movs	r5, #64	; 0x40
 8001670:	1aad      	subs	r5, r5, r2
 8001672:	40a8      	lsls	r0, r5
 8001674:	4303      	orrs	r3, r0
 8001676:	1e58      	subs	r0, r3, #1
 8001678:	4183      	sbcs	r3, r0
 800167a:	4323      	orrs	r3, r4
 800167c:	e775      	b.n	800156a <__aeabi_dadd+0x432>
 800167e:	2a00      	cmp	r2, #0
 8001680:	d0e2      	beq.n	8001648 <__aeabi_dadd+0x510>
 8001682:	003a      	movs	r2, r7
 8001684:	430a      	orrs	r2, r1
 8001686:	d0cd      	beq.n	8001624 <__aeabi_dadd+0x4ec>
 8001688:	0742      	lsls	r2, r0, #29
 800168a:	08db      	lsrs	r3, r3, #3
 800168c:	4313      	orrs	r3, r2
 800168e:	2280      	movs	r2, #128	; 0x80
 8001690:	08c0      	lsrs	r0, r0, #3
 8001692:	0312      	lsls	r2, r2, #12
 8001694:	4210      	tst	r0, r2
 8001696:	d006      	beq.n	80016a6 <__aeabi_dadd+0x56e>
 8001698:	08fc      	lsrs	r4, r7, #3
 800169a:	4214      	tst	r4, r2
 800169c:	d103      	bne.n	80016a6 <__aeabi_dadd+0x56e>
 800169e:	0020      	movs	r0, r4
 80016a0:	08cb      	lsrs	r3, r1, #3
 80016a2:	077a      	lsls	r2, r7, #29
 80016a4:	4313      	orrs	r3, r2
 80016a6:	0f5a      	lsrs	r2, r3, #29
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	0752      	lsls	r2, r2, #29
 80016ac:	08db      	lsrs	r3, r3, #3
 80016ae:	4313      	orrs	r3, r2
 80016b0:	e690      	b.n	80013d4 <__aeabi_dadd+0x29c>
 80016b2:	4643      	mov	r3, r8
 80016b4:	430b      	orrs	r3, r1
 80016b6:	d100      	bne.n	80016ba <__aeabi_dadd+0x582>
 80016b8:	e709      	b.n	80014ce <__aeabi_dadd+0x396>
 80016ba:	4643      	mov	r3, r8
 80016bc:	4642      	mov	r2, r8
 80016be:	08c9      	lsrs	r1, r1, #3
 80016c0:	075b      	lsls	r3, r3, #29
 80016c2:	4655      	mov	r5, sl
 80016c4:	430b      	orrs	r3, r1
 80016c6:	08d0      	lsrs	r0, r2, #3
 80016c8:	e666      	b.n	8001398 <__aeabi_dadd+0x260>
 80016ca:	1acc      	subs	r4, r1, r3
 80016cc:	42a1      	cmp	r1, r4
 80016ce:	4189      	sbcs	r1, r1
 80016d0:	1a3f      	subs	r7, r7, r0
 80016d2:	4249      	negs	r1, r1
 80016d4:	4655      	mov	r5, sl
 80016d6:	2601      	movs	r6, #1
 80016d8:	1a7f      	subs	r7, r7, r1
 80016da:	e57e      	b.n	80011da <__aeabi_dadd+0xa2>
 80016dc:	4642      	mov	r2, r8
 80016de:	1a5c      	subs	r4, r3, r1
 80016e0:	1a87      	subs	r7, r0, r2
 80016e2:	42a3      	cmp	r3, r4
 80016e4:	4192      	sbcs	r2, r2
 80016e6:	4252      	negs	r2, r2
 80016e8:	1abf      	subs	r7, r7, r2
 80016ea:	023a      	lsls	r2, r7, #8
 80016ec:	d53d      	bpl.n	800176a <__aeabi_dadd+0x632>
 80016ee:	1acc      	subs	r4, r1, r3
 80016f0:	42a1      	cmp	r1, r4
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	4643      	mov	r3, r8
 80016f6:	4249      	negs	r1, r1
 80016f8:	1a1f      	subs	r7, r3, r0
 80016fa:	4655      	mov	r5, sl
 80016fc:	1a7f      	subs	r7, r7, r1
 80016fe:	e595      	b.n	800122c <__aeabi_dadd+0xf4>
 8001700:	077b      	lsls	r3, r7, #29
 8001702:	08c9      	lsrs	r1, r1, #3
 8001704:	430b      	orrs	r3, r1
 8001706:	08f8      	lsrs	r0, r7, #3
 8001708:	e643      	b.n	8001392 <__aeabi_dadd+0x25a>
 800170a:	4644      	mov	r4, r8
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	430c      	orrs	r4, r1
 8001710:	d130      	bne.n	8001774 <__aeabi_dadd+0x63c>
 8001712:	0742      	lsls	r2, r0, #29
 8001714:	4313      	orrs	r3, r2
 8001716:	08c0      	lsrs	r0, r0, #3
 8001718:	e65c      	b.n	80013d4 <__aeabi_dadd+0x29c>
 800171a:	077b      	lsls	r3, r7, #29
 800171c:	08c9      	lsrs	r1, r1, #3
 800171e:	430b      	orrs	r3, r1
 8001720:	08f8      	lsrs	r0, r7, #3
 8001722:	e639      	b.n	8001398 <__aeabi_dadd+0x260>
 8001724:	185c      	adds	r4, r3, r1
 8001726:	429c      	cmp	r4, r3
 8001728:	419b      	sbcs	r3, r3
 800172a:	4440      	add	r0, r8
 800172c:	425b      	negs	r3, r3
 800172e:	18c7      	adds	r7, r0, r3
 8001730:	023b      	lsls	r3, r7, #8
 8001732:	d400      	bmi.n	8001736 <__aeabi_dadd+0x5fe>
 8001734:	e625      	b.n	8001382 <__aeabi_dadd+0x24a>
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <__aeabi_dadd+0x674>)
 8001738:	2601      	movs	r6, #1
 800173a:	401f      	ands	r7, r3
 800173c:	e621      	b.n	8001382 <__aeabi_dadd+0x24a>
 800173e:	0004      	movs	r4, r0
 8001740:	3a20      	subs	r2, #32
 8001742:	40d4      	lsrs	r4, r2
 8001744:	4662      	mov	r2, ip
 8001746:	2a20      	cmp	r2, #32
 8001748:	d004      	beq.n	8001754 <__aeabi_dadd+0x61c>
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	4666      	mov	r6, ip
 800174e:	1b92      	subs	r2, r2, r6
 8001750:	4090      	lsls	r0, r2
 8001752:	4303      	orrs	r3, r0
 8001754:	1e5a      	subs	r2, r3, #1
 8001756:	4193      	sbcs	r3, r2
 8001758:	431c      	orrs	r4, r3
 800175a:	e67e      	b.n	800145a <__aeabi_dadd+0x322>
 800175c:	185c      	adds	r4, r3, r1
 800175e:	428c      	cmp	r4, r1
 8001760:	4189      	sbcs	r1, r1
 8001762:	4440      	add	r0, r8
 8001764:	4249      	negs	r1, r1
 8001766:	1847      	adds	r7, r0, r1
 8001768:	e6dd      	b.n	8001526 <__aeabi_dadd+0x3ee>
 800176a:	0023      	movs	r3, r4
 800176c:	433b      	orrs	r3, r7
 800176e:	d100      	bne.n	8001772 <__aeabi_dadd+0x63a>
 8001770:	e6ad      	b.n	80014ce <__aeabi_dadd+0x396>
 8001772:	e606      	b.n	8001382 <__aeabi_dadd+0x24a>
 8001774:	0744      	lsls	r4, r0, #29
 8001776:	4323      	orrs	r3, r4
 8001778:	2480      	movs	r4, #128	; 0x80
 800177a:	08c0      	lsrs	r0, r0, #3
 800177c:	0324      	lsls	r4, r4, #12
 800177e:	4220      	tst	r0, r4
 8001780:	d008      	beq.n	8001794 <__aeabi_dadd+0x65c>
 8001782:	4642      	mov	r2, r8
 8001784:	08d6      	lsrs	r6, r2, #3
 8001786:	4226      	tst	r6, r4
 8001788:	d104      	bne.n	8001794 <__aeabi_dadd+0x65c>
 800178a:	4655      	mov	r5, sl
 800178c:	0030      	movs	r0, r6
 800178e:	08cb      	lsrs	r3, r1, #3
 8001790:	0751      	lsls	r1, r2, #29
 8001792:	430b      	orrs	r3, r1
 8001794:	0f5a      	lsrs	r2, r3, #29
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	08db      	lsrs	r3, r3, #3
 800179a:	0752      	lsls	r2, r2, #29
 800179c:	4313      	orrs	r3, r2
 800179e:	e619      	b.n	80013d4 <__aeabi_dadd+0x29c>
 80017a0:	2300      	movs	r3, #0
 80017a2:	4a01      	ldr	r2, [pc, #4]	; (80017a8 <__aeabi_dadd+0x670>)
 80017a4:	001f      	movs	r7, r3
 80017a6:	e55e      	b.n	8001266 <__aeabi_dadd+0x12e>
 80017a8:	000007ff 	.word	0x000007ff
 80017ac:	ff7fffff 	.word	0xff7fffff

080017b0 <__aeabi_dmul>:
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017b2:	4657      	mov	r7, sl
 80017b4:	464e      	mov	r6, r9
 80017b6:	4645      	mov	r5, r8
 80017b8:	46de      	mov	lr, fp
 80017ba:	b5e0      	push	{r5, r6, r7, lr}
 80017bc:	4698      	mov	r8, r3
 80017be:	030c      	lsls	r4, r1, #12
 80017c0:	004b      	lsls	r3, r1, #1
 80017c2:	0006      	movs	r6, r0
 80017c4:	4692      	mov	sl, r2
 80017c6:	b087      	sub	sp, #28
 80017c8:	0b24      	lsrs	r4, r4, #12
 80017ca:	0d5b      	lsrs	r3, r3, #21
 80017cc:	0fcf      	lsrs	r7, r1, #31
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d100      	bne.n	80017d4 <__aeabi_dmul+0x24>
 80017d2:	e15c      	b.n	8001a8e <__aeabi_dmul+0x2de>
 80017d4:	4ad9      	ldr	r2, [pc, #868]	; (8001b3c <__aeabi_dmul+0x38c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d100      	bne.n	80017dc <__aeabi_dmul+0x2c>
 80017da:	e175      	b.n	8001ac8 <__aeabi_dmul+0x318>
 80017dc:	0f42      	lsrs	r2, r0, #29
 80017de:	00e4      	lsls	r4, r4, #3
 80017e0:	4314      	orrs	r4, r2
 80017e2:	2280      	movs	r2, #128	; 0x80
 80017e4:	0412      	lsls	r2, r2, #16
 80017e6:	4314      	orrs	r4, r2
 80017e8:	4ad5      	ldr	r2, [pc, #852]	; (8001b40 <__aeabi_dmul+0x390>)
 80017ea:	00c5      	lsls	r5, r0, #3
 80017ec:	4694      	mov	ip, r2
 80017ee:	4463      	add	r3, ip
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2300      	movs	r3, #0
 80017f4:	4699      	mov	r9, r3
 80017f6:	469b      	mov	fp, r3
 80017f8:	4643      	mov	r3, r8
 80017fa:	4642      	mov	r2, r8
 80017fc:	031e      	lsls	r6, r3, #12
 80017fe:	0fd2      	lsrs	r2, r2, #31
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4650      	mov	r0, sl
 8001804:	4690      	mov	r8, r2
 8001806:	0b36      	lsrs	r6, r6, #12
 8001808:	0d5b      	lsrs	r3, r3, #21
 800180a:	d100      	bne.n	800180e <__aeabi_dmul+0x5e>
 800180c:	e120      	b.n	8001a50 <__aeabi_dmul+0x2a0>
 800180e:	4acb      	ldr	r2, [pc, #812]	; (8001b3c <__aeabi_dmul+0x38c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d100      	bne.n	8001816 <__aeabi_dmul+0x66>
 8001814:	e162      	b.n	8001adc <__aeabi_dmul+0x32c>
 8001816:	49ca      	ldr	r1, [pc, #808]	; (8001b40 <__aeabi_dmul+0x390>)
 8001818:	0f42      	lsrs	r2, r0, #29
 800181a:	468c      	mov	ip, r1
 800181c:	9900      	ldr	r1, [sp, #0]
 800181e:	4463      	add	r3, ip
 8001820:	00f6      	lsls	r6, r6, #3
 8001822:	468c      	mov	ip, r1
 8001824:	4316      	orrs	r6, r2
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	449c      	add	ip, r3
 800182a:	0412      	lsls	r2, r2, #16
 800182c:	4663      	mov	r3, ip
 800182e:	4316      	orrs	r6, r2
 8001830:	00c2      	lsls	r2, r0, #3
 8001832:	2000      	movs	r0, #0
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	9900      	ldr	r1, [sp, #0]
 8001838:	4643      	mov	r3, r8
 800183a:	3101      	adds	r1, #1
 800183c:	468c      	mov	ip, r1
 800183e:	4649      	mov	r1, r9
 8001840:	407b      	eors	r3, r7
 8001842:	9301      	str	r3, [sp, #4]
 8001844:	290f      	cmp	r1, #15
 8001846:	d826      	bhi.n	8001896 <__aeabi_dmul+0xe6>
 8001848:	4bbe      	ldr	r3, [pc, #760]	; (8001b44 <__aeabi_dmul+0x394>)
 800184a:	0089      	lsls	r1, r1, #2
 800184c:	5859      	ldr	r1, [r3, r1]
 800184e:	468f      	mov	pc, r1
 8001850:	4643      	mov	r3, r8
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	0034      	movs	r4, r6
 8001856:	0015      	movs	r5, r2
 8001858:	4683      	mov	fp, r0
 800185a:	465b      	mov	r3, fp
 800185c:	2b02      	cmp	r3, #2
 800185e:	d016      	beq.n	800188e <__aeabi_dmul+0xde>
 8001860:	2b03      	cmp	r3, #3
 8001862:	d100      	bne.n	8001866 <__aeabi_dmul+0xb6>
 8001864:	e203      	b.n	8001c6e <__aeabi_dmul+0x4be>
 8001866:	2b01      	cmp	r3, #1
 8001868:	d000      	beq.n	800186c <__aeabi_dmul+0xbc>
 800186a:	e0cd      	b.n	8001a08 <__aeabi_dmul+0x258>
 800186c:	2200      	movs	r2, #0
 800186e:	2400      	movs	r4, #0
 8001870:	2500      	movs	r5, #0
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	0512      	lsls	r2, r2, #20
 8001876:	4322      	orrs	r2, r4
 8001878:	07db      	lsls	r3, r3, #31
 800187a:	431a      	orrs	r2, r3
 800187c:	0028      	movs	r0, r5
 800187e:	0011      	movs	r1, r2
 8001880:	b007      	add	sp, #28
 8001882:	bcf0      	pop	{r4, r5, r6, r7}
 8001884:	46bb      	mov	fp, r7
 8001886:	46b2      	mov	sl, r6
 8001888:	46a9      	mov	r9, r5
 800188a:	46a0      	mov	r8, r4
 800188c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800188e:	2400      	movs	r4, #0
 8001890:	2500      	movs	r5, #0
 8001892:	4aaa      	ldr	r2, [pc, #680]	; (8001b3c <__aeabi_dmul+0x38c>)
 8001894:	e7ed      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001896:	0c28      	lsrs	r0, r5, #16
 8001898:	042d      	lsls	r5, r5, #16
 800189a:	0c2d      	lsrs	r5, r5, #16
 800189c:	002b      	movs	r3, r5
 800189e:	0c11      	lsrs	r1, r2, #16
 80018a0:	0412      	lsls	r2, r2, #16
 80018a2:	0c12      	lsrs	r2, r2, #16
 80018a4:	4353      	muls	r3, r2
 80018a6:	4698      	mov	r8, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	002f      	movs	r7, r5
 80018ac:	4343      	muls	r3, r0
 80018ae:	4699      	mov	r9, r3
 80018b0:	434f      	muls	r7, r1
 80018b2:	444f      	add	r7, r9
 80018b4:	46bb      	mov	fp, r7
 80018b6:	4647      	mov	r7, r8
 80018b8:	000b      	movs	r3, r1
 80018ba:	0c3f      	lsrs	r7, r7, #16
 80018bc:	46ba      	mov	sl, r7
 80018be:	4343      	muls	r3, r0
 80018c0:	44da      	add	sl, fp
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	45d1      	cmp	r9, sl
 80018c6:	d904      	bls.n	80018d2 <__aeabi_dmul+0x122>
 80018c8:	2780      	movs	r7, #128	; 0x80
 80018ca:	027f      	lsls	r7, r7, #9
 80018cc:	46b9      	mov	r9, r7
 80018ce:	444b      	add	r3, r9
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	4653      	mov	r3, sl
 80018d4:	0c1b      	lsrs	r3, r3, #16
 80018d6:	469b      	mov	fp, r3
 80018d8:	4653      	mov	r3, sl
 80018da:	041f      	lsls	r7, r3, #16
 80018dc:	4643      	mov	r3, r8
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	0c1b      	lsrs	r3, r3, #16
 80018e2:	4698      	mov	r8, r3
 80018e4:	003b      	movs	r3, r7
 80018e6:	4443      	add	r3, r8
 80018e8:	9304      	str	r3, [sp, #16]
 80018ea:	0c33      	lsrs	r3, r6, #16
 80018ec:	0436      	lsls	r6, r6, #16
 80018ee:	0c36      	lsrs	r6, r6, #16
 80018f0:	4698      	mov	r8, r3
 80018f2:	0033      	movs	r3, r6
 80018f4:	4343      	muls	r3, r0
 80018f6:	4699      	mov	r9, r3
 80018f8:	4643      	mov	r3, r8
 80018fa:	4343      	muls	r3, r0
 80018fc:	002f      	movs	r7, r5
 80018fe:	469a      	mov	sl, r3
 8001900:	4643      	mov	r3, r8
 8001902:	4377      	muls	r7, r6
 8001904:	435d      	muls	r5, r3
 8001906:	0c38      	lsrs	r0, r7, #16
 8001908:	444d      	add	r5, r9
 800190a:	1945      	adds	r5, r0, r5
 800190c:	45a9      	cmp	r9, r5
 800190e:	d903      	bls.n	8001918 <__aeabi_dmul+0x168>
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	4699      	mov	r9, r3
 8001916:	44ca      	add	sl, r9
 8001918:	043f      	lsls	r7, r7, #16
 800191a:	0c28      	lsrs	r0, r5, #16
 800191c:	0c3f      	lsrs	r7, r7, #16
 800191e:	042d      	lsls	r5, r5, #16
 8001920:	19ed      	adds	r5, r5, r7
 8001922:	0c27      	lsrs	r7, r4, #16
 8001924:	0424      	lsls	r4, r4, #16
 8001926:	0c24      	lsrs	r4, r4, #16
 8001928:	0003      	movs	r3, r0
 800192a:	0020      	movs	r0, r4
 800192c:	4350      	muls	r0, r2
 800192e:	437a      	muls	r2, r7
 8001930:	4691      	mov	r9, r2
 8001932:	003a      	movs	r2, r7
 8001934:	4453      	add	r3, sl
 8001936:	9305      	str	r3, [sp, #20]
 8001938:	0c03      	lsrs	r3, r0, #16
 800193a:	469a      	mov	sl, r3
 800193c:	434a      	muls	r2, r1
 800193e:	4361      	muls	r1, r4
 8001940:	4449      	add	r1, r9
 8001942:	4451      	add	r1, sl
 8001944:	44ab      	add	fp, r5
 8001946:	4589      	cmp	r9, r1
 8001948:	d903      	bls.n	8001952 <__aeabi_dmul+0x1a2>
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	025b      	lsls	r3, r3, #9
 800194e:	4699      	mov	r9, r3
 8001950:	444a      	add	r2, r9
 8001952:	0400      	lsls	r0, r0, #16
 8001954:	0c0b      	lsrs	r3, r1, #16
 8001956:	0c00      	lsrs	r0, r0, #16
 8001958:	0409      	lsls	r1, r1, #16
 800195a:	1809      	adds	r1, r1, r0
 800195c:	0020      	movs	r0, r4
 800195e:	4699      	mov	r9, r3
 8001960:	4643      	mov	r3, r8
 8001962:	4370      	muls	r0, r6
 8001964:	435c      	muls	r4, r3
 8001966:	437e      	muls	r6, r7
 8001968:	435f      	muls	r7, r3
 800196a:	0c03      	lsrs	r3, r0, #16
 800196c:	4698      	mov	r8, r3
 800196e:	19a4      	adds	r4, r4, r6
 8001970:	4444      	add	r4, r8
 8001972:	444a      	add	r2, r9
 8001974:	9703      	str	r7, [sp, #12]
 8001976:	42a6      	cmp	r6, r4
 8001978:	d904      	bls.n	8001984 <__aeabi_dmul+0x1d4>
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	025b      	lsls	r3, r3, #9
 800197e:	4698      	mov	r8, r3
 8001980:	4447      	add	r7, r8
 8001982:	9703      	str	r7, [sp, #12]
 8001984:	0423      	lsls	r3, r4, #16
 8001986:	9e02      	ldr	r6, [sp, #8]
 8001988:	469a      	mov	sl, r3
 800198a:	9b05      	ldr	r3, [sp, #20]
 800198c:	445e      	add	r6, fp
 800198e:	4698      	mov	r8, r3
 8001990:	42ae      	cmp	r6, r5
 8001992:	41ad      	sbcs	r5, r5
 8001994:	1876      	adds	r6, r6, r1
 8001996:	428e      	cmp	r6, r1
 8001998:	4189      	sbcs	r1, r1
 800199a:	0400      	lsls	r0, r0, #16
 800199c:	0c00      	lsrs	r0, r0, #16
 800199e:	4450      	add	r0, sl
 80019a0:	4440      	add	r0, r8
 80019a2:	426d      	negs	r5, r5
 80019a4:	1947      	adds	r7, r0, r5
 80019a6:	46b8      	mov	r8, r7
 80019a8:	4693      	mov	fp, r2
 80019aa:	4249      	negs	r1, r1
 80019ac:	4689      	mov	r9, r1
 80019ae:	44c3      	add	fp, r8
 80019b0:	44d9      	add	r9, fp
 80019b2:	4298      	cmp	r0, r3
 80019b4:	4180      	sbcs	r0, r0
 80019b6:	45a8      	cmp	r8, r5
 80019b8:	41ad      	sbcs	r5, r5
 80019ba:	4593      	cmp	fp, r2
 80019bc:	4192      	sbcs	r2, r2
 80019be:	4589      	cmp	r9, r1
 80019c0:	4189      	sbcs	r1, r1
 80019c2:	426d      	negs	r5, r5
 80019c4:	4240      	negs	r0, r0
 80019c6:	4328      	orrs	r0, r5
 80019c8:	0c24      	lsrs	r4, r4, #16
 80019ca:	4252      	negs	r2, r2
 80019cc:	4249      	negs	r1, r1
 80019ce:	430a      	orrs	r2, r1
 80019d0:	9b03      	ldr	r3, [sp, #12]
 80019d2:	1900      	adds	r0, r0, r4
 80019d4:	1880      	adds	r0, r0, r2
 80019d6:	18c7      	adds	r7, r0, r3
 80019d8:	464b      	mov	r3, r9
 80019da:	0ddc      	lsrs	r4, r3, #23
 80019dc:	9b04      	ldr	r3, [sp, #16]
 80019de:	0275      	lsls	r5, r6, #9
 80019e0:	431d      	orrs	r5, r3
 80019e2:	1e6a      	subs	r2, r5, #1
 80019e4:	4195      	sbcs	r5, r2
 80019e6:	464b      	mov	r3, r9
 80019e8:	0df6      	lsrs	r6, r6, #23
 80019ea:	027f      	lsls	r7, r7, #9
 80019ec:	4335      	orrs	r5, r6
 80019ee:	025a      	lsls	r2, r3, #9
 80019f0:	433c      	orrs	r4, r7
 80019f2:	4315      	orrs	r5, r2
 80019f4:	01fb      	lsls	r3, r7, #7
 80019f6:	d400      	bmi.n	80019fa <__aeabi_dmul+0x24a>
 80019f8:	e11c      	b.n	8001c34 <__aeabi_dmul+0x484>
 80019fa:	2101      	movs	r1, #1
 80019fc:	086a      	lsrs	r2, r5, #1
 80019fe:	400d      	ands	r5, r1
 8001a00:	4315      	orrs	r5, r2
 8001a02:	07e2      	lsls	r2, r4, #31
 8001a04:	4315      	orrs	r5, r2
 8001a06:	0864      	lsrs	r4, r4, #1
 8001a08:	494f      	ldr	r1, [pc, #316]	; (8001b48 <__aeabi_dmul+0x398>)
 8001a0a:	4461      	add	r1, ip
 8001a0c:	2900      	cmp	r1, #0
 8001a0e:	dc00      	bgt.n	8001a12 <__aeabi_dmul+0x262>
 8001a10:	e0b0      	b.n	8001b74 <__aeabi_dmul+0x3c4>
 8001a12:	076b      	lsls	r3, r5, #29
 8001a14:	d009      	beq.n	8001a2a <__aeabi_dmul+0x27a>
 8001a16:	220f      	movs	r2, #15
 8001a18:	402a      	ands	r2, r5
 8001a1a:	2a04      	cmp	r2, #4
 8001a1c:	d005      	beq.n	8001a2a <__aeabi_dmul+0x27a>
 8001a1e:	1d2a      	adds	r2, r5, #4
 8001a20:	42aa      	cmp	r2, r5
 8001a22:	41ad      	sbcs	r5, r5
 8001a24:	426d      	negs	r5, r5
 8001a26:	1964      	adds	r4, r4, r5
 8001a28:	0015      	movs	r5, r2
 8001a2a:	01e3      	lsls	r3, r4, #7
 8001a2c:	d504      	bpl.n	8001a38 <__aeabi_dmul+0x288>
 8001a2e:	2180      	movs	r1, #128	; 0x80
 8001a30:	4a46      	ldr	r2, [pc, #280]	; (8001b4c <__aeabi_dmul+0x39c>)
 8001a32:	00c9      	lsls	r1, r1, #3
 8001a34:	4014      	ands	r4, r2
 8001a36:	4461      	add	r1, ip
 8001a38:	4a45      	ldr	r2, [pc, #276]	; (8001b50 <__aeabi_dmul+0x3a0>)
 8001a3a:	4291      	cmp	r1, r2
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dmul+0x290>
 8001a3e:	e726      	b.n	800188e <__aeabi_dmul+0xde>
 8001a40:	0762      	lsls	r2, r4, #29
 8001a42:	08ed      	lsrs	r5, r5, #3
 8001a44:	0264      	lsls	r4, r4, #9
 8001a46:	0549      	lsls	r1, r1, #21
 8001a48:	4315      	orrs	r5, r2
 8001a4a:	0b24      	lsrs	r4, r4, #12
 8001a4c:	0d4a      	lsrs	r2, r1, #21
 8001a4e:	e710      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001a50:	4652      	mov	r2, sl
 8001a52:	4332      	orrs	r2, r6
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dmul+0x2a8>
 8001a56:	e07f      	b.n	8001b58 <__aeabi_dmul+0x3a8>
 8001a58:	2e00      	cmp	r6, #0
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dmul+0x2ae>
 8001a5c:	e0dc      	b.n	8001c18 <__aeabi_dmul+0x468>
 8001a5e:	0030      	movs	r0, r6
 8001a60:	f000 fd5c 	bl	800251c <__clzsi2>
 8001a64:	0002      	movs	r2, r0
 8001a66:	3a0b      	subs	r2, #11
 8001a68:	231d      	movs	r3, #29
 8001a6a:	0001      	movs	r1, r0
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	4652      	mov	r2, sl
 8001a70:	3908      	subs	r1, #8
 8001a72:	40da      	lsrs	r2, r3
 8001a74:	408e      	lsls	r6, r1
 8001a76:	4316      	orrs	r6, r2
 8001a78:	4652      	mov	r2, sl
 8001a7a:	408a      	lsls	r2, r1
 8001a7c:	9b00      	ldr	r3, [sp, #0]
 8001a7e:	4935      	ldr	r1, [pc, #212]	; (8001b54 <__aeabi_dmul+0x3a4>)
 8001a80:	1a18      	subs	r0, r3, r0
 8001a82:	0003      	movs	r3, r0
 8001a84:	468c      	mov	ip, r1
 8001a86:	4463      	add	r3, ip
 8001a88:	2000      	movs	r0, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	e6d3      	b.n	8001836 <__aeabi_dmul+0x86>
 8001a8e:	0025      	movs	r5, r4
 8001a90:	4305      	orrs	r5, r0
 8001a92:	d04a      	beq.n	8001b2a <__aeabi_dmul+0x37a>
 8001a94:	2c00      	cmp	r4, #0
 8001a96:	d100      	bne.n	8001a9a <__aeabi_dmul+0x2ea>
 8001a98:	e0b0      	b.n	8001bfc <__aeabi_dmul+0x44c>
 8001a9a:	0020      	movs	r0, r4
 8001a9c:	f000 fd3e 	bl	800251c <__clzsi2>
 8001aa0:	0001      	movs	r1, r0
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	390b      	subs	r1, #11
 8001aa6:	231d      	movs	r3, #29
 8001aa8:	0010      	movs	r0, r2
 8001aaa:	1a5b      	subs	r3, r3, r1
 8001aac:	0031      	movs	r1, r6
 8001aae:	0035      	movs	r5, r6
 8001ab0:	3808      	subs	r0, #8
 8001ab2:	4084      	lsls	r4, r0
 8001ab4:	40d9      	lsrs	r1, r3
 8001ab6:	4085      	lsls	r5, r0
 8001ab8:	430c      	orrs	r4, r1
 8001aba:	4826      	ldr	r0, [pc, #152]	; (8001b54 <__aeabi_dmul+0x3a4>)
 8001abc:	1a83      	subs	r3, r0, r2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	4699      	mov	r9, r3
 8001ac4:	469b      	mov	fp, r3
 8001ac6:	e697      	b.n	80017f8 <__aeabi_dmul+0x48>
 8001ac8:	0005      	movs	r5, r0
 8001aca:	4325      	orrs	r5, r4
 8001acc:	d126      	bne.n	8001b1c <__aeabi_dmul+0x36c>
 8001ace:	2208      	movs	r2, #8
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	2400      	movs	r4, #0
 8001ad6:	4691      	mov	r9, r2
 8001ad8:	469b      	mov	fp, r3
 8001ada:	e68d      	b.n	80017f8 <__aeabi_dmul+0x48>
 8001adc:	4652      	mov	r2, sl
 8001ade:	9b00      	ldr	r3, [sp, #0]
 8001ae0:	4332      	orrs	r2, r6
 8001ae2:	d110      	bne.n	8001b06 <__aeabi_dmul+0x356>
 8001ae4:	4915      	ldr	r1, [pc, #84]	; (8001b3c <__aeabi_dmul+0x38c>)
 8001ae6:	2600      	movs	r6, #0
 8001ae8:	468c      	mov	ip, r1
 8001aea:	4463      	add	r3, ip
 8001aec:	4649      	mov	r1, r9
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2302      	movs	r3, #2
 8001af2:	4319      	orrs	r1, r3
 8001af4:	4689      	mov	r9, r1
 8001af6:	2002      	movs	r0, #2
 8001af8:	e69d      	b.n	8001836 <__aeabi_dmul+0x86>
 8001afa:	465b      	mov	r3, fp
 8001afc:	9701      	str	r7, [sp, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d000      	beq.n	8001b04 <__aeabi_dmul+0x354>
 8001b02:	e6ad      	b.n	8001860 <__aeabi_dmul+0xb0>
 8001b04:	e6c3      	b.n	800188e <__aeabi_dmul+0xde>
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <__aeabi_dmul+0x38c>)
 8001b08:	2003      	movs	r0, #3
 8001b0a:	4694      	mov	ip, r2
 8001b0c:	4463      	add	r3, ip
 8001b0e:	464a      	mov	r2, r9
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2303      	movs	r3, #3
 8001b14:	431a      	orrs	r2, r3
 8001b16:	4691      	mov	r9, r2
 8001b18:	4652      	mov	r2, sl
 8001b1a:	e68c      	b.n	8001836 <__aeabi_dmul+0x86>
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2303      	movs	r3, #3
 8001b22:	0005      	movs	r5, r0
 8001b24:	4691      	mov	r9, r2
 8001b26:	469b      	mov	fp, r3
 8001b28:	e666      	b.n	80017f8 <__aeabi_dmul+0x48>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	4699      	mov	r9, r3
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	3301      	adds	r3, #1
 8001b34:	2400      	movs	r4, #0
 8001b36:	469b      	mov	fp, r3
 8001b38:	e65e      	b.n	80017f8 <__aeabi_dmul+0x48>
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	000007ff 	.word	0x000007ff
 8001b40:	fffffc01 	.word	0xfffffc01
 8001b44:	080087a8 	.word	0x080087a8
 8001b48:	000003ff 	.word	0x000003ff
 8001b4c:	feffffff 	.word	0xfeffffff
 8001b50:	000007fe 	.word	0x000007fe
 8001b54:	fffffc0d 	.word	0xfffffc0d
 8001b58:	4649      	mov	r1, r9
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4319      	orrs	r1, r3
 8001b5e:	4689      	mov	r9, r1
 8001b60:	2600      	movs	r6, #0
 8001b62:	2001      	movs	r0, #1
 8001b64:	e667      	b.n	8001836 <__aeabi_dmul+0x86>
 8001b66:	2300      	movs	r3, #0
 8001b68:	2480      	movs	r4, #128	; 0x80
 8001b6a:	2500      	movs	r5, #0
 8001b6c:	4a43      	ldr	r2, [pc, #268]	; (8001c7c <__aeabi_dmul+0x4cc>)
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	0324      	lsls	r4, r4, #12
 8001b72:	e67e      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001b74:	2001      	movs	r0, #1
 8001b76:	1a40      	subs	r0, r0, r1
 8001b78:	2838      	cmp	r0, #56	; 0x38
 8001b7a:	dd00      	ble.n	8001b7e <__aeabi_dmul+0x3ce>
 8001b7c:	e676      	b.n	800186c <__aeabi_dmul+0xbc>
 8001b7e:	281f      	cmp	r0, #31
 8001b80:	dd5b      	ble.n	8001c3a <__aeabi_dmul+0x48a>
 8001b82:	221f      	movs	r2, #31
 8001b84:	0023      	movs	r3, r4
 8001b86:	4252      	negs	r2, r2
 8001b88:	1a51      	subs	r1, r2, r1
 8001b8a:	40cb      	lsrs	r3, r1
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	2820      	cmp	r0, #32
 8001b90:	d003      	beq.n	8001b9a <__aeabi_dmul+0x3ea>
 8001b92:	4a3b      	ldr	r2, [pc, #236]	; (8001c80 <__aeabi_dmul+0x4d0>)
 8001b94:	4462      	add	r2, ip
 8001b96:	4094      	lsls	r4, r2
 8001b98:	4325      	orrs	r5, r4
 8001b9a:	1e6a      	subs	r2, r5, #1
 8001b9c:	4195      	sbcs	r5, r2
 8001b9e:	002a      	movs	r2, r5
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	2107      	movs	r1, #7
 8001ba4:	000d      	movs	r5, r1
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	4015      	ands	r5, r2
 8001baa:	4211      	tst	r1, r2
 8001bac:	d05b      	beq.n	8001c66 <__aeabi_dmul+0x4b6>
 8001bae:	210f      	movs	r1, #15
 8001bb0:	2400      	movs	r4, #0
 8001bb2:	4011      	ands	r1, r2
 8001bb4:	2904      	cmp	r1, #4
 8001bb6:	d053      	beq.n	8001c60 <__aeabi_dmul+0x4b0>
 8001bb8:	1d11      	adds	r1, r2, #4
 8001bba:	4291      	cmp	r1, r2
 8001bbc:	4192      	sbcs	r2, r2
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	18a4      	adds	r4, r4, r2
 8001bc2:	000a      	movs	r2, r1
 8001bc4:	0223      	lsls	r3, r4, #8
 8001bc6:	d54b      	bpl.n	8001c60 <__aeabi_dmul+0x4b0>
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2400      	movs	r4, #0
 8001bcc:	2500      	movs	r5, #0
 8001bce:	e650      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	031b      	lsls	r3, r3, #12
 8001bd4:	421c      	tst	r4, r3
 8001bd6:	d009      	beq.n	8001bec <__aeabi_dmul+0x43c>
 8001bd8:	421e      	tst	r6, r3
 8001bda:	d107      	bne.n	8001bec <__aeabi_dmul+0x43c>
 8001bdc:	4333      	orrs	r3, r6
 8001bde:	031c      	lsls	r4, r3, #12
 8001be0:	4643      	mov	r3, r8
 8001be2:	0015      	movs	r5, r2
 8001be4:	0b24      	lsrs	r4, r4, #12
 8001be6:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <__aeabi_dmul+0x4cc>)
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	e642      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001bec:	2280      	movs	r2, #128	; 0x80
 8001bee:	0312      	lsls	r2, r2, #12
 8001bf0:	4314      	orrs	r4, r2
 8001bf2:	0324      	lsls	r4, r4, #12
 8001bf4:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <__aeabi_dmul+0x4cc>)
 8001bf6:	0b24      	lsrs	r4, r4, #12
 8001bf8:	9701      	str	r7, [sp, #4]
 8001bfa:	e63a      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001bfc:	f000 fc8e 	bl	800251c <__clzsi2>
 8001c00:	0001      	movs	r1, r0
 8001c02:	0002      	movs	r2, r0
 8001c04:	3115      	adds	r1, #21
 8001c06:	3220      	adds	r2, #32
 8001c08:	291c      	cmp	r1, #28
 8001c0a:	dc00      	bgt.n	8001c0e <__aeabi_dmul+0x45e>
 8001c0c:	e74b      	b.n	8001aa6 <__aeabi_dmul+0x2f6>
 8001c0e:	0034      	movs	r4, r6
 8001c10:	3808      	subs	r0, #8
 8001c12:	2500      	movs	r5, #0
 8001c14:	4084      	lsls	r4, r0
 8001c16:	e750      	b.n	8001aba <__aeabi_dmul+0x30a>
 8001c18:	f000 fc80 	bl	800251c <__clzsi2>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	001a      	movs	r2, r3
 8001c20:	3215      	adds	r2, #21
 8001c22:	3020      	adds	r0, #32
 8001c24:	2a1c      	cmp	r2, #28
 8001c26:	dc00      	bgt.n	8001c2a <__aeabi_dmul+0x47a>
 8001c28:	e71e      	b.n	8001a68 <__aeabi_dmul+0x2b8>
 8001c2a:	4656      	mov	r6, sl
 8001c2c:	3b08      	subs	r3, #8
 8001c2e:	2200      	movs	r2, #0
 8001c30:	409e      	lsls	r6, r3
 8001c32:	e723      	b.n	8001a7c <__aeabi_dmul+0x2cc>
 8001c34:	9b00      	ldr	r3, [sp, #0]
 8001c36:	469c      	mov	ip, r3
 8001c38:	e6e6      	b.n	8001a08 <__aeabi_dmul+0x258>
 8001c3a:	4912      	ldr	r1, [pc, #72]	; (8001c84 <__aeabi_dmul+0x4d4>)
 8001c3c:	0022      	movs	r2, r4
 8001c3e:	4461      	add	r1, ip
 8001c40:	002e      	movs	r6, r5
 8001c42:	408d      	lsls	r5, r1
 8001c44:	408a      	lsls	r2, r1
 8001c46:	40c6      	lsrs	r6, r0
 8001c48:	1e69      	subs	r1, r5, #1
 8001c4a:	418d      	sbcs	r5, r1
 8001c4c:	4332      	orrs	r2, r6
 8001c4e:	432a      	orrs	r2, r5
 8001c50:	40c4      	lsrs	r4, r0
 8001c52:	0753      	lsls	r3, r2, #29
 8001c54:	d0b6      	beq.n	8001bc4 <__aeabi_dmul+0x414>
 8001c56:	210f      	movs	r1, #15
 8001c58:	4011      	ands	r1, r2
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d1ac      	bne.n	8001bb8 <__aeabi_dmul+0x408>
 8001c5e:	e7b1      	b.n	8001bc4 <__aeabi_dmul+0x414>
 8001c60:	0765      	lsls	r5, r4, #29
 8001c62:	0264      	lsls	r4, r4, #9
 8001c64:	0b24      	lsrs	r4, r4, #12
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4315      	orrs	r5, r2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e601      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001c6e:	2280      	movs	r2, #128	; 0x80
 8001c70:	0312      	lsls	r2, r2, #12
 8001c72:	4314      	orrs	r4, r2
 8001c74:	0324      	lsls	r4, r4, #12
 8001c76:	4a01      	ldr	r2, [pc, #4]	; (8001c7c <__aeabi_dmul+0x4cc>)
 8001c78:	0b24      	lsrs	r4, r4, #12
 8001c7a:	e5fa      	b.n	8001872 <__aeabi_dmul+0xc2>
 8001c7c:	000007ff 	.word	0x000007ff
 8001c80:	0000043e 	.word	0x0000043e
 8001c84:	0000041e 	.word	0x0000041e

08001c88 <__aeabi_dsub>:
 8001c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8a:	4657      	mov	r7, sl
 8001c8c:	464e      	mov	r6, r9
 8001c8e:	4645      	mov	r5, r8
 8001c90:	46de      	mov	lr, fp
 8001c92:	b5e0      	push	{r5, r6, r7, lr}
 8001c94:	001e      	movs	r6, r3
 8001c96:	0017      	movs	r7, r2
 8001c98:	004a      	lsls	r2, r1, #1
 8001c9a:	030b      	lsls	r3, r1, #12
 8001c9c:	0d52      	lsrs	r2, r2, #21
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	4690      	mov	r8, r2
 8001ca2:	0f42      	lsrs	r2, r0, #29
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	0fcd      	lsrs	r5, r1, #31
 8001ca8:	4ccd      	ldr	r4, [pc, #820]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001caa:	0331      	lsls	r1, r6, #12
 8001cac:	00c3      	lsls	r3, r0, #3
 8001cae:	4694      	mov	ip, r2
 8001cb0:	0070      	lsls	r0, r6, #1
 8001cb2:	0f7a      	lsrs	r2, r7, #29
 8001cb4:	0a49      	lsrs	r1, r1, #9
 8001cb6:	00ff      	lsls	r7, r7, #3
 8001cb8:	469a      	mov	sl, r3
 8001cba:	46b9      	mov	r9, r7
 8001cbc:	0d40      	lsrs	r0, r0, #21
 8001cbe:	0ff6      	lsrs	r6, r6, #31
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	42a0      	cmp	r0, r4
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x40>
 8001cc6:	e0b1      	b.n	8001e2c <__aeabi_dsub+0x1a4>
 8001cc8:	2201      	movs	r2, #1
 8001cca:	4056      	eors	r6, r2
 8001ccc:	46b3      	mov	fp, r6
 8001cce:	42b5      	cmp	r5, r6
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_dsub+0x4c>
 8001cd2:	e088      	b.n	8001de6 <__aeabi_dsub+0x15e>
 8001cd4:	4642      	mov	r2, r8
 8001cd6:	1a12      	subs	r2, r2, r0
 8001cd8:	2a00      	cmp	r2, #0
 8001cda:	dc00      	bgt.n	8001cde <__aeabi_dsub+0x56>
 8001cdc:	e0ae      	b.n	8001e3c <__aeabi_dsub+0x1b4>
 8001cde:	2800      	cmp	r0, #0
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x5c>
 8001ce2:	e0c1      	b.n	8001e68 <__aeabi_dsub+0x1e0>
 8001ce4:	48be      	ldr	r0, [pc, #760]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001ce6:	4580      	cmp	r8, r0
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x64>
 8001cea:	e151      	b.n	8001f90 <__aeabi_dsub+0x308>
 8001cec:	2080      	movs	r0, #128	; 0x80
 8001cee:	0400      	lsls	r0, r0, #16
 8001cf0:	4301      	orrs	r1, r0
 8001cf2:	2a38      	cmp	r2, #56	; 0x38
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dsub+0x70>
 8001cf6:	e17b      	b.n	8001ff0 <__aeabi_dsub+0x368>
 8001cf8:	2a1f      	cmp	r2, #31
 8001cfa:	dd00      	ble.n	8001cfe <__aeabi_dsub+0x76>
 8001cfc:	e1ee      	b.n	80020dc <__aeabi_dsub+0x454>
 8001cfe:	2020      	movs	r0, #32
 8001d00:	003e      	movs	r6, r7
 8001d02:	1a80      	subs	r0, r0, r2
 8001d04:	000c      	movs	r4, r1
 8001d06:	40d6      	lsrs	r6, r2
 8001d08:	40d1      	lsrs	r1, r2
 8001d0a:	4087      	lsls	r7, r0
 8001d0c:	4662      	mov	r2, ip
 8001d0e:	4084      	lsls	r4, r0
 8001d10:	1a52      	subs	r2, r2, r1
 8001d12:	1e78      	subs	r0, r7, #1
 8001d14:	4187      	sbcs	r7, r0
 8001d16:	4694      	mov	ip, r2
 8001d18:	4334      	orrs	r4, r6
 8001d1a:	4327      	orrs	r7, r4
 8001d1c:	1bdc      	subs	r4, r3, r7
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	419b      	sbcs	r3, r3
 8001d22:	4662      	mov	r2, ip
 8001d24:	425b      	negs	r3, r3
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4699      	mov	r9, r3
 8001d2a:	464b      	mov	r3, r9
 8001d2c:	021b      	lsls	r3, r3, #8
 8001d2e:	d400      	bmi.n	8001d32 <__aeabi_dsub+0xaa>
 8001d30:	e118      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 8001d32:	464b      	mov	r3, r9
 8001d34:	0258      	lsls	r0, r3, #9
 8001d36:	0a43      	lsrs	r3, r0, #9
 8001d38:	4699      	mov	r9, r3
 8001d3a:	464b      	mov	r3, r9
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d100      	bne.n	8001d42 <__aeabi_dsub+0xba>
 8001d40:	e137      	b.n	8001fb2 <__aeabi_dsub+0x32a>
 8001d42:	4648      	mov	r0, r9
 8001d44:	f000 fbea 	bl	800251c <__clzsi2>
 8001d48:	0001      	movs	r1, r0
 8001d4a:	3908      	subs	r1, #8
 8001d4c:	2320      	movs	r3, #32
 8001d4e:	0022      	movs	r2, r4
 8001d50:	4648      	mov	r0, r9
 8001d52:	1a5b      	subs	r3, r3, r1
 8001d54:	40da      	lsrs	r2, r3
 8001d56:	4088      	lsls	r0, r1
 8001d58:	408c      	lsls	r4, r1
 8001d5a:	4643      	mov	r3, r8
 8001d5c:	4310      	orrs	r0, r2
 8001d5e:	4588      	cmp	r8, r1
 8001d60:	dd00      	ble.n	8001d64 <__aeabi_dsub+0xdc>
 8001d62:	e136      	b.n	8001fd2 <__aeabi_dsub+0x34a>
 8001d64:	1ac9      	subs	r1, r1, r3
 8001d66:	1c4b      	adds	r3, r1, #1
 8001d68:	2b1f      	cmp	r3, #31
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_dsub+0xe6>
 8001d6c:	e0ea      	b.n	8001f44 <__aeabi_dsub+0x2bc>
 8001d6e:	2220      	movs	r2, #32
 8001d70:	0026      	movs	r6, r4
 8001d72:	1ad2      	subs	r2, r2, r3
 8001d74:	0001      	movs	r1, r0
 8001d76:	4094      	lsls	r4, r2
 8001d78:	40de      	lsrs	r6, r3
 8001d7a:	40d8      	lsrs	r0, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4091      	lsls	r1, r2
 8001d80:	1e62      	subs	r2, r4, #1
 8001d82:	4194      	sbcs	r4, r2
 8001d84:	4681      	mov	r9, r0
 8001d86:	4698      	mov	r8, r3
 8001d88:	4331      	orrs	r1, r6
 8001d8a:	430c      	orrs	r4, r1
 8001d8c:	0763      	lsls	r3, r4, #29
 8001d8e:	d009      	beq.n	8001da4 <__aeabi_dsub+0x11c>
 8001d90:	230f      	movs	r3, #15
 8001d92:	4023      	ands	r3, r4
 8001d94:	2b04      	cmp	r3, #4
 8001d96:	d005      	beq.n	8001da4 <__aeabi_dsub+0x11c>
 8001d98:	1d23      	adds	r3, r4, #4
 8001d9a:	42a3      	cmp	r3, r4
 8001d9c:	41a4      	sbcs	r4, r4
 8001d9e:	4264      	negs	r4, r4
 8001da0:	44a1      	add	r9, r4
 8001da2:	001c      	movs	r4, r3
 8001da4:	464b      	mov	r3, r9
 8001da6:	021b      	lsls	r3, r3, #8
 8001da8:	d400      	bmi.n	8001dac <__aeabi_dsub+0x124>
 8001daa:	e0de      	b.n	8001f6a <__aeabi_dsub+0x2e2>
 8001dac:	4641      	mov	r1, r8
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001db0:	3101      	adds	r1, #1
 8001db2:	4299      	cmp	r1, r3
 8001db4:	d100      	bne.n	8001db8 <__aeabi_dsub+0x130>
 8001db6:	e0e7      	b.n	8001f88 <__aeabi_dsub+0x300>
 8001db8:	464b      	mov	r3, r9
 8001dba:	488a      	ldr	r0, [pc, #552]	; (8001fe4 <__aeabi_dsub+0x35c>)
 8001dbc:	08e4      	lsrs	r4, r4, #3
 8001dbe:	4003      	ands	r3, r0
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	0549      	lsls	r1, r1, #21
 8001dc4:	075b      	lsls	r3, r3, #29
 8001dc6:	0240      	lsls	r0, r0, #9
 8001dc8:	4323      	orrs	r3, r4
 8001dca:	0d4a      	lsrs	r2, r1, #21
 8001dcc:	0b04      	lsrs	r4, r0, #12
 8001dce:	0512      	lsls	r2, r2, #20
 8001dd0:	07ed      	lsls	r5, r5, #31
 8001dd2:	4322      	orrs	r2, r4
 8001dd4:	432a      	orrs	r2, r5
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	0011      	movs	r1, r2
 8001dda:	bcf0      	pop	{r4, r5, r6, r7}
 8001ddc:	46bb      	mov	fp, r7
 8001dde:	46b2      	mov	sl, r6
 8001de0:	46a9      	mov	r9, r5
 8001de2:	46a0      	mov	r8, r4
 8001de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001de6:	4642      	mov	r2, r8
 8001de8:	1a12      	subs	r2, r2, r0
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	dd52      	ble.n	8001e94 <__aeabi_dsub+0x20c>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	d100      	bne.n	8001df4 <__aeabi_dsub+0x16c>
 8001df2:	e09c      	b.n	8001f2e <__aeabi_dsub+0x2a6>
 8001df4:	45a0      	cmp	r8, r4
 8001df6:	d100      	bne.n	8001dfa <__aeabi_dsub+0x172>
 8001df8:	e0ca      	b.n	8001f90 <__aeabi_dsub+0x308>
 8001dfa:	2080      	movs	r0, #128	; 0x80
 8001dfc:	0400      	lsls	r0, r0, #16
 8001dfe:	4301      	orrs	r1, r0
 8001e00:	2a38      	cmp	r2, #56	; 0x38
 8001e02:	dd00      	ble.n	8001e06 <__aeabi_dsub+0x17e>
 8001e04:	e149      	b.n	800209a <__aeabi_dsub+0x412>
 8001e06:	2a1f      	cmp	r2, #31
 8001e08:	dc00      	bgt.n	8001e0c <__aeabi_dsub+0x184>
 8001e0a:	e197      	b.n	800213c <__aeabi_dsub+0x4b4>
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	000e      	movs	r6, r1
 8001e10:	3820      	subs	r0, #32
 8001e12:	40c6      	lsrs	r6, r0
 8001e14:	2a20      	cmp	r2, #32
 8001e16:	d004      	beq.n	8001e22 <__aeabi_dsub+0x19a>
 8001e18:	2040      	movs	r0, #64	; 0x40
 8001e1a:	1a82      	subs	r2, r0, r2
 8001e1c:	4091      	lsls	r1, r2
 8001e1e:	430f      	orrs	r7, r1
 8001e20:	46b9      	mov	r9, r7
 8001e22:	464c      	mov	r4, r9
 8001e24:	1e62      	subs	r2, r4, #1
 8001e26:	4194      	sbcs	r4, r2
 8001e28:	4334      	orrs	r4, r6
 8001e2a:	e13a      	b.n	80020a2 <__aeabi_dsub+0x41a>
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	433a      	orrs	r2, r7
 8001e30:	d028      	beq.n	8001e84 <__aeabi_dsub+0x1fc>
 8001e32:	46b3      	mov	fp, r6
 8001e34:	42b5      	cmp	r5, r6
 8001e36:	d02b      	beq.n	8001e90 <__aeabi_dsub+0x208>
 8001e38:	4a6b      	ldr	r2, [pc, #428]	; (8001fe8 <__aeabi_dsub+0x360>)
 8001e3a:	4442      	add	r2, r8
 8001e3c:	2a00      	cmp	r2, #0
 8001e3e:	d05d      	beq.n	8001efc <__aeabi_dsub+0x274>
 8001e40:	4642      	mov	r2, r8
 8001e42:	4644      	mov	r4, r8
 8001e44:	1a82      	subs	r2, r0, r2
 8001e46:	2c00      	cmp	r4, #0
 8001e48:	d000      	beq.n	8001e4c <__aeabi_dsub+0x1c4>
 8001e4a:	e0f5      	b.n	8002038 <__aeabi_dsub+0x3b0>
 8001e4c:	4665      	mov	r5, ip
 8001e4e:	431d      	orrs	r5, r3
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x1cc>
 8001e52:	e19c      	b.n	800218e <__aeabi_dsub+0x506>
 8001e54:	1e55      	subs	r5, r2, #1
 8001e56:	2a01      	cmp	r2, #1
 8001e58:	d100      	bne.n	8001e5c <__aeabi_dsub+0x1d4>
 8001e5a:	e1fb      	b.n	8002254 <__aeabi_dsub+0x5cc>
 8001e5c:	4c60      	ldr	r4, [pc, #384]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001e5e:	42a2      	cmp	r2, r4
 8001e60:	d100      	bne.n	8001e64 <__aeabi_dsub+0x1dc>
 8001e62:	e1bd      	b.n	80021e0 <__aeabi_dsub+0x558>
 8001e64:	002a      	movs	r2, r5
 8001e66:	e0f0      	b.n	800204a <__aeabi_dsub+0x3c2>
 8001e68:	0008      	movs	r0, r1
 8001e6a:	4338      	orrs	r0, r7
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x1e8>
 8001e6e:	e0c3      	b.n	8001ff8 <__aeabi_dsub+0x370>
 8001e70:	1e50      	subs	r0, r2, #1
 8001e72:	2a01      	cmp	r2, #1
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x1f0>
 8001e76:	e1a8      	b.n	80021ca <__aeabi_dsub+0x542>
 8001e78:	4c59      	ldr	r4, [pc, #356]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001e7a:	42a2      	cmp	r2, r4
 8001e7c:	d100      	bne.n	8001e80 <__aeabi_dsub+0x1f8>
 8001e7e:	e087      	b.n	8001f90 <__aeabi_dsub+0x308>
 8001e80:	0002      	movs	r2, r0
 8001e82:	e736      	b.n	8001cf2 <__aeabi_dsub+0x6a>
 8001e84:	2201      	movs	r2, #1
 8001e86:	4056      	eors	r6, r2
 8001e88:	46b3      	mov	fp, r6
 8001e8a:	42b5      	cmp	r5, r6
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x208>
 8001e8e:	e721      	b.n	8001cd4 <__aeabi_dsub+0x4c>
 8001e90:	4a55      	ldr	r2, [pc, #340]	; (8001fe8 <__aeabi_dsub+0x360>)
 8001e92:	4442      	add	r2, r8
 8001e94:	2a00      	cmp	r2, #0
 8001e96:	d100      	bne.n	8001e9a <__aeabi_dsub+0x212>
 8001e98:	e0b5      	b.n	8002006 <__aeabi_dsub+0x37e>
 8001e9a:	4642      	mov	r2, r8
 8001e9c:	4644      	mov	r4, r8
 8001e9e:	1a82      	subs	r2, r0, r2
 8001ea0:	2c00      	cmp	r4, #0
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_dsub+0x21e>
 8001ea4:	e138      	b.n	8002118 <__aeabi_dsub+0x490>
 8001ea6:	4e4e      	ldr	r6, [pc, #312]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001ea8:	42b0      	cmp	r0, r6
 8001eaa:	d100      	bne.n	8001eae <__aeabi_dsub+0x226>
 8001eac:	e1de      	b.n	800226c <__aeabi_dsub+0x5e4>
 8001eae:	2680      	movs	r6, #128	; 0x80
 8001eb0:	4664      	mov	r4, ip
 8001eb2:	0436      	lsls	r6, r6, #16
 8001eb4:	4334      	orrs	r4, r6
 8001eb6:	46a4      	mov	ip, r4
 8001eb8:	2a38      	cmp	r2, #56	; 0x38
 8001eba:	dd00      	ble.n	8001ebe <__aeabi_dsub+0x236>
 8001ebc:	e196      	b.n	80021ec <__aeabi_dsub+0x564>
 8001ebe:	2a1f      	cmp	r2, #31
 8001ec0:	dd00      	ble.n	8001ec4 <__aeabi_dsub+0x23c>
 8001ec2:	e224      	b.n	800230e <__aeabi_dsub+0x686>
 8001ec4:	2620      	movs	r6, #32
 8001ec6:	1ab4      	subs	r4, r6, r2
 8001ec8:	46a2      	mov	sl, r4
 8001eca:	4664      	mov	r4, ip
 8001ecc:	4656      	mov	r6, sl
 8001ece:	40b4      	lsls	r4, r6
 8001ed0:	46a1      	mov	r9, r4
 8001ed2:	001c      	movs	r4, r3
 8001ed4:	464e      	mov	r6, r9
 8001ed6:	40d4      	lsrs	r4, r2
 8001ed8:	4326      	orrs	r6, r4
 8001eda:	0034      	movs	r4, r6
 8001edc:	4656      	mov	r6, sl
 8001ede:	40b3      	lsls	r3, r6
 8001ee0:	1e5e      	subs	r6, r3, #1
 8001ee2:	41b3      	sbcs	r3, r6
 8001ee4:	431c      	orrs	r4, r3
 8001ee6:	4663      	mov	r3, ip
 8001ee8:	40d3      	lsrs	r3, r2
 8001eea:	18c9      	adds	r1, r1, r3
 8001eec:	19e4      	adds	r4, r4, r7
 8001eee:	42bc      	cmp	r4, r7
 8001ef0:	41bf      	sbcs	r7, r7
 8001ef2:	427f      	negs	r7, r7
 8001ef4:	46b9      	mov	r9, r7
 8001ef6:	4680      	mov	r8, r0
 8001ef8:	4489      	add	r9, r1
 8001efa:	e0d8      	b.n	80020ae <__aeabi_dsub+0x426>
 8001efc:	4640      	mov	r0, r8
 8001efe:	4c3b      	ldr	r4, [pc, #236]	; (8001fec <__aeabi_dsub+0x364>)
 8001f00:	3001      	adds	r0, #1
 8001f02:	4220      	tst	r0, r4
 8001f04:	d000      	beq.n	8001f08 <__aeabi_dsub+0x280>
 8001f06:	e0b4      	b.n	8002072 <__aeabi_dsub+0x3ea>
 8001f08:	4640      	mov	r0, r8
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d000      	beq.n	8001f10 <__aeabi_dsub+0x288>
 8001f0e:	e144      	b.n	800219a <__aeabi_dsub+0x512>
 8001f10:	4660      	mov	r0, ip
 8001f12:	4318      	orrs	r0, r3
 8001f14:	d100      	bne.n	8001f18 <__aeabi_dsub+0x290>
 8001f16:	e190      	b.n	800223a <__aeabi_dsub+0x5b2>
 8001f18:	0008      	movs	r0, r1
 8001f1a:	4338      	orrs	r0, r7
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_dsub+0x298>
 8001f1e:	e1aa      	b.n	8002276 <__aeabi_dsub+0x5ee>
 8001f20:	4661      	mov	r1, ip
 8001f22:	08db      	lsrs	r3, r3, #3
 8001f24:	0749      	lsls	r1, r1, #29
 8001f26:	430b      	orrs	r3, r1
 8001f28:	4661      	mov	r1, ip
 8001f2a:	08cc      	lsrs	r4, r1, #3
 8001f2c:	e027      	b.n	8001f7e <__aeabi_dsub+0x2f6>
 8001f2e:	0008      	movs	r0, r1
 8001f30:	4338      	orrs	r0, r7
 8001f32:	d061      	beq.n	8001ff8 <__aeabi_dsub+0x370>
 8001f34:	1e50      	subs	r0, r2, #1
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x2b4>
 8001f3a:	e139      	b.n	80021b0 <__aeabi_dsub+0x528>
 8001f3c:	42a2      	cmp	r2, r4
 8001f3e:	d027      	beq.n	8001f90 <__aeabi_dsub+0x308>
 8001f40:	0002      	movs	r2, r0
 8001f42:	e75d      	b.n	8001e00 <__aeabi_dsub+0x178>
 8001f44:	0002      	movs	r2, r0
 8001f46:	391f      	subs	r1, #31
 8001f48:	40ca      	lsrs	r2, r1
 8001f4a:	0011      	movs	r1, r2
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	d003      	beq.n	8001f58 <__aeabi_dsub+0x2d0>
 8001f50:	2240      	movs	r2, #64	; 0x40
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4098      	lsls	r0, r3
 8001f56:	4304      	orrs	r4, r0
 8001f58:	1e63      	subs	r3, r4, #1
 8001f5a:	419c      	sbcs	r4, r3
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	4699      	mov	r9, r3
 8001f60:	4698      	mov	r8, r3
 8001f62:	430c      	orrs	r4, r1
 8001f64:	0763      	lsls	r3, r4, #29
 8001f66:	d000      	beq.n	8001f6a <__aeabi_dsub+0x2e2>
 8001f68:	e712      	b.n	8001d90 <__aeabi_dsub+0x108>
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	464a      	mov	r2, r9
 8001f6e:	08e4      	lsrs	r4, r4, #3
 8001f70:	075b      	lsls	r3, r3, #29
 8001f72:	4323      	orrs	r3, r4
 8001f74:	08d4      	lsrs	r4, r2, #3
 8001f76:	4642      	mov	r2, r8
 8001f78:	4919      	ldr	r1, [pc, #100]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001f7a:	428a      	cmp	r2, r1
 8001f7c:	d00e      	beq.n	8001f9c <__aeabi_dsub+0x314>
 8001f7e:	0324      	lsls	r4, r4, #12
 8001f80:	0552      	lsls	r2, r2, #21
 8001f82:	0b24      	lsrs	r4, r4, #12
 8001f84:	0d52      	lsrs	r2, r2, #21
 8001f86:	e722      	b.n	8001dce <__aeabi_dsub+0x146>
 8001f88:	000a      	movs	r2, r1
 8001f8a:	2400      	movs	r4, #0
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e71e      	b.n	8001dce <__aeabi_dsub+0x146>
 8001f90:	08db      	lsrs	r3, r3, #3
 8001f92:	4662      	mov	r2, ip
 8001f94:	0752      	lsls	r2, r2, #29
 8001f96:	4313      	orrs	r3, r2
 8001f98:	4662      	mov	r2, ip
 8001f9a:	08d4      	lsrs	r4, r2, #3
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	4322      	orrs	r2, r4
 8001fa0:	d100      	bne.n	8001fa4 <__aeabi_dsub+0x31c>
 8001fa2:	e1fc      	b.n	800239e <__aeabi_dsub+0x716>
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	0312      	lsls	r2, r2, #12
 8001fa8:	4314      	orrs	r4, r2
 8001faa:	0324      	lsls	r4, r4, #12
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <__aeabi_dsub+0x358>)
 8001fae:	0b24      	lsrs	r4, r4, #12
 8001fb0:	e70d      	b.n	8001dce <__aeabi_dsub+0x146>
 8001fb2:	0020      	movs	r0, r4
 8001fb4:	f000 fab2 	bl	800251c <__clzsi2>
 8001fb8:	0001      	movs	r1, r0
 8001fba:	3118      	adds	r1, #24
 8001fbc:	291f      	cmp	r1, #31
 8001fbe:	dc00      	bgt.n	8001fc2 <__aeabi_dsub+0x33a>
 8001fc0:	e6c4      	b.n	8001d4c <__aeabi_dsub+0xc4>
 8001fc2:	3808      	subs	r0, #8
 8001fc4:	4084      	lsls	r4, r0
 8001fc6:	4643      	mov	r3, r8
 8001fc8:	0020      	movs	r0, r4
 8001fca:	2400      	movs	r4, #0
 8001fcc:	4588      	cmp	r8, r1
 8001fce:	dc00      	bgt.n	8001fd2 <__aeabi_dsub+0x34a>
 8001fd0:	e6c8      	b.n	8001d64 <__aeabi_dsub+0xdc>
 8001fd2:	4a04      	ldr	r2, [pc, #16]	; (8001fe4 <__aeabi_dsub+0x35c>)
 8001fd4:	1a5b      	subs	r3, r3, r1
 8001fd6:	4010      	ands	r0, r2
 8001fd8:	4698      	mov	r8, r3
 8001fda:	4681      	mov	r9, r0
 8001fdc:	e6d6      	b.n	8001d8c <__aeabi_dsub+0x104>
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	000007ff 	.word	0x000007ff
 8001fe4:	ff7fffff 	.word	0xff7fffff
 8001fe8:	fffff801 	.word	0xfffff801
 8001fec:	000007fe 	.word	0x000007fe
 8001ff0:	430f      	orrs	r7, r1
 8001ff2:	1e7a      	subs	r2, r7, #1
 8001ff4:	4197      	sbcs	r7, r2
 8001ff6:	e691      	b.n	8001d1c <__aeabi_dsub+0x94>
 8001ff8:	4661      	mov	r1, ip
 8001ffa:	08db      	lsrs	r3, r3, #3
 8001ffc:	0749      	lsls	r1, r1, #29
 8001ffe:	430b      	orrs	r3, r1
 8002000:	4661      	mov	r1, ip
 8002002:	08cc      	lsrs	r4, r1, #3
 8002004:	e7b8      	b.n	8001f78 <__aeabi_dsub+0x2f0>
 8002006:	4640      	mov	r0, r8
 8002008:	4cd3      	ldr	r4, [pc, #844]	; (8002358 <__aeabi_dsub+0x6d0>)
 800200a:	3001      	adds	r0, #1
 800200c:	4220      	tst	r0, r4
 800200e:	d000      	beq.n	8002012 <__aeabi_dsub+0x38a>
 8002010:	e0a2      	b.n	8002158 <__aeabi_dsub+0x4d0>
 8002012:	4640      	mov	r0, r8
 8002014:	2800      	cmp	r0, #0
 8002016:	d000      	beq.n	800201a <__aeabi_dsub+0x392>
 8002018:	e101      	b.n	800221e <__aeabi_dsub+0x596>
 800201a:	4660      	mov	r0, ip
 800201c:	4318      	orrs	r0, r3
 800201e:	d100      	bne.n	8002022 <__aeabi_dsub+0x39a>
 8002020:	e15e      	b.n	80022e0 <__aeabi_dsub+0x658>
 8002022:	0008      	movs	r0, r1
 8002024:	4338      	orrs	r0, r7
 8002026:	d000      	beq.n	800202a <__aeabi_dsub+0x3a2>
 8002028:	e15f      	b.n	80022ea <__aeabi_dsub+0x662>
 800202a:	4661      	mov	r1, ip
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	0749      	lsls	r1, r1, #29
 8002030:	430b      	orrs	r3, r1
 8002032:	4661      	mov	r1, ip
 8002034:	08cc      	lsrs	r4, r1, #3
 8002036:	e7a2      	b.n	8001f7e <__aeabi_dsub+0x2f6>
 8002038:	4dc8      	ldr	r5, [pc, #800]	; (800235c <__aeabi_dsub+0x6d4>)
 800203a:	42a8      	cmp	r0, r5
 800203c:	d100      	bne.n	8002040 <__aeabi_dsub+0x3b8>
 800203e:	e0cf      	b.n	80021e0 <__aeabi_dsub+0x558>
 8002040:	2580      	movs	r5, #128	; 0x80
 8002042:	4664      	mov	r4, ip
 8002044:	042d      	lsls	r5, r5, #16
 8002046:	432c      	orrs	r4, r5
 8002048:	46a4      	mov	ip, r4
 800204a:	2a38      	cmp	r2, #56	; 0x38
 800204c:	dc56      	bgt.n	80020fc <__aeabi_dsub+0x474>
 800204e:	2a1f      	cmp	r2, #31
 8002050:	dd00      	ble.n	8002054 <__aeabi_dsub+0x3cc>
 8002052:	e0d1      	b.n	80021f8 <__aeabi_dsub+0x570>
 8002054:	2520      	movs	r5, #32
 8002056:	001e      	movs	r6, r3
 8002058:	1aad      	subs	r5, r5, r2
 800205a:	4664      	mov	r4, ip
 800205c:	40ab      	lsls	r3, r5
 800205e:	40ac      	lsls	r4, r5
 8002060:	40d6      	lsrs	r6, r2
 8002062:	1e5d      	subs	r5, r3, #1
 8002064:	41ab      	sbcs	r3, r5
 8002066:	4334      	orrs	r4, r6
 8002068:	4323      	orrs	r3, r4
 800206a:	4664      	mov	r4, ip
 800206c:	40d4      	lsrs	r4, r2
 800206e:	1b09      	subs	r1, r1, r4
 8002070:	e049      	b.n	8002106 <__aeabi_dsub+0x47e>
 8002072:	4660      	mov	r0, ip
 8002074:	1bdc      	subs	r4, r3, r7
 8002076:	1a46      	subs	r6, r0, r1
 8002078:	42a3      	cmp	r3, r4
 800207a:	4180      	sbcs	r0, r0
 800207c:	4240      	negs	r0, r0
 800207e:	4681      	mov	r9, r0
 8002080:	0030      	movs	r0, r6
 8002082:	464e      	mov	r6, r9
 8002084:	1b80      	subs	r0, r0, r6
 8002086:	4681      	mov	r9, r0
 8002088:	0200      	lsls	r0, r0, #8
 800208a:	d476      	bmi.n	800217a <__aeabi_dsub+0x4f2>
 800208c:	464b      	mov	r3, r9
 800208e:	4323      	orrs	r3, r4
 8002090:	d000      	beq.n	8002094 <__aeabi_dsub+0x40c>
 8002092:	e652      	b.n	8001d3a <__aeabi_dsub+0xb2>
 8002094:	2400      	movs	r4, #0
 8002096:	2500      	movs	r5, #0
 8002098:	e771      	b.n	8001f7e <__aeabi_dsub+0x2f6>
 800209a:	4339      	orrs	r1, r7
 800209c:	000c      	movs	r4, r1
 800209e:	1e62      	subs	r2, r4, #1
 80020a0:	4194      	sbcs	r4, r2
 80020a2:	18e4      	adds	r4, r4, r3
 80020a4:	429c      	cmp	r4, r3
 80020a6:	419b      	sbcs	r3, r3
 80020a8:	425b      	negs	r3, r3
 80020aa:	4463      	add	r3, ip
 80020ac:	4699      	mov	r9, r3
 80020ae:	464b      	mov	r3, r9
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dsub+0x42e>
 80020b4:	e756      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 80020b6:	2301      	movs	r3, #1
 80020b8:	469c      	mov	ip, r3
 80020ba:	4ba8      	ldr	r3, [pc, #672]	; (800235c <__aeabi_dsub+0x6d4>)
 80020bc:	44e0      	add	r8, ip
 80020be:	4598      	cmp	r8, r3
 80020c0:	d038      	beq.n	8002134 <__aeabi_dsub+0x4ac>
 80020c2:	464b      	mov	r3, r9
 80020c4:	48a6      	ldr	r0, [pc, #664]	; (8002360 <__aeabi_dsub+0x6d8>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	4003      	ands	r3, r0
 80020ca:	0018      	movs	r0, r3
 80020cc:	0863      	lsrs	r3, r4, #1
 80020ce:	4014      	ands	r4, r2
 80020d0:	431c      	orrs	r4, r3
 80020d2:	07c3      	lsls	r3, r0, #31
 80020d4:	431c      	orrs	r4, r3
 80020d6:	0843      	lsrs	r3, r0, #1
 80020d8:	4699      	mov	r9, r3
 80020da:	e657      	b.n	8001d8c <__aeabi_dsub+0x104>
 80020dc:	0010      	movs	r0, r2
 80020de:	000e      	movs	r6, r1
 80020e0:	3820      	subs	r0, #32
 80020e2:	40c6      	lsrs	r6, r0
 80020e4:	2a20      	cmp	r2, #32
 80020e6:	d004      	beq.n	80020f2 <__aeabi_dsub+0x46a>
 80020e8:	2040      	movs	r0, #64	; 0x40
 80020ea:	1a82      	subs	r2, r0, r2
 80020ec:	4091      	lsls	r1, r2
 80020ee:	430f      	orrs	r7, r1
 80020f0:	46b9      	mov	r9, r7
 80020f2:	464f      	mov	r7, r9
 80020f4:	1e7a      	subs	r2, r7, #1
 80020f6:	4197      	sbcs	r7, r2
 80020f8:	4337      	orrs	r7, r6
 80020fa:	e60f      	b.n	8001d1c <__aeabi_dsub+0x94>
 80020fc:	4662      	mov	r2, ip
 80020fe:	431a      	orrs	r2, r3
 8002100:	0013      	movs	r3, r2
 8002102:	1e5a      	subs	r2, r3, #1
 8002104:	4193      	sbcs	r3, r2
 8002106:	1afc      	subs	r4, r7, r3
 8002108:	42a7      	cmp	r7, r4
 800210a:	41bf      	sbcs	r7, r7
 800210c:	427f      	negs	r7, r7
 800210e:	1bcb      	subs	r3, r1, r7
 8002110:	4699      	mov	r9, r3
 8002112:	465d      	mov	r5, fp
 8002114:	4680      	mov	r8, r0
 8002116:	e608      	b.n	8001d2a <__aeabi_dsub+0xa2>
 8002118:	4666      	mov	r6, ip
 800211a:	431e      	orrs	r6, r3
 800211c:	d100      	bne.n	8002120 <__aeabi_dsub+0x498>
 800211e:	e0be      	b.n	800229e <__aeabi_dsub+0x616>
 8002120:	1e56      	subs	r6, r2, #1
 8002122:	2a01      	cmp	r2, #1
 8002124:	d100      	bne.n	8002128 <__aeabi_dsub+0x4a0>
 8002126:	e109      	b.n	800233c <__aeabi_dsub+0x6b4>
 8002128:	4c8c      	ldr	r4, [pc, #560]	; (800235c <__aeabi_dsub+0x6d4>)
 800212a:	42a2      	cmp	r2, r4
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x4a8>
 800212e:	e119      	b.n	8002364 <__aeabi_dsub+0x6dc>
 8002130:	0032      	movs	r2, r6
 8002132:	e6c1      	b.n	8001eb8 <__aeabi_dsub+0x230>
 8002134:	4642      	mov	r2, r8
 8002136:	2400      	movs	r4, #0
 8002138:	2300      	movs	r3, #0
 800213a:	e648      	b.n	8001dce <__aeabi_dsub+0x146>
 800213c:	2020      	movs	r0, #32
 800213e:	000c      	movs	r4, r1
 8002140:	1a80      	subs	r0, r0, r2
 8002142:	003e      	movs	r6, r7
 8002144:	4087      	lsls	r7, r0
 8002146:	4084      	lsls	r4, r0
 8002148:	40d6      	lsrs	r6, r2
 800214a:	1e78      	subs	r0, r7, #1
 800214c:	4187      	sbcs	r7, r0
 800214e:	40d1      	lsrs	r1, r2
 8002150:	4334      	orrs	r4, r6
 8002152:	433c      	orrs	r4, r7
 8002154:	448c      	add	ip, r1
 8002156:	e7a4      	b.n	80020a2 <__aeabi_dsub+0x41a>
 8002158:	4a80      	ldr	r2, [pc, #512]	; (800235c <__aeabi_dsub+0x6d4>)
 800215a:	4290      	cmp	r0, r2
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x4d8>
 800215e:	e0e9      	b.n	8002334 <__aeabi_dsub+0x6ac>
 8002160:	19df      	adds	r7, r3, r7
 8002162:	429f      	cmp	r7, r3
 8002164:	419b      	sbcs	r3, r3
 8002166:	4461      	add	r1, ip
 8002168:	425b      	negs	r3, r3
 800216a:	18c9      	adds	r1, r1, r3
 800216c:	07cc      	lsls	r4, r1, #31
 800216e:	087f      	lsrs	r7, r7, #1
 8002170:	084b      	lsrs	r3, r1, #1
 8002172:	4699      	mov	r9, r3
 8002174:	4680      	mov	r8, r0
 8002176:	433c      	orrs	r4, r7
 8002178:	e6f4      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 800217a:	1afc      	subs	r4, r7, r3
 800217c:	42a7      	cmp	r7, r4
 800217e:	41bf      	sbcs	r7, r7
 8002180:	4663      	mov	r3, ip
 8002182:	427f      	negs	r7, r7
 8002184:	1ac9      	subs	r1, r1, r3
 8002186:	1bcb      	subs	r3, r1, r7
 8002188:	4699      	mov	r9, r3
 800218a:	465d      	mov	r5, fp
 800218c:	e5d5      	b.n	8001d3a <__aeabi_dsub+0xb2>
 800218e:	08ff      	lsrs	r7, r7, #3
 8002190:	074b      	lsls	r3, r1, #29
 8002192:	465d      	mov	r5, fp
 8002194:	433b      	orrs	r3, r7
 8002196:	08cc      	lsrs	r4, r1, #3
 8002198:	e6ee      	b.n	8001f78 <__aeabi_dsub+0x2f0>
 800219a:	4662      	mov	r2, ip
 800219c:	431a      	orrs	r2, r3
 800219e:	d000      	beq.n	80021a2 <__aeabi_dsub+0x51a>
 80021a0:	e082      	b.n	80022a8 <__aeabi_dsub+0x620>
 80021a2:	000b      	movs	r3, r1
 80021a4:	433b      	orrs	r3, r7
 80021a6:	d11b      	bne.n	80021e0 <__aeabi_dsub+0x558>
 80021a8:	2480      	movs	r4, #128	; 0x80
 80021aa:	2500      	movs	r5, #0
 80021ac:	0324      	lsls	r4, r4, #12
 80021ae:	e6f9      	b.n	8001fa4 <__aeabi_dsub+0x31c>
 80021b0:	19dc      	adds	r4, r3, r7
 80021b2:	429c      	cmp	r4, r3
 80021b4:	419b      	sbcs	r3, r3
 80021b6:	4461      	add	r1, ip
 80021b8:	4689      	mov	r9, r1
 80021ba:	425b      	negs	r3, r3
 80021bc:	4499      	add	r9, r3
 80021be:	464b      	mov	r3, r9
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	d444      	bmi.n	800224e <__aeabi_dsub+0x5c6>
 80021c4:	2301      	movs	r3, #1
 80021c6:	4698      	mov	r8, r3
 80021c8:	e6cc      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 80021ca:	1bdc      	subs	r4, r3, r7
 80021cc:	4662      	mov	r2, ip
 80021ce:	42a3      	cmp	r3, r4
 80021d0:	419b      	sbcs	r3, r3
 80021d2:	1a51      	subs	r1, r2, r1
 80021d4:	425b      	negs	r3, r3
 80021d6:	1acb      	subs	r3, r1, r3
 80021d8:	4699      	mov	r9, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	4698      	mov	r8, r3
 80021de:	e5a4      	b.n	8001d2a <__aeabi_dsub+0xa2>
 80021e0:	08ff      	lsrs	r7, r7, #3
 80021e2:	074b      	lsls	r3, r1, #29
 80021e4:	465d      	mov	r5, fp
 80021e6:	433b      	orrs	r3, r7
 80021e8:	08cc      	lsrs	r4, r1, #3
 80021ea:	e6d7      	b.n	8001f9c <__aeabi_dsub+0x314>
 80021ec:	4662      	mov	r2, ip
 80021ee:	431a      	orrs	r2, r3
 80021f0:	0014      	movs	r4, r2
 80021f2:	1e63      	subs	r3, r4, #1
 80021f4:	419c      	sbcs	r4, r3
 80021f6:	e679      	b.n	8001eec <__aeabi_dsub+0x264>
 80021f8:	0015      	movs	r5, r2
 80021fa:	4664      	mov	r4, ip
 80021fc:	3d20      	subs	r5, #32
 80021fe:	40ec      	lsrs	r4, r5
 8002200:	46a0      	mov	r8, r4
 8002202:	2a20      	cmp	r2, #32
 8002204:	d005      	beq.n	8002212 <__aeabi_dsub+0x58a>
 8002206:	2540      	movs	r5, #64	; 0x40
 8002208:	4664      	mov	r4, ip
 800220a:	1aaa      	subs	r2, r5, r2
 800220c:	4094      	lsls	r4, r2
 800220e:	4323      	orrs	r3, r4
 8002210:	469a      	mov	sl, r3
 8002212:	4654      	mov	r4, sl
 8002214:	1e63      	subs	r3, r4, #1
 8002216:	419c      	sbcs	r4, r3
 8002218:	4643      	mov	r3, r8
 800221a:	4323      	orrs	r3, r4
 800221c:	e773      	b.n	8002106 <__aeabi_dsub+0x47e>
 800221e:	4662      	mov	r2, ip
 8002220:	431a      	orrs	r2, r3
 8002222:	d023      	beq.n	800226c <__aeabi_dsub+0x5e4>
 8002224:	000a      	movs	r2, r1
 8002226:	433a      	orrs	r2, r7
 8002228:	d000      	beq.n	800222c <__aeabi_dsub+0x5a4>
 800222a:	e0a0      	b.n	800236e <__aeabi_dsub+0x6e6>
 800222c:	4662      	mov	r2, ip
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	4313      	orrs	r3, r2
 8002234:	4662      	mov	r2, ip
 8002236:	08d4      	lsrs	r4, r2, #3
 8002238:	e6b0      	b.n	8001f9c <__aeabi_dsub+0x314>
 800223a:	000b      	movs	r3, r1
 800223c:	433b      	orrs	r3, r7
 800223e:	d100      	bne.n	8002242 <__aeabi_dsub+0x5ba>
 8002240:	e728      	b.n	8002094 <__aeabi_dsub+0x40c>
 8002242:	08ff      	lsrs	r7, r7, #3
 8002244:	074b      	lsls	r3, r1, #29
 8002246:	465d      	mov	r5, fp
 8002248:	433b      	orrs	r3, r7
 800224a:	08cc      	lsrs	r4, r1, #3
 800224c:	e697      	b.n	8001f7e <__aeabi_dsub+0x2f6>
 800224e:	2302      	movs	r3, #2
 8002250:	4698      	mov	r8, r3
 8002252:	e736      	b.n	80020c2 <__aeabi_dsub+0x43a>
 8002254:	1afc      	subs	r4, r7, r3
 8002256:	42a7      	cmp	r7, r4
 8002258:	41bf      	sbcs	r7, r7
 800225a:	4663      	mov	r3, ip
 800225c:	427f      	negs	r7, r7
 800225e:	1ac9      	subs	r1, r1, r3
 8002260:	1bcb      	subs	r3, r1, r7
 8002262:	4699      	mov	r9, r3
 8002264:	2301      	movs	r3, #1
 8002266:	465d      	mov	r5, fp
 8002268:	4698      	mov	r8, r3
 800226a:	e55e      	b.n	8001d2a <__aeabi_dsub+0xa2>
 800226c:	074b      	lsls	r3, r1, #29
 800226e:	08ff      	lsrs	r7, r7, #3
 8002270:	433b      	orrs	r3, r7
 8002272:	08cc      	lsrs	r4, r1, #3
 8002274:	e692      	b.n	8001f9c <__aeabi_dsub+0x314>
 8002276:	1bdc      	subs	r4, r3, r7
 8002278:	4660      	mov	r0, ip
 800227a:	42a3      	cmp	r3, r4
 800227c:	41b6      	sbcs	r6, r6
 800227e:	1a40      	subs	r0, r0, r1
 8002280:	4276      	negs	r6, r6
 8002282:	1b80      	subs	r0, r0, r6
 8002284:	4681      	mov	r9, r0
 8002286:	0200      	lsls	r0, r0, #8
 8002288:	d560      	bpl.n	800234c <__aeabi_dsub+0x6c4>
 800228a:	1afc      	subs	r4, r7, r3
 800228c:	42a7      	cmp	r7, r4
 800228e:	41bf      	sbcs	r7, r7
 8002290:	4663      	mov	r3, ip
 8002292:	427f      	negs	r7, r7
 8002294:	1ac9      	subs	r1, r1, r3
 8002296:	1bcb      	subs	r3, r1, r7
 8002298:	4699      	mov	r9, r3
 800229a:	465d      	mov	r5, fp
 800229c:	e576      	b.n	8001d8c <__aeabi_dsub+0x104>
 800229e:	08ff      	lsrs	r7, r7, #3
 80022a0:	074b      	lsls	r3, r1, #29
 80022a2:	433b      	orrs	r3, r7
 80022a4:	08cc      	lsrs	r4, r1, #3
 80022a6:	e667      	b.n	8001f78 <__aeabi_dsub+0x2f0>
 80022a8:	000a      	movs	r2, r1
 80022aa:	08db      	lsrs	r3, r3, #3
 80022ac:	433a      	orrs	r2, r7
 80022ae:	d100      	bne.n	80022b2 <__aeabi_dsub+0x62a>
 80022b0:	e66f      	b.n	8001f92 <__aeabi_dsub+0x30a>
 80022b2:	4662      	mov	r2, ip
 80022b4:	0752      	lsls	r2, r2, #29
 80022b6:	4313      	orrs	r3, r2
 80022b8:	4662      	mov	r2, ip
 80022ba:	08d4      	lsrs	r4, r2, #3
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	0312      	lsls	r2, r2, #12
 80022c0:	4214      	tst	r4, r2
 80022c2:	d007      	beq.n	80022d4 <__aeabi_dsub+0x64c>
 80022c4:	08c8      	lsrs	r0, r1, #3
 80022c6:	4210      	tst	r0, r2
 80022c8:	d104      	bne.n	80022d4 <__aeabi_dsub+0x64c>
 80022ca:	465d      	mov	r5, fp
 80022cc:	0004      	movs	r4, r0
 80022ce:	08fb      	lsrs	r3, r7, #3
 80022d0:	0749      	lsls	r1, r1, #29
 80022d2:	430b      	orrs	r3, r1
 80022d4:	0f5a      	lsrs	r2, r3, #29
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	08db      	lsrs	r3, r3, #3
 80022da:	0752      	lsls	r2, r2, #29
 80022dc:	4313      	orrs	r3, r2
 80022de:	e65d      	b.n	8001f9c <__aeabi_dsub+0x314>
 80022e0:	074b      	lsls	r3, r1, #29
 80022e2:	08ff      	lsrs	r7, r7, #3
 80022e4:	433b      	orrs	r3, r7
 80022e6:	08cc      	lsrs	r4, r1, #3
 80022e8:	e649      	b.n	8001f7e <__aeabi_dsub+0x2f6>
 80022ea:	19dc      	adds	r4, r3, r7
 80022ec:	429c      	cmp	r4, r3
 80022ee:	419b      	sbcs	r3, r3
 80022f0:	4461      	add	r1, ip
 80022f2:	4689      	mov	r9, r1
 80022f4:	425b      	negs	r3, r3
 80022f6:	4499      	add	r9, r3
 80022f8:	464b      	mov	r3, r9
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	d400      	bmi.n	8002300 <__aeabi_dsub+0x678>
 80022fe:	e631      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 8002300:	464a      	mov	r2, r9
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <__aeabi_dsub+0x6d8>)
 8002304:	401a      	ands	r2, r3
 8002306:	2301      	movs	r3, #1
 8002308:	4691      	mov	r9, r2
 800230a:	4698      	mov	r8, r3
 800230c:	e62a      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 800230e:	0016      	movs	r6, r2
 8002310:	4664      	mov	r4, ip
 8002312:	3e20      	subs	r6, #32
 8002314:	40f4      	lsrs	r4, r6
 8002316:	46a0      	mov	r8, r4
 8002318:	2a20      	cmp	r2, #32
 800231a:	d005      	beq.n	8002328 <__aeabi_dsub+0x6a0>
 800231c:	2640      	movs	r6, #64	; 0x40
 800231e:	4664      	mov	r4, ip
 8002320:	1ab2      	subs	r2, r6, r2
 8002322:	4094      	lsls	r4, r2
 8002324:	4323      	orrs	r3, r4
 8002326:	469a      	mov	sl, r3
 8002328:	4654      	mov	r4, sl
 800232a:	1e63      	subs	r3, r4, #1
 800232c:	419c      	sbcs	r4, r3
 800232e:	4643      	mov	r3, r8
 8002330:	431c      	orrs	r4, r3
 8002332:	e5db      	b.n	8001eec <__aeabi_dsub+0x264>
 8002334:	0002      	movs	r2, r0
 8002336:	2400      	movs	r4, #0
 8002338:	2300      	movs	r3, #0
 800233a:	e548      	b.n	8001dce <__aeabi_dsub+0x146>
 800233c:	19dc      	adds	r4, r3, r7
 800233e:	42bc      	cmp	r4, r7
 8002340:	41bf      	sbcs	r7, r7
 8002342:	4461      	add	r1, ip
 8002344:	4689      	mov	r9, r1
 8002346:	427f      	negs	r7, r7
 8002348:	44b9      	add	r9, r7
 800234a:	e738      	b.n	80021be <__aeabi_dsub+0x536>
 800234c:	464b      	mov	r3, r9
 800234e:	4323      	orrs	r3, r4
 8002350:	d100      	bne.n	8002354 <__aeabi_dsub+0x6cc>
 8002352:	e69f      	b.n	8002094 <__aeabi_dsub+0x40c>
 8002354:	e606      	b.n	8001f64 <__aeabi_dsub+0x2dc>
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	000007fe 	.word	0x000007fe
 800235c:	000007ff 	.word	0x000007ff
 8002360:	ff7fffff 	.word	0xff7fffff
 8002364:	08ff      	lsrs	r7, r7, #3
 8002366:	074b      	lsls	r3, r1, #29
 8002368:	433b      	orrs	r3, r7
 800236a:	08cc      	lsrs	r4, r1, #3
 800236c:	e616      	b.n	8001f9c <__aeabi_dsub+0x314>
 800236e:	4662      	mov	r2, ip
 8002370:	08db      	lsrs	r3, r3, #3
 8002372:	0752      	lsls	r2, r2, #29
 8002374:	4313      	orrs	r3, r2
 8002376:	4662      	mov	r2, ip
 8002378:	08d4      	lsrs	r4, r2, #3
 800237a:	2280      	movs	r2, #128	; 0x80
 800237c:	0312      	lsls	r2, r2, #12
 800237e:	4214      	tst	r4, r2
 8002380:	d007      	beq.n	8002392 <__aeabi_dsub+0x70a>
 8002382:	08c8      	lsrs	r0, r1, #3
 8002384:	4210      	tst	r0, r2
 8002386:	d104      	bne.n	8002392 <__aeabi_dsub+0x70a>
 8002388:	465d      	mov	r5, fp
 800238a:	0004      	movs	r4, r0
 800238c:	08fb      	lsrs	r3, r7, #3
 800238e:	0749      	lsls	r1, r1, #29
 8002390:	430b      	orrs	r3, r1
 8002392:	0f5a      	lsrs	r2, r3, #29
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	0752      	lsls	r2, r2, #29
 8002398:	08db      	lsrs	r3, r3, #3
 800239a:	4313      	orrs	r3, r2
 800239c:	e5fe      	b.n	8001f9c <__aeabi_dsub+0x314>
 800239e:	2300      	movs	r3, #0
 80023a0:	4a01      	ldr	r2, [pc, #4]	; (80023a8 <__aeabi_dsub+0x720>)
 80023a2:	001c      	movs	r4, r3
 80023a4:	e513      	b.n	8001dce <__aeabi_dsub+0x146>
 80023a6:	46c0      	nop			; (mov r8, r8)
 80023a8:	000007ff 	.word	0x000007ff

080023ac <__aeabi_d2iz>:
 80023ac:	000a      	movs	r2, r1
 80023ae:	b530      	push	{r4, r5, lr}
 80023b0:	4c13      	ldr	r4, [pc, #76]	; (8002400 <__aeabi_d2iz+0x54>)
 80023b2:	0053      	lsls	r3, r2, #1
 80023b4:	0309      	lsls	r1, r1, #12
 80023b6:	0005      	movs	r5, r0
 80023b8:	0b09      	lsrs	r1, r1, #12
 80023ba:	2000      	movs	r0, #0
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	0fd2      	lsrs	r2, r2, #31
 80023c0:	42a3      	cmp	r3, r4
 80023c2:	dd04      	ble.n	80023ce <__aeabi_d2iz+0x22>
 80023c4:	480f      	ldr	r0, [pc, #60]	; (8002404 <__aeabi_d2iz+0x58>)
 80023c6:	4283      	cmp	r3, r0
 80023c8:	dd02      	ble.n	80023d0 <__aeabi_d2iz+0x24>
 80023ca:	4b0f      	ldr	r3, [pc, #60]	; (8002408 <__aeabi_d2iz+0x5c>)
 80023cc:	18d0      	adds	r0, r2, r3
 80023ce:	bd30      	pop	{r4, r5, pc}
 80023d0:	2080      	movs	r0, #128	; 0x80
 80023d2:	0340      	lsls	r0, r0, #13
 80023d4:	4301      	orrs	r1, r0
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <__aeabi_d2iz+0x60>)
 80023d8:	1ac0      	subs	r0, r0, r3
 80023da:	281f      	cmp	r0, #31
 80023dc:	dd08      	ble.n	80023f0 <__aeabi_d2iz+0x44>
 80023de:	480c      	ldr	r0, [pc, #48]	; (8002410 <__aeabi_d2iz+0x64>)
 80023e0:	1ac3      	subs	r3, r0, r3
 80023e2:	40d9      	lsrs	r1, r3
 80023e4:	000b      	movs	r3, r1
 80023e6:	4258      	negs	r0, r3
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d1f0      	bne.n	80023ce <__aeabi_d2iz+0x22>
 80023ec:	0018      	movs	r0, r3
 80023ee:	e7ee      	b.n	80023ce <__aeabi_d2iz+0x22>
 80023f0:	4c08      	ldr	r4, [pc, #32]	; (8002414 <__aeabi_d2iz+0x68>)
 80023f2:	40c5      	lsrs	r5, r0
 80023f4:	46a4      	mov	ip, r4
 80023f6:	4463      	add	r3, ip
 80023f8:	4099      	lsls	r1, r3
 80023fa:	000b      	movs	r3, r1
 80023fc:	432b      	orrs	r3, r5
 80023fe:	e7f2      	b.n	80023e6 <__aeabi_d2iz+0x3a>
 8002400:	000003fe 	.word	0x000003fe
 8002404:	0000041d 	.word	0x0000041d
 8002408:	7fffffff 	.word	0x7fffffff
 800240c:	00000433 	.word	0x00000433
 8002410:	00000413 	.word	0x00000413
 8002414:	fffffbed 	.word	0xfffffbed

08002418 <__aeabi_f2d>:
 8002418:	b570      	push	{r4, r5, r6, lr}
 800241a:	0043      	lsls	r3, r0, #1
 800241c:	0246      	lsls	r6, r0, #9
 800241e:	0fc4      	lsrs	r4, r0, #31
 8002420:	20fe      	movs	r0, #254	; 0xfe
 8002422:	0e1b      	lsrs	r3, r3, #24
 8002424:	1c59      	adds	r1, r3, #1
 8002426:	0a75      	lsrs	r5, r6, #9
 8002428:	4208      	tst	r0, r1
 800242a:	d00c      	beq.n	8002446 <__aeabi_f2d+0x2e>
 800242c:	22e0      	movs	r2, #224	; 0xe0
 800242e:	0092      	lsls	r2, r2, #2
 8002430:	4694      	mov	ip, r2
 8002432:	076d      	lsls	r5, r5, #29
 8002434:	0b36      	lsrs	r6, r6, #12
 8002436:	4463      	add	r3, ip
 8002438:	051b      	lsls	r3, r3, #20
 800243a:	4333      	orrs	r3, r6
 800243c:	07e4      	lsls	r4, r4, #31
 800243e:	4323      	orrs	r3, r4
 8002440:	0028      	movs	r0, r5
 8002442:	0019      	movs	r1, r3
 8002444:	bd70      	pop	{r4, r5, r6, pc}
 8002446:	2b00      	cmp	r3, #0
 8002448:	d114      	bne.n	8002474 <__aeabi_f2d+0x5c>
 800244a:	2d00      	cmp	r5, #0
 800244c:	d01b      	beq.n	8002486 <__aeabi_f2d+0x6e>
 800244e:	0028      	movs	r0, r5
 8002450:	f000 f864 	bl	800251c <__clzsi2>
 8002454:	280a      	cmp	r0, #10
 8002456:	dc1c      	bgt.n	8002492 <__aeabi_f2d+0x7a>
 8002458:	230b      	movs	r3, #11
 800245a:	002e      	movs	r6, r5
 800245c:	1a1b      	subs	r3, r3, r0
 800245e:	40de      	lsrs	r6, r3
 8002460:	0003      	movs	r3, r0
 8002462:	3315      	adds	r3, #21
 8002464:	409d      	lsls	r5, r3
 8002466:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <__aeabi_f2d+0x88>)
 8002468:	0336      	lsls	r6, r6, #12
 800246a:	1a12      	subs	r2, r2, r0
 800246c:	0552      	lsls	r2, r2, #21
 800246e:	0b36      	lsrs	r6, r6, #12
 8002470:	0d53      	lsrs	r3, r2, #21
 8002472:	e7e1      	b.n	8002438 <__aeabi_f2d+0x20>
 8002474:	2d00      	cmp	r5, #0
 8002476:	d009      	beq.n	800248c <__aeabi_f2d+0x74>
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	0b36      	lsrs	r6, r6, #12
 800247c:	0312      	lsls	r2, r2, #12
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <__aeabi_f2d+0x8c>)
 8002480:	076d      	lsls	r5, r5, #29
 8002482:	4316      	orrs	r6, r2
 8002484:	e7d8      	b.n	8002438 <__aeabi_f2d+0x20>
 8002486:	2300      	movs	r3, #0
 8002488:	2600      	movs	r6, #0
 800248a:	e7d5      	b.n	8002438 <__aeabi_f2d+0x20>
 800248c:	2600      	movs	r6, #0
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <__aeabi_f2d+0x8c>)
 8002490:	e7d2      	b.n	8002438 <__aeabi_f2d+0x20>
 8002492:	0003      	movs	r3, r0
 8002494:	3b0b      	subs	r3, #11
 8002496:	409d      	lsls	r5, r3
 8002498:	002e      	movs	r6, r5
 800249a:	2500      	movs	r5, #0
 800249c:	e7e3      	b.n	8002466 <__aeabi_f2d+0x4e>
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	00000389 	.word	0x00000389
 80024a4:	000007ff 	.word	0x000007ff

080024a8 <__aeabi_cfrcmple>:
 80024a8:	4684      	mov	ip, r0
 80024aa:	0008      	movs	r0, r1
 80024ac:	4661      	mov	r1, ip
 80024ae:	e7ff      	b.n	80024b0 <__aeabi_cfcmpeq>

080024b0 <__aeabi_cfcmpeq>:
 80024b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024b2:	f000 f8c9 	bl	8002648 <__lesf2>
 80024b6:	2800      	cmp	r0, #0
 80024b8:	d401      	bmi.n	80024be <__aeabi_cfcmpeq+0xe>
 80024ba:	2100      	movs	r1, #0
 80024bc:	42c8      	cmn	r0, r1
 80024be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080024c0 <__aeabi_fcmpeq>:
 80024c0:	b510      	push	{r4, lr}
 80024c2:	f000 f855 	bl	8002570 <__eqsf2>
 80024c6:	4240      	negs	r0, r0
 80024c8:	3001      	adds	r0, #1
 80024ca:	bd10      	pop	{r4, pc}

080024cc <__aeabi_fcmplt>:
 80024cc:	b510      	push	{r4, lr}
 80024ce:	f000 f8bb 	bl	8002648 <__lesf2>
 80024d2:	2800      	cmp	r0, #0
 80024d4:	db01      	blt.n	80024da <__aeabi_fcmplt+0xe>
 80024d6:	2000      	movs	r0, #0
 80024d8:	bd10      	pop	{r4, pc}
 80024da:	2001      	movs	r0, #1
 80024dc:	bd10      	pop	{r4, pc}
 80024de:	46c0      	nop			; (mov r8, r8)

080024e0 <__aeabi_fcmple>:
 80024e0:	b510      	push	{r4, lr}
 80024e2:	f000 f8b1 	bl	8002648 <__lesf2>
 80024e6:	2800      	cmp	r0, #0
 80024e8:	dd01      	ble.n	80024ee <__aeabi_fcmple+0xe>
 80024ea:	2000      	movs	r0, #0
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	2001      	movs	r0, #1
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	46c0      	nop			; (mov r8, r8)

080024f4 <__aeabi_fcmpgt>:
 80024f4:	b510      	push	{r4, lr}
 80024f6:	f000 f861 	bl	80025bc <__gesf2>
 80024fa:	2800      	cmp	r0, #0
 80024fc:	dc01      	bgt.n	8002502 <__aeabi_fcmpgt+0xe>
 80024fe:	2000      	movs	r0, #0
 8002500:	bd10      	pop	{r4, pc}
 8002502:	2001      	movs	r0, #1
 8002504:	bd10      	pop	{r4, pc}
 8002506:	46c0      	nop			; (mov r8, r8)

08002508 <__aeabi_fcmpge>:
 8002508:	b510      	push	{r4, lr}
 800250a:	f000 f857 	bl	80025bc <__gesf2>
 800250e:	2800      	cmp	r0, #0
 8002510:	da01      	bge.n	8002516 <__aeabi_fcmpge+0xe>
 8002512:	2000      	movs	r0, #0
 8002514:	bd10      	pop	{r4, pc}
 8002516:	2001      	movs	r0, #1
 8002518:	bd10      	pop	{r4, pc}
 800251a:	46c0      	nop			; (mov r8, r8)

0800251c <__clzsi2>:
 800251c:	211c      	movs	r1, #28
 800251e:	2301      	movs	r3, #1
 8002520:	041b      	lsls	r3, r3, #16
 8002522:	4298      	cmp	r0, r3
 8002524:	d301      	bcc.n	800252a <__clzsi2+0xe>
 8002526:	0c00      	lsrs	r0, r0, #16
 8002528:	3910      	subs	r1, #16
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	4298      	cmp	r0, r3
 800252e:	d301      	bcc.n	8002534 <__clzsi2+0x18>
 8002530:	0a00      	lsrs	r0, r0, #8
 8002532:	3908      	subs	r1, #8
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	4298      	cmp	r0, r3
 8002538:	d301      	bcc.n	800253e <__clzsi2+0x22>
 800253a:	0900      	lsrs	r0, r0, #4
 800253c:	3904      	subs	r1, #4
 800253e:	a202      	add	r2, pc, #8	; (adr r2, 8002548 <__clzsi2+0x2c>)
 8002540:	5c10      	ldrb	r0, [r2, r0]
 8002542:	1840      	adds	r0, r0, r1
 8002544:	4770      	bx	lr
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	02020304 	.word	0x02020304
 800254c:	01010101 	.word	0x01010101
	...

08002558 <__clzdi2>:
 8002558:	b510      	push	{r4, lr}
 800255a:	2900      	cmp	r1, #0
 800255c:	d103      	bne.n	8002566 <__clzdi2+0xe>
 800255e:	f7ff ffdd 	bl	800251c <__clzsi2>
 8002562:	3020      	adds	r0, #32
 8002564:	e002      	b.n	800256c <__clzdi2+0x14>
 8002566:	0008      	movs	r0, r1
 8002568:	f7ff ffd8 	bl	800251c <__clzsi2>
 800256c:	bd10      	pop	{r4, pc}
 800256e:	46c0      	nop			; (mov r8, r8)

08002570 <__eqsf2>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	0042      	lsls	r2, r0, #1
 8002574:	0245      	lsls	r5, r0, #9
 8002576:	024e      	lsls	r6, r1, #9
 8002578:	004c      	lsls	r4, r1, #1
 800257a:	0fc3      	lsrs	r3, r0, #31
 800257c:	0a6d      	lsrs	r5, r5, #9
 800257e:	2001      	movs	r0, #1
 8002580:	0e12      	lsrs	r2, r2, #24
 8002582:	0a76      	lsrs	r6, r6, #9
 8002584:	0e24      	lsrs	r4, r4, #24
 8002586:	0fc9      	lsrs	r1, r1, #31
 8002588:	2aff      	cmp	r2, #255	; 0xff
 800258a:	d006      	beq.n	800259a <__eqsf2+0x2a>
 800258c:	2cff      	cmp	r4, #255	; 0xff
 800258e:	d003      	beq.n	8002598 <__eqsf2+0x28>
 8002590:	42a2      	cmp	r2, r4
 8002592:	d101      	bne.n	8002598 <__eqsf2+0x28>
 8002594:	42b5      	cmp	r5, r6
 8002596:	d006      	beq.n	80025a6 <__eqsf2+0x36>
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	2d00      	cmp	r5, #0
 800259c:	d1fc      	bne.n	8002598 <__eqsf2+0x28>
 800259e:	2cff      	cmp	r4, #255	; 0xff
 80025a0:	d1fa      	bne.n	8002598 <__eqsf2+0x28>
 80025a2:	2e00      	cmp	r6, #0
 80025a4:	d1f8      	bne.n	8002598 <__eqsf2+0x28>
 80025a6:	428b      	cmp	r3, r1
 80025a8:	d006      	beq.n	80025b8 <__eqsf2+0x48>
 80025aa:	2001      	movs	r0, #1
 80025ac:	2a00      	cmp	r2, #0
 80025ae:	d1f3      	bne.n	8002598 <__eqsf2+0x28>
 80025b0:	0028      	movs	r0, r5
 80025b2:	1e43      	subs	r3, r0, #1
 80025b4:	4198      	sbcs	r0, r3
 80025b6:	e7ef      	b.n	8002598 <__eqsf2+0x28>
 80025b8:	2000      	movs	r0, #0
 80025ba:	e7ed      	b.n	8002598 <__eqsf2+0x28>

080025bc <__gesf2>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	0042      	lsls	r2, r0, #1
 80025c0:	0245      	lsls	r5, r0, #9
 80025c2:	024e      	lsls	r6, r1, #9
 80025c4:	004c      	lsls	r4, r1, #1
 80025c6:	0fc3      	lsrs	r3, r0, #31
 80025c8:	0a6d      	lsrs	r5, r5, #9
 80025ca:	0e12      	lsrs	r2, r2, #24
 80025cc:	0a76      	lsrs	r6, r6, #9
 80025ce:	0e24      	lsrs	r4, r4, #24
 80025d0:	0fc8      	lsrs	r0, r1, #31
 80025d2:	2aff      	cmp	r2, #255	; 0xff
 80025d4:	d01b      	beq.n	800260e <__gesf2+0x52>
 80025d6:	2cff      	cmp	r4, #255	; 0xff
 80025d8:	d00e      	beq.n	80025f8 <__gesf2+0x3c>
 80025da:	2a00      	cmp	r2, #0
 80025dc:	d11b      	bne.n	8002616 <__gesf2+0x5a>
 80025de:	2c00      	cmp	r4, #0
 80025e0:	d101      	bne.n	80025e6 <__gesf2+0x2a>
 80025e2:	2e00      	cmp	r6, #0
 80025e4:	d01c      	beq.n	8002620 <__gesf2+0x64>
 80025e6:	2d00      	cmp	r5, #0
 80025e8:	d00c      	beq.n	8002604 <__gesf2+0x48>
 80025ea:	4283      	cmp	r3, r0
 80025ec:	d01c      	beq.n	8002628 <__gesf2+0x6c>
 80025ee:	2102      	movs	r1, #2
 80025f0:	1e58      	subs	r0, r3, #1
 80025f2:	4008      	ands	r0, r1
 80025f4:	3801      	subs	r0, #1
 80025f6:	bd70      	pop	{r4, r5, r6, pc}
 80025f8:	2e00      	cmp	r6, #0
 80025fa:	d122      	bne.n	8002642 <__gesf2+0x86>
 80025fc:	2a00      	cmp	r2, #0
 80025fe:	d1f4      	bne.n	80025ea <__gesf2+0x2e>
 8002600:	2d00      	cmp	r5, #0
 8002602:	d1f2      	bne.n	80025ea <__gesf2+0x2e>
 8002604:	2800      	cmp	r0, #0
 8002606:	d1f6      	bne.n	80025f6 <__gesf2+0x3a>
 8002608:	2001      	movs	r0, #1
 800260a:	4240      	negs	r0, r0
 800260c:	e7f3      	b.n	80025f6 <__gesf2+0x3a>
 800260e:	2d00      	cmp	r5, #0
 8002610:	d117      	bne.n	8002642 <__gesf2+0x86>
 8002612:	2cff      	cmp	r4, #255	; 0xff
 8002614:	d0f0      	beq.n	80025f8 <__gesf2+0x3c>
 8002616:	2c00      	cmp	r4, #0
 8002618:	d1e7      	bne.n	80025ea <__gesf2+0x2e>
 800261a:	2e00      	cmp	r6, #0
 800261c:	d1e5      	bne.n	80025ea <__gesf2+0x2e>
 800261e:	e7e6      	b.n	80025ee <__gesf2+0x32>
 8002620:	2000      	movs	r0, #0
 8002622:	2d00      	cmp	r5, #0
 8002624:	d0e7      	beq.n	80025f6 <__gesf2+0x3a>
 8002626:	e7e2      	b.n	80025ee <__gesf2+0x32>
 8002628:	42a2      	cmp	r2, r4
 800262a:	dc05      	bgt.n	8002638 <__gesf2+0x7c>
 800262c:	dbea      	blt.n	8002604 <__gesf2+0x48>
 800262e:	42b5      	cmp	r5, r6
 8002630:	d802      	bhi.n	8002638 <__gesf2+0x7c>
 8002632:	d3e7      	bcc.n	8002604 <__gesf2+0x48>
 8002634:	2000      	movs	r0, #0
 8002636:	e7de      	b.n	80025f6 <__gesf2+0x3a>
 8002638:	4243      	negs	r3, r0
 800263a:	4158      	adcs	r0, r3
 800263c:	0040      	lsls	r0, r0, #1
 800263e:	3801      	subs	r0, #1
 8002640:	e7d9      	b.n	80025f6 <__gesf2+0x3a>
 8002642:	2002      	movs	r0, #2
 8002644:	4240      	negs	r0, r0
 8002646:	e7d6      	b.n	80025f6 <__gesf2+0x3a>

08002648 <__lesf2>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	0042      	lsls	r2, r0, #1
 800264c:	0245      	lsls	r5, r0, #9
 800264e:	024e      	lsls	r6, r1, #9
 8002650:	004c      	lsls	r4, r1, #1
 8002652:	0fc3      	lsrs	r3, r0, #31
 8002654:	0a6d      	lsrs	r5, r5, #9
 8002656:	0e12      	lsrs	r2, r2, #24
 8002658:	0a76      	lsrs	r6, r6, #9
 800265a:	0e24      	lsrs	r4, r4, #24
 800265c:	0fc8      	lsrs	r0, r1, #31
 800265e:	2aff      	cmp	r2, #255	; 0xff
 8002660:	d00b      	beq.n	800267a <__lesf2+0x32>
 8002662:	2cff      	cmp	r4, #255	; 0xff
 8002664:	d00d      	beq.n	8002682 <__lesf2+0x3a>
 8002666:	2a00      	cmp	r2, #0
 8002668:	d11f      	bne.n	80026aa <__lesf2+0x62>
 800266a:	2c00      	cmp	r4, #0
 800266c:	d116      	bne.n	800269c <__lesf2+0x54>
 800266e:	2e00      	cmp	r6, #0
 8002670:	d114      	bne.n	800269c <__lesf2+0x54>
 8002672:	2000      	movs	r0, #0
 8002674:	2d00      	cmp	r5, #0
 8002676:	d010      	beq.n	800269a <__lesf2+0x52>
 8002678:	e009      	b.n	800268e <__lesf2+0x46>
 800267a:	2d00      	cmp	r5, #0
 800267c:	d10c      	bne.n	8002698 <__lesf2+0x50>
 800267e:	2cff      	cmp	r4, #255	; 0xff
 8002680:	d113      	bne.n	80026aa <__lesf2+0x62>
 8002682:	2e00      	cmp	r6, #0
 8002684:	d108      	bne.n	8002698 <__lesf2+0x50>
 8002686:	2a00      	cmp	r2, #0
 8002688:	d008      	beq.n	800269c <__lesf2+0x54>
 800268a:	4283      	cmp	r3, r0
 800268c:	d012      	beq.n	80026b4 <__lesf2+0x6c>
 800268e:	2102      	movs	r1, #2
 8002690:	1e58      	subs	r0, r3, #1
 8002692:	4008      	ands	r0, r1
 8002694:	3801      	subs	r0, #1
 8002696:	e000      	b.n	800269a <__lesf2+0x52>
 8002698:	2002      	movs	r0, #2
 800269a:	bd70      	pop	{r4, r5, r6, pc}
 800269c:	2d00      	cmp	r5, #0
 800269e:	d1f4      	bne.n	800268a <__lesf2+0x42>
 80026a0:	2800      	cmp	r0, #0
 80026a2:	d1fa      	bne.n	800269a <__lesf2+0x52>
 80026a4:	2001      	movs	r0, #1
 80026a6:	4240      	negs	r0, r0
 80026a8:	e7f7      	b.n	800269a <__lesf2+0x52>
 80026aa:	2c00      	cmp	r4, #0
 80026ac:	d1ed      	bne.n	800268a <__lesf2+0x42>
 80026ae:	2e00      	cmp	r6, #0
 80026b0:	d1eb      	bne.n	800268a <__lesf2+0x42>
 80026b2:	e7ec      	b.n	800268e <__lesf2+0x46>
 80026b4:	42a2      	cmp	r2, r4
 80026b6:	dc05      	bgt.n	80026c4 <__lesf2+0x7c>
 80026b8:	dbf2      	blt.n	80026a0 <__lesf2+0x58>
 80026ba:	42b5      	cmp	r5, r6
 80026bc:	d802      	bhi.n	80026c4 <__lesf2+0x7c>
 80026be:	d3ef      	bcc.n	80026a0 <__lesf2+0x58>
 80026c0:	2000      	movs	r0, #0
 80026c2:	e7ea      	b.n	800269a <__lesf2+0x52>
 80026c4:	4243      	negs	r3, r0
 80026c6:	4158      	adcs	r0, r3
 80026c8:	0040      	lsls	r0, r0, #1
 80026ca:	3801      	subs	r0, #1
 80026cc:	e7e5      	b.n	800269a <__lesf2+0x52>
 80026ce:	46c0      	nop			; (mov r8, r8)

080026d0 <pinMode>:
    #define DEBUG_PRINT(val) HAL_UART_Transmit(&huart2, val, sizeof(val), TIMEOUT)
#else
    #define DEBUG_PRINT(val)
#endif

void pinMode(uint8_t pin, uint32_t mode) {
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	0002      	movs	r2, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	1dfb      	adds	r3, r7, #7
 80026dc:	701a      	strb	r2, [r3, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026de:	240c      	movs	r4, #12
 80026e0:	193b      	adds	r3, r7, r4
 80026e2:	0018      	movs	r0, r3
 80026e4:	2314      	movs	r3, #20
 80026e6:	001a      	movs	r2, r3
 80026e8:	2100      	movs	r1, #0
 80026ea:	f005 fabf 	bl	8007c6c <memset>

    GPIO_InitStruct.Pin = pin;
 80026ee:	1dfb      	adds	r3, r7, #7
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = mode;
 80026f6:	193b      	adds	r3, r7, r4
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002702:	193a      	adds	r2, r7, r4
 8002704:	23a0      	movs	r3, #160	; 0xa0
 8002706:	05db      	lsls	r3, r3, #23
 8002708:	0011      	movs	r1, r2
 800270a:	0018      	movs	r0, r3
 800270c:	f001 fcd4 	bl	80040b8 <HAL_GPIO_Init>
}
 8002710:	46c0      	nop			; (mov r8, r8)
 8002712:	46bd      	mov	sp, r7
 8002714:	b009      	add	sp, #36	; 0x24
 8002716:	bd90      	pop	{r4, r7, pc}

08002718 <DHT_init>:

void DHT_init(DHT* _this, uint8_t pin, uint8_t type, uint8_t count) {
 8002718:	b590      	push	{r4, r7, lr}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	000c      	movs	r4, r1
 8002722:	0010      	movs	r0, r2
 8002724:	0019      	movs	r1, r3
 8002726:	1cfb      	adds	r3, r7, #3
 8002728:	1c22      	adds	r2, r4, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	1cbb      	adds	r3, r7, #2
 800272e:	1c02      	adds	r2, r0, #0
 8002730:	701a      	strb	r2, [r3, #0]
 8002732:	1c7b      	adds	r3, r7, #1
 8002734:	1c0a      	adds	r2, r1, #0
 8002736:	701a      	strb	r2, [r3, #0]
    _this->_pin = pin;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	1cfa      	adds	r2, r7, #3
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	715a      	strb	r2, [r3, #5]
    _this->_type = type;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1cba      	adds	r2, r7, #2
 8002744:	7812      	ldrb	r2, [r2, #0]
 8002746:	719a      	strb	r2, [r3, #6]
    _this->_count = count;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1c7a      	adds	r2, r7, #1
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	71da      	strb	r2, [r3, #7]
    _this->firstreading = true;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	731a      	strb	r2, [r3, #12]
}
 8002756:	46c0      	nop			; (mov r8, r8)
 8002758:	46bd      	mov	sp, r7
 800275a:	b003      	add	sp, #12
 800275c:	bd90      	pop	{r4, r7, pc}
	...

08002760 <DHT_begin>:

void DHT_begin(DHT* _this) {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

    // set up the pins!
    pinMode(_this->_pin, GPIO_MODE_INPUT);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	2100      	movs	r1, #0
 800276e:	0018      	movs	r0, r3
 8002770:	f7ff ffae 	bl	80026d0 <pinMode>
    _this->_lastreadtime = 0;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	2332      	movs	r3, #50	; 0x32
 800277c:	60fb      	str	r3, [r7, #12]
 * \param us the number of microseconds to pause (uint32_t)
 */
static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t us)
{
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 800277e:	4b0e      	ldr	r3, [pc, #56]	; (80027b8 <DHT_begin+0x58>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2200      	movs	r2, #0
 8002784:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <DHT_begin+0x58>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f9      	bhi.n	8002788 <DHT_begin+0x28>
}
 8002794:	46c0      	nop			; (mov r8, r8)
    delayMicroseconds(50);
    DEBUG_PRINT("DHT initialized");
 8002796:	4909      	ldr	r1, [pc, #36]	; (80027bc <DHT_begin+0x5c>)
 8002798:	4809      	ldr	r0, [pc, #36]	; (80027c0 <DHT_begin+0x60>)
 800279a:	2319      	movs	r3, #25
 800279c:	2210      	movs	r2, #16
 800279e:	f004 f9ad 	bl	8006afc <HAL_UART_Transmit>
    DEBUG_PRINT("DHT initialized");
 80027a2:	4906      	ldr	r1, [pc, #24]	; (80027bc <DHT_begin+0x5c>)
 80027a4:	4806      	ldr	r0, [pc, #24]	; (80027c0 <DHT_begin+0x60>)
 80027a6:	2319      	movs	r3, #25
 80027a8:	2210      	movs	r2, #16
 80027aa:	f004 f9a7 	bl	8006afc <HAL_UART_Transmit>

}
 80027ae:	46c0      	nop			; (mov r8, r8)
 80027b0:	46bd      	mov	sp, r7
 80027b2:	b004      	add	sp, #16
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	20000184 	.word	0x20000184
 80027bc:	080086b8 	.word	0x080086b8
 80027c0:	200001c4 	.word	0x200001c4

080027c4 <DHT_readTemperature>:
    }
    return 0;
}

//boolean S == Scale.  True == Farenheit; False == Celcius
float DHT_readTemperature(DHT* _this, bool S) {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	000a      	movs	r2, r1
 80027ce:	1cfb      	adds	r3, r7, #3
 80027d0:	701a      	strb	r2, [r3, #0]
    float f;
    switch (_this->_type) {
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	799b      	ldrb	r3, [r3, #6]
 80027d6:	2b0b      	cmp	r3, #11
 80027d8:	d006      	beq.n	80027e8 <DHT_readTemperature+0x24>
 80027da:	da00      	bge.n	80027de <DHT_readTemperature+0x1a>
 80027dc:	e0aa      	b.n	8002934 <DHT_readTemperature+0x170>
 80027de:	3b15      	subs	r3, #21
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d900      	bls.n	80027e6 <DHT_readTemperature+0x22>
 80027e4:	e0a6      	b.n	8002934 <DHT_readTemperature+0x170>
 80027e6:	e06a      	b.n	80028be <DHT_readTemperature+0xfa>
        case DHT11:
            f = _this->data[2];
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	789b      	ldrb	r3, [r3, #2]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fe fc61 	bl	80010b4 <__aeabi_ui2f>
 80027f2:	1c03      	adds	r3, r0, #0
 80027f4:	60fb      	str	r3, [r7, #12]
            if(_this->data[3]%128<10){
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	78db      	ldrb	r3, [r3, #3]
 80027fa:	227f      	movs	r2, #127	; 0x7f
 80027fc:	4013      	ands	r3, r2
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b09      	cmp	r3, #9
 8002802:	d814      	bhi.n	800282e <DHT_readTemperature+0x6a>
                f += _this->data[3]%128/10.0f;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	001a      	movs	r2, r3
 800280a:	237f      	movs	r3, #127	; 0x7f
 800280c:	4013      	ands	r3, r2
 800280e:	0018      	movs	r0, r3
 8002810:	f7fe fc02 	bl	8001018 <__aeabi_i2f>
 8002814:	1c03      	adds	r3, r0, #0
 8002816:	4949      	ldr	r1, [pc, #292]	; (800293c <DHT_readTemperature+0x178>)
 8002818:	1c18      	adds	r0, r3, #0
 800281a:	f7fd ffdb 	bl	80007d4 <__aeabi_fdiv>
 800281e:	1c03      	adds	r3, r0, #0
 8002820:	1c19      	adds	r1, r3, #0
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7fd fe38 	bl	8000498 <__aeabi_fadd>
 8002828:	1c03      	adds	r3, r0, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e02f      	b.n	800288e <DHT_readTemperature+0xca>
            }else if(_this->data[3]%128<100){
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	78db      	ldrb	r3, [r3, #3]
 8002832:	227f      	movs	r2, #127	; 0x7f
 8002834:	4013      	ands	r3, r2
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b63      	cmp	r3, #99	; 0x63
 800283a:	d814      	bhi.n	8002866 <DHT_readTemperature+0xa2>
                f += _this->data[3]%128/100.0f;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	001a      	movs	r2, r3
 8002842:	237f      	movs	r3, #127	; 0x7f
 8002844:	4013      	ands	r3, r2
 8002846:	0018      	movs	r0, r3
 8002848:	f7fe fbe6 	bl	8001018 <__aeabi_i2f>
 800284c:	1c03      	adds	r3, r0, #0
 800284e:	493c      	ldr	r1, [pc, #240]	; (8002940 <DHT_readTemperature+0x17c>)
 8002850:	1c18      	adds	r0, r3, #0
 8002852:	f7fd ffbf 	bl	80007d4 <__aeabi_fdiv>
 8002856:	1c03      	adds	r3, r0, #0
 8002858:	1c19      	adds	r1, r3, #0
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7fd fe1c 	bl	8000498 <__aeabi_fadd>
 8002860:	1c03      	adds	r3, r0, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e013      	b.n	800288e <DHT_readTemperature+0xca>
            }else{
                f += _this->data[3]%128/1000.0f;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	78db      	ldrb	r3, [r3, #3]
 800286a:	001a      	movs	r2, r3
 800286c:	237f      	movs	r3, #127	; 0x7f
 800286e:	4013      	ands	r3, r2
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe fbd1 	bl	8001018 <__aeabi_i2f>
 8002876:	1c03      	adds	r3, r0, #0
 8002878:	4932      	ldr	r1, [pc, #200]	; (8002944 <DHT_readTemperature+0x180>)
 800287a:	1c18      	adds	r0, r3, #0
 800287c:	f7fd ffaa 	bl	80007d4 <__aeabi_fdiv>
 8002880:	1c03      	adds	r3, r0, #0
 8002882:	1c19      	adds	r1, r3, #0
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7fd fe07 	bl	8000498 <__aeabi_fadd>
 800288a:	1c03      	adds	r3, r0, #0
 800288c:	60fb      	str	r3, [r7, #12]
            }
            if(_this->data[3]>=128){ // The left-most digit indicate the negative sign.
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	78db      	ldrb	r3, [r3, #3]
 8002892:	b25b      	sxtb	r3, r3
 8002894:	2b00      	cmp	r3, #0
 8002896:	da04      	bge.n	80028a2 <DHT_readTemperature+0xde>
                f = -f;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	0612      	lsls	r2, r2, #24
 800289e:	4053      	eors	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
            }
            if (S) {
 80028a2:	1cfb      	adds	r3, r7, #3
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <DHT_readTemperature+0xf6>
                f = DHT_convertCtoF(_this, f);
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1c11      	adds	r1, r2, #0
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 f849 	bl	8002948 <DHT_convertCtoF>
 80028b6:	1c03      	adds	r3, r0, #0
 80028b8:	60fb      	str	r3, [r7, #12]
            }

            return f;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	e03a      	b.n	8002934 <DHT_readTemperature+0x170>
        case DHT22:
        case DHT21:
            f = _this->data[2] & 0x7F;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	789b      	ldrb	r3, [r3, #2]
 80028c2:	001a      	movs	r2, r3
 80028c4:	237f      	movs	r3, #127	; 0x7f
 80028c6:	4013      	ands	r3, r2
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7fe fba5 	bl	8001018 <__aeabi_i2f>
 80028ce:	1c03      	adds	r3, r0, #0
 80028d0:	60fb      	str	r3, [r7, #12]
            f *= 256;
 80028d2:	2187      	movs	r1, #135	; 0x87
 80028d4:	05c9      	lsls	r1, r1, #23
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f7fe f894 	bl	8000a04 <__aeabi_fmul>
 80028dc:	1c03      	adds	r3, r0, #0
 80028de:	60fb      	str	r3, [r7, #12]
            f += _this->data[3];
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	78db      	ldrb	r3, [r3, #3]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fe fb97 	bl	8001018 <__aeabi_i2f>
 80028ea:	1c03      	adds	r3, r0, #0
 80028ec:	1c19      	adds	r1, r3, #0
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7fd fdd2 	bl	8000498 <__aeabi_fadd>
 80028f4:	1c03      	adds	r3, r0, #0
 80028f6:	60fb      	str	r3, [r7, #12]
            f /= 10;
 80028f8:	4910      	ldr	r1, [pc, #64]	; (800293c <DHT_readTemperature+0x178>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f7fd ff6a 	bl	80007d4 <__aeabi_fdiv>
 8002900:	1c03      	adds	r3, r0, #0
 8002902:	60fb      	str	r3, [r7, #12]
            if (_this->data[2] & 0x80) {
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	789b      	ldrb	r3, [r3, #2]
 8002908:	b25b      	sxtb	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	da04      	bge.n	8002918 <DHT_readTemperature+0x154>
                f *= -1;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	0612      	lsls	r2, r2, #24
 8002914:	4053      	eors	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
            }
            if (S) {
 8002918:	1cfb      	adds	r3, r7, #3
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <DHT_readTemperature+0x16c>
                f = DHT_convertCtoF(_this, f);
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	1c11      	adds	r1, r2, #0
 8002926:	0018      	movs	r0, r3
 8002928:	f000 f80e 	bl	8002948 <DHT_convertCtoF>
 800292c:	1c03      	adds	r3, r0, #0
 800292e:	60fb      	str	r3, [r7, #12]
            }

            return f;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	e7ff      	b.n	8002934 <DHT_readTemperature+0x170>
    }
}
 8002934:	1c18      	adds	r0, r3, #0
 8002936:	46bd      	mov	sp, r7
 8002938:	b004      	add	sp, #16
 800293a:	bd80      	pop	{r7, pc}
 800293c:	41200000 	.word	0x41200000
 8002940:	42c80000 	.word	0x42c80000
 8002944:	447a0000 	.word	0x447a0000

08002948 <DHT_convertCtoF>:

float DHT_convertCtoF(DHT* _this, float c) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    return c * 9 / 5 + 32;
 8002952:	490a      	ldr	r1, [pc, #40]	; (800297c <DHT_convertCtoF+0x34>)
 8002954:	6838      	ldr	r0, [r7, #0]
 8002956:	f7fe f855 	bl	8000a04 <__aeabi_fmul>
 800295a:	1c03      	adds	r3, r0, #0
 800295c:	4908      	ldr	r1, [pc, #32]	; (8002980 <DHT_convertCtoF+0x38>)
 800295e:	1c18      	adds	r0, r3, #0
 8002960:	f7fd ff38 	bl	80007d4 <__aeabi_fdiv>
 8002964:	1c03      	adds	r3, r0, #0
 8002966:	2184      	movs	r1, #132	; 0x84
 8002968:	05c9      	lsls	r1, r1, #23
 800296a:	1c18      	adds	r0, r3, #0
 800296c:	f7fd fd94 	bl	8000498 <__aeabi_fadd>
 8002970:	1c03      	adds	r3, r0, #0
}
 8002972:	1c18      	adds	r0, r3, #0
 8002974:	46bd      	mov	sp, r7
 8002976:	b002      	add	sp, #8
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	41100000 	.word	0x41100000
 8002980:	40a00000 	.word	0x40a00000

08002984 <DHT_readHumidity>:

float DHT_readHumidity(DHT* _this) {
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
    float f;
    switch (_this->_type) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	799b      	ldrb	r3, [r3, #6]
 8002990:	2b0b      	cmp	r3, #11
 8002992:	d004      	beq.n	800299e <DHT_readHumidity+0x1a>
 8002994:	db2e      	blt.n	80029f4 <DHT_readHumidity+0x70>
 8002996:	3b15      	subs	r3, #21
 8002998:	2b01      	cmp	r3, #1
 800299a:	d82b      	bhi.n	80029f4 <DHT_readHumidity+0x70>
 800299c:	e008      	b.n	80029b0 <DHT_readHumidity+0x2c>
        case DHT11:
            f = _this->data[0];
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7fe fb86 	bl	80010b4 <__aeabi_ui2f>
 80029a8:	1c03      	adds	r3, r0, #0
 80029aa:	60fb      	str	r3, [r7, #12]
            return f;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	e021      	b.n	80029f4 <DHT_readHumidity+0x70>
        case DHT22:
        case DHT21:
            f = _this->data[0];
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	0018      	movs	r0, r3
 80029b6:	f7fe fb7d 	bl	80010b4 <__aeabi_ui2f>
 80029ba:	1c03      	adds	r3, r0, #0
 80029bc:	60fb      	str	r3, [r7, #12]
            f *= 256;
 80029be:	2187      	movs	r1, #135	; 0x87
 80029c0:	05c9      	lsls	r1, r1, #23
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f7fe f81e 	bl	8000a04 <__aeabi_fmul>
 80029c8:	1c03      	adds	r3, r0, #0
 80029ca:	60fb      	str	r3, [r7, #12]
            f += _this->data[1];
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	785b      	ldrb	r3, [r3, #1]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe fb21 	bl	8001018 <__aeabi_i2f>
 80029d6:	1c03      	adds	r3, r0, #0
 80029d8:	1c19      	adds	r1, r3, #0
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7fd fd5c 	bl	8000498 <__aeabi_fadd>
 80029e0:	1c03      	adds	r3, r0, #0
 80029e2:	60fb      	str	r3, [r7, #12]
            f /= 10;
 80029e4:	4905      	ldr	r1, [pc, #20]	; (80029fc <DHT_readHumidity+0x78>)
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7fd fef4 	bl	80007d4 <__aeabi_fdiv>
 80029ec:	1c03      	adds	r3, r0, #0
 80029ee:	60fb      	str	r3, [r7, #12]
            return f;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	e7ff      	b.n	80029f4 <DHT_readHumidity+0x70>
    }
}
 80029f4:	1c18      	adds	r0, r3, #0
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b004      	add	sp, #16
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	41200000 	.word	0x41200000

08002a00 <DHT_read>:


bool DHT_read(DHT* _this) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	pinMode(_this->_pin, GPIO_MODE_OUTPUT_PP);  // set the pin as output
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	795b      	ldrb	r3, [r3, #5]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7ff fe5e 	bl	80026d0 <pinMode>
	  HAL_GPIO_WritePin(GPIOA, _this->_pin, 0);   // pull the pin low
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	795b      	ldrb	r3, [r3, #5]
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	23a0      	movs	r3, #160	; 0xa0
 8002a1c:	05db      	lsls	r3, r3, #23
 8002a1e:	2200      	movs	r2, #0
 8002a20:	0018      	movs	r0, r3
 8002a22:	f001 fcdc 	bl	80043de <HAL_GPIO_WritePin>
 8002a26:	4b83      	ldr	r3, [pc, #524]	; (8002c34 <DHT_read+0x234>)
 8002a28:	61fb      	str	r3, [r7, #28]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8002a2a:	4b83      	ldr	r3, [pc, #524]	; (8002c38 <DHT_read+0x238>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	4b80      	ldr	r3, [pc, #512]	; (8002c38 <DHT_read+0x238>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	69fa      	ldr	r2, [r7, #28]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f9      	bhi.n	8002a34 <DHT_read+0x34>
}
 8002a40:	46c0      	nop			; (mov r8, r8)

	  delayMicroseconds(18000);   // wait for 18ms

	  HAL_GPIO_WritePin(GPIOA, _this->_pin, 1);   // pull the pin high
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	795b      	ldrb	r3, [r3, #5]
 8002a46:	b299      	uxth	r1, r3
 8002a48:	23a0      	movs	r3, #160	; 0xa0
 8002a4a:	05db      	lsls	r3, r3, #23
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f001 fcc5 	bl	80043de <HAL_GPIO_WritePin>
 8002a54:	231e      	movs	r3, #30
 8002a56:	623b      	str	r3, [r7, #32]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8002a58:	4b77      	ldr	r3, [pc, #476]	; (8002c38 <DHT_read+0x238>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	4b75      	ldr	r3, [pc, #468]	; (8002c38 <DHT_read+0x238>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	6a3a      	ldr	r2, [r7, #32]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d8f9      	bhi.n	8002a62 <DHT_read+0x62>
}
 8002a6e:	46c0      	nop			; (mov r8, r8)
	  delayMicroseconds(30);   // wait for 30us
	  pinMode(_this->_pin, GPIO_MODE_INPUT);    // set as input
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	795b      	ldrb	r3, [r3, #5]
 8002a74:	2100      	movs	r1, #0
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7ff fe2a 	bl	80026d0 <pinMode>
    uint8_t Response = 0;
 8002a7c:	2329      	movs	r3, #41	; 0x29
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
 8002a84:	2328      	movs	r3, #40	; 0x28
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8002a88:	4b6b      	ldr	r3, [pc, #428]	; (8002c38 <DHT_read+0x238>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8002a90:	46c0      	nop			; (mov r8, r8)
 8002a92:	4b69      	ldr	r3, [pc, #420]	; (8002c38 <DHT_read+0x238>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d8f9      	bhi.n	8002a92 <DHT_read+0x92>
}
 8002a9e:	46c0      	nop			; (mov r8, r8)
    delayMicroseconds(40);
  if (!(HAL_GPIO_ReadPin(GPIOA, _this->_pin)))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	795b      	ldrb	r3, [r3, #5]
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	23a0      	movs	r3, #160	; 0xa0
 8002aa8:	05db      	lsls	r3, r3, #23
 8002aaa:	0011      	movs	r1, r2
 8002aac:	0018      	movs	r0, r3
 8002aae:	f001 fc79 	bl	80043a4 <HAL_GPIO_ReadPin>
 8002ab2:	1e03      	subs	r3, r0, #0
 8002ab4:	d121      	bne.n	8002afa <DHT_read+0xfa>
 8002ab6:	2350      	movs	r3, #80	; 0x50
 8002ab8:	61bb      	str	r3, [r7, #24]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <DHT_read+0x238>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8002ac2:	46c0      	nop			; (mov r8, r8)
 8002ac4:	4b5c      	ldr	r3, [pc, #368]	; (8002c38 <DHT_read+0x238>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d8f9      	bhi.n	8002ac4 <DHT_read+0xc4>
}
 8002ad0:	46c0      	nop			; (mov r8, r8)
  {
    delayMicroseconds(80);
    if ((HAL_GPIO_ReadPin(GPIOA, _this->_pin))) Response = 1;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	795b      	ldrb	r3, [r3, #5]
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	23a0      	movs	r3, #160	; 0xa0
 8002ada:	05db      	lsls	r3, r3, #23
 8002adc:	0011      	movs	r1, r2
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f001 fc60 	bl	80043a4 <HAL_GPIO_ReadPin>
 8002ae4:	1e03      	subs	r3, r0, #0
 8002ae6:	d004      	beq.n	8002af2 <DHT_read+0xf2>
 8002ae8:	2329      	movs	r3, #41	; 0x29
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e003      	b.n	8002afa <DHT_read+0xfa>
    else Response = -1;
 8002af2:	2329      	movs	r3, #41	; 0x29
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	22ff      	movs	r2, #255	; 0xff
 8002af8:	701a      	strb	r2, [r3, #0]
  }
  while ((HAL_GPIO_ReadPin(GPIOA, _this->_pin)));   // wait for the pin to go low
 8002afa:	46c0      	nop			; (mov r8, r8)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	795b      	ldrb	r3, [r3, #5]
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	23a0      	movs	r3, #160	; 0xa0
 8002b04:	05db      	lsls	r3, r3, #23
 8002b06:	0011      	movs	r1, r2
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f001 fc4b 	bl	80043a4 <HAL_GPIO_ReadPin>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d1f4      	bne.n	8002afc <DHT_read+0xfc>
    uint8_t data[5];
    for (size_t l = 0; l < 5; l++)
 8002b12:	2300      	movs	r3, #0
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	e06f      	b.n	8002bf8 <DHT_read+0x1f8>
    {
        uint8_t i,j;
        for (j=0;j<8;j++)
 8002b18:	232a      	movs	r3, #42	; 0x2a
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	e05b      	b.n	8002bda <DHT_read+0x1da>
        {
            while (!(HAL_GPIO_ReadPin (GPIOA, _this->_pin)));   // wait for the pin to go high
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	795b      	ldrb	r3, [r3, #5]
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	23a0      	movs	r3, #160	; 0xa0
 8002b2c:	05db      	lsls	r3, r3, #23
 8002b2e:	0011      	movs	r1, r2
 8002b30:	0018      	movs	r0, r3
 8002b32:	f001 fc37 	bl	80043a4 <HAL_GPIO_ReadPin>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d0f4      	beq.n	8002b24 <DHT_read+0x124>
 8002b3a:	2328      	movs	r3, #40	; 0x28
 8002b3c:	617b      	str	r3, [r7, #20]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	; (8002c38 <DHT_read+0x238>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	4b3b      	ldr	r3, [pc, #236]	; (8002c38 <DHT_read+0x238>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d8f9      	bhi.n	8002b48 <DHT_read+0x148>
}
 8002b54:	46c0      	nop			; (mov r8, r8)
            delayMicroseconds (40);   // wait for 40 us
            if (!(HAL_GPIO_ReadPin (GPIOA, _this->_pin)))   // if the pin is low
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	795b      	ldrb	r3, [r3, #5]
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	23a0      	movs	r3, #160	; 0xa0
 8002b5e:	05db      	lsls	r3, r3, #23
 8002b60:	0011      	movs	r1, r2
 8002b62:	0018      	movs	r0, r3
 8002b64:	f001 fc1e 	bl	80043a4 <HAL_GPIO_ReadPin>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d113      	bne.n	8002b94 <DHT_read+0x194>
            {
                i&= ~(1<<(7-j));   // write 0
 8002b6c:	232a      	movs	r3, #42	; 0x2a
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2207      	movs	r2, #7
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2201      	movs	r2, #1
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	212b      	movs	r1, #43	; 0x2b
 8002b84:	187a      	adds	r2, r7, r1
 8002b86:	7812      	ldrb	r2, [r2, #0]
 8002b88:	b252      	sxtb	r2, r2
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	b25a      	sxtb	r2, r3
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e010      	b.n	8002bb6 <DHT_read+0x1b6>
            }
            else i|= (1<<(7-j));  // if the pin is high, write 1
 8002b94:	232a      	movs	r3, #42	; 0x2a
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2207      	movs	r2, #7
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	0013      	movs	r3, r2
 8002ba4:	b25a      	sxtb	r2, r3
 8002ba6:	212b      	movs	r1, #43	; 0x2b
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b25a      	sxtb	r2, r3
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	701a      	strb	r2, [r3, #0]
            while ((HAL_GPIO_ReadPin (GPIOA, _this->_pin)));  // wait for the pin to go low
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	795b      	ldrb	r3, [r3, #5]
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	23a0      	movs	r3, #160	; 0xa0
 8002bc0:	05db      	lsls	r3, r3, #23
 8002bc2:	0011      	movs	r1, r2
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f001 fbed 	bl	80043a4 <HAL_GPIO_ReadPin>
 8002bca:	1e03      	subs	r3, r0, #0
 8002bcc:	d1f4      	bne.n	8002bb8 <DHT_read+0x1b8>
        for (j=0;j<8;j++)
 8002bce:	212a      	movs	r1, #42	; 0x2a
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	781a      	ldrb	r2, [r3, #0]
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	3201      	adds	r2, #1
 8002bd8:	701a      	strb	r2, [r3, #0]
 8002bda:	232a      	movs	r3, #42	; 0x2a
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b07      	cmp	r3, #7
 8002be2:	d99e      	bls.n	8002b22 <DHT_read+0x122>
        }
        _this->data[l] = i;
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	222b      	movs	r2, #43	; 0x2b
 8002bec:	18ba      	adds	r2, r7, r2
 8002bee:	7812      	ldrb	r2, [r2, #0]
 8002bf0:	701a      	strb	r2, [r3, #0]
    for (size_t l = 0; l < 5; l++)
 8002bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d98c      	bls.n	8002b18 <DHT_read+0x118>
    }
    // check we read 40 bits and that the checksum matches
    if ((_this->data[4] == ((_this->data[0] + _this->data[1] + _this->data[2] + _this->data[3]) & 0xFF))) {
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	791b      	ldrb	r3, [r3, #4]
 8002c02:	0019      	movs	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	001a      	movs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	785b      	ldrb	r3, [r3, #1]
 8002c0e:	18d3      	adds	r3, r2, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	7892      	ldrb	r2, [r2, #2]
 8002c14:	189b      	adds	r3, r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	78d2      	ldrb	r2, [r2, #3]
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 8002c1e:	4013      	ands	r3, r2
 8002c20:	4299      	cmp	r1, r3
 8002c22:	d101      	bne.n	8002c28 <DHT_read+0x228>
        return true;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <DHT_read+0x22a>
    }


    return false;
 8002c28:	2300      	movs	r3, #0

}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b00c      	add	sp, #48	; 0x30
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	00004650 	.word	0x00004650
 8002c38:	20000184 	.word	0x20000184

08002c3c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b089      	sub	sp, #36	; 0x24
 8002c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	240c      	movs	r4, #12
 8002c44:	193b      	adds	r3, r7, r4
 8002c46:	0018      	movs	r0, r3
 8002c48:	2314      	movs	r3, #20
 8002c4a:	001a      	movs	r2, r3
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	f005 f80d 	bl	8007c6c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <MX_GPIO_Init+0xb8>)
 8002c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c56:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <MX_GPIO_Init+0xb8>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <MX_GPIO_Init+0xb8>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6a:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <MX_GPIO_Init+0xb8>)
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <MX_GPIO_Init+0xb8>)
 8002c70:	2102      	movs	r1, #2
 8002c72:	430a      	orrs	r2, r1
 8002c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c76:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <MX_GPIO_Init+0xb8>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002c82:	23a0      	movs	r3, #160	; 0xa0
 8002c84:	05db      	lsls	r3, r3, #23
 8002c86:	2200      	movs	r2, #0
 8002c88:	2110      	movs	r1, #16
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f001 fba7 	bl	80043de <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002c90:	193b      	adds	r3, r7, r4
 8002c92:	2210      	movs	r2, #16
 8002c94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c96:	193b      	adds	r3, r7, r4
 8002c98:	2201      	movs	r2, #1
 8002c9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	193b      	adds	r3, r7, r4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	193a      	adds	r2, r7, r4
 8002caa:	23a0      	movs	r3, #160	; 0xa0
 8002cac:	05db      	lsls	r3, r3, #23
 8002cae:	0011      	movs	r1, r2
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	f001 fa01 	bl	80040b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cb6:	0021      	movs	r1, r4
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	00d2      	lsls	r2, r2, #3
 8002cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cc0:	187b      	adds	r3, r7, r1
 8002cc2:	2288      	movs	r2, #136	; 0x88
 8002cc4:	0352      	lsls	r2, r2, #13
 8002cc6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	2200      	movs	r2, #0
 8002ccc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cce:	187a      	adds	r2, r7, r1
 8002cd0:	23a0      	movs	r3, #160	; 0xa0
 8002cd2:	05db      	lsls	r3, r3, #23
 8002cd4:	0011      	movs	r1, r2
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f001 f9ee 	bl	80040b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2007      	movs	r0, #7
 8002ce2:	f001 f92f 	bl	8003f44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ce6:	2007      	movs	r0, #7
 8002ce8:	f001 f941 	bl	8003f6e <HAL_NVIC_EnableIRQ>

}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b009      	add	sp, #36	; 0x24
 8002cf2:	bd90      	pop	{r4, r7, pc}
 8002cf4:	40021000 	.word	0x40021000

08002cf8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <MX_I2C1_Init+0x78>)
 8002d00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d04:	4a1b      	ldr	r2, [pc, #108]	; (8002d74 <MX_I2C1_Init+0x7c>)
 8002d06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d10:	2201      	movs	r2, #1
 8002d12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d34:	0018      	movs	r0, r3
 8002d36:	f001 fb8b 	bl	8004450 <HAL_I2C_Init>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d3e:	f000 fa76 	bl	800322e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d44:	2100      	movs	r1, #0
 8002d46:	0018      	movs	r0, r3
 8002d48:	f001 ffc6 	bl	8004cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8002d4c:	1e03      	subs	r3, r0, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d50:	f000 fa6d 	bl	800322e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <MX_I2C1_Init+0x74>)
 8002d56:	2100      	movs	r1, #0
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f002 f809 	bl	8004d70 <HAL_I2CEx_ConfigDigitalFilter>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d001      	beq.n	8002d66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f000 fa64 	bl	800322e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d66:	46c0      	nop			; (mov r8, r8)
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	20000094 	.word	0x20000094
 8002d70:	40005400 	.word	0x40005400
 8002d74:	00303d5b 	.word	0x00303d5b

08002d78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d80:	240c      	movs	r4, #12
 8002d82:	193b      	adds	r3, r7, r4
 8002d84:	0018      	movs	r0, r3
 8002d86:	2314      	movs	r3, #20
 8002d88:	001a      	movs	r2, r3
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	f004 ff6e 	bl	8007c6c <memset>
  if(i2cHandle->Instance==I2C1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a18      	ldr	r2, [pc, #96]	; (8002df8 <HAL_I2C_MspInit+0x80>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d129      	bne.n	8002dee <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_I2C_MspInit+0x84>)
 8002d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d9e:	4b17      	ldr	r3, [pc, #92]	; (8002dfc <HAL_I2C_MspInit+0x84>)
 8002da0:	2102      	movs	r1, #2
 8002da2:	430a      	orrs	r2, r1
 8002da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da6:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <HAL_I2C_MspInit+0x84>)
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002daa:	2202      	movs	r2, #2
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002db2:	193b      	adds	r3, r7, r4
 8002db4:	22c0      	movs	r2, #192	; 0xc0
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dba:	0021      	movs	r1, r4
 8002dbc:	187b      	adds	r3, r7, r1
 8002dbe:	2212      	movs	r2, #18
 8002dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	187b      	adds	r3, r7, r1
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <HAL_I2C_MspInit+0x88>)
 8002dd8:	0019      	movs	r1, r3
 8002dda:	0010      	movs	r0, r2
 8002ddc:	f001 f96c 	bl	80040b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <HAL_I2C_MspInit+0x84>)
 8002de2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_I2C_MspInit+0x84>)
 8002de6:	2180      	movs	r1, #128	; 0x80
 8002de8:	0389      	lsls	r1, r1, #14
 8002dea:	430a      	orrs	r2, r1
 8002dec:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	46bd      	mov	sp, r7
 8002df2:	b009      	add	sp, #36	; 0x24
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	40005400 	.word	0x40005400
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	50000400 	.word	0x50000400

08002e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b093      	sub	sp, #76	; 0x4c
 8002e08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e0a:	f000 ff5b 	bl	8003cc4 <HAL_Init>

  /* USER CODE BEGIN Init */
  DHT_init(&dht, GPIO_PIN_4, DHT11, COUNT);
 8002e0e:	4886      	ldr	r0, [pc, #536]	; (8003028 <main+0x224>)
 8002e10:	2306      	movs	r3, #6
 8002e12:	220b      	movs	r2, #11
 8002e14:	2110      	movs	r1, #16
 8002e16:	f7ff fc7f 	bl	8002718 <DHT_init>
  rgb_lcd_init(&lcd);
 8002e1a:	4b84      	ldr	r3, [pc, #528]	; (800302c <main+0x228>)
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f000 fa2f 	bl	8003280 <rgb_lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e22:	f000 f921 	bl	8003068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e26:	f7ff ff09 	bl	8002c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002e2a:	f7ff ff65 	bl	8002cf8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8002e2e:	f000 fd13 	bl	8003858 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002e32:	f000 fd99 	bl	8003968 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8002e36:	f000 fe9f 	bl	8003b78 <MX_USART2_UART_Init>
  MX_TIM21_Init();
 8002e3a:	f000 fdd1 	bl	80039e0 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, dht._pin, GPIO_PIN_SET);
 8002e3e:	4b7a      	ldr	r3, [pc, #488]	; (8003028 <main+0x224>)
 8002e40:	795b      	ldrb	r3, [r3, #5]
 8002e42:	b299      	uxth	r1, r3
 8002e44:	23a0      	movs	r3, #160	; 0xa0
 8002e46:	05db      	lsls	r3, r3, #23
 8002e48:	2201      	movs	r2, #1
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f001 fac7 	bl	80043de <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002e50:	4b77      	ldr	r3, [pc, #476]	; (8003030 <main+0x22c>)
 8002e52:	2100      	movs	r1, #0
 8002e54:	0018      	movs	r0, r3
 8002e56:	f003 f861 	bl	8005f1c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002e5a:	4b75      	ldr	r3, [pc, #468]	; (8003030 <main+0x22c>)
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f003 f85c 	bl	8005f1c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim21);
 8002e64:	4b73      	ldr	r3, [pc, #460]	; (8003034 <main+0x230>)
 8002e66:	0018      	movs	r0, r3
 8002e68:	f002 ff5a 	bl	8005d20 <HAL_TIM_Base_Start>
  DHT_begin(&dht);
 8002e6c:	4b6e      	ldr	r3, [pc, #440]	; (8003028 <main+0x224>)
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f7ff fc76 	bl	8002760 <DHT_begin>
  rgb_lcd_begin(&lcd, 16, 2, LCD_5x8DOTS, &hi2c1);
 8002e74:	486d      	ldr	r0, [pc, #436]	; (800302c <main+0x228>)
 8002e76:	4b70      	ldr	r3, [pc, #448]	; (8003038 <main+0x234>)
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	2110      	movs	r1, #16
 8002e80:	f000 fa18 	bl	80032b4 <rgb_lcd_begin>
  rgb_lcd_createChar(&lcd, 0, degrees);
 8002e84:	4a6d      	ldr	r2, [pc, #436]	; (800303c <main+0x238>)
 8002e86:	4b69      	ldr	r3, [pc, #420]	; (800302c <main+0x228>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f000 fb62 	bl	8003554 <rgb_lcd_createChar>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    DHT_read(&dht);
 8002e90:	4b65      	ldr	r3, [pc, #404]	; (8003028 <main+0x224>)
 8002e92:	0018      	movs	r0, r3
 8002e94:	f7ff fdb4 	bl	8002a00 <DHT_read>
    float humidity = DHT_readHumidity(&dht);
 8002e98:	4b63      	ldr	r3, [pc, #396]	; (8003028 <main+0x224>)
 8002e9a:	0018      	movs	r0, r3
 8002e9c:	f7ff fd72 	bl	8002984 <DHT_readHumidity>
 8002ea0:	1c03      	adds	r3, r0, #0
 8002ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    float temperature = DHT_readTemperature(&dht, S);
 8002ea4:	4b66      	ldr	r3, [pc, #408]	; (8003040 <main+0x23c>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4b5f      	ldr	r3, [pc, #380]	; (8003028 <main+0x224>)
 8002eac:	0011      	movs	r1, r2
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f7ff fc88 	bl	80027c4 <DHT_readTemperature>
 8002eb4:	1c03      	adds	r3, r0, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (isnan(humidity) || isnan(temperature))
 8002eb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ebc:	f7fe f876 	bl	8000fac <__aeabi_fcmpun>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d000      	beq.n	8002ec6 <main+0xc2>
 8002ec4:	e0ad      	b.n	8003022 <main+0x21e>
 8002ec6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002eca:	f7fe f86f 	bl	8000fac <__aeabi_fcmpun>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d000      	beq.n	8002ed4 <main+0xd0>
 8002ed2:	e0a6      	b.n	8003022 <main+0x21e>
    {
      continue;
    }

    double integral;
    double fractional = modf(temperature, &integral);
 8002ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ed6:	f7ff fa9f 	bl	8002418 <__aeabi_f2d>
 8002eda:	2320      	movs	r3, #32
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	001a      	movs	r2, r3
 8002ee0:	f004 fecc 	bl	8007c7c <modf>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	633a      	str	r2, [r7, #48]	; 0x30
 8002eea:	637b      	str	r3, [r7, #52]	; 0x34

    rgb_lcd_clear(&lcd);
 8002eec:	4b4f      	ldr	r3, [pc, #316]	; (800302c <main+0x228>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 fac8 	bl	8003484 <rgb_lcd_clear>
    char s1[16] = {'\0'};
 8002ef4:	2410      	movs	r4, #16
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	3304      	adds	r3, #4
 8002efe:	220c      	movs	r2, #12
 8002f00:	2100      	movs	r1, #0
 8002f02:	0018      	movs	r0, r3
 8002f04:	f004 feb2 	bl	8007c6c <memset>
    uint32_t len1 = snprintf(s1, sizeof(s1), "Humidity: %d%%", (int)(humidity));
 8002f08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f0a:	f7fe f865 	bl	8000fd8 <__aeabi_f2iz>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	4a4c      	ldr	r2, [pc, #304]	; (8003044 <main+0x240>)
 8002f12:	1938      	adds	r0, r7, r4
 8002f14:	2110      	movs	r1, #16
 8002f16:	f004 ff19 	bl	8007d4c <sniprintf>
 8002f1a:	0003      	movs	r3, r0
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    rgb_lcd_setCursor(&lcd, 0, 0);
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <main+0x228>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	2100      	movs	r1, #0
 8002f24:	0018      	movs	r0, r3
 8002f26:	f000 facb 	bl	80034c0 <rgb_lcd_setCursor>
    rgb_lcd_print(&lcd, s1, len1);
 8002f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f2c:	1939      	adds	r1, r7, r4
 8002f2e:	4b3f      	ldr	r3, [pc, #252]	; (800302c <main+0x228>)
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 fb7f 	bl	8003634 <rgb_lcd_print>
    char s2[16] = {'\0'};
 8002f36:	003b      	movs	r3, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	220c      	movs	r2, #12
 8002f40:	2100      	movs	r1, #0
 8002f42:	0018      	movs	r0, r3
 8002f44:	f004 fe92 	bl	8007c6c <memset>
    uint32_t len2 = snprintf(s2, sizeof(s2), "Temp.: %d.%d", (int)integral, (int)(fractional * 10));
 8002f48:	6a3a      	ldr	r2, [r7, #32]
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	0010      	movs	r0, r2
 8002f4e:	0019      	movs	r1, r3
 8002f50:	f7ff fa2c 	bl	80023ac <__aeabi_d2iz>
 8002f54:	0004      	movs	r4, r0
 8002f56:	2200      	movs	r2, #0
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <main+0x244>)
 8002f5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002f5e:	f7fe fc27 	bl	80017b0 <__aeabi_dmul>
 8002f62:	0002      	movs	r2, r0
 8002f64:	000b      	movs	r3, r1
 8002f66:	0010      	movs	r0, r2
 8002f68:	0019      	movs	r1, r3
 8002f6a:	f7ff fa1f 	bl	80023ac <__aeabi_d2iz>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	4a36      	ldr	r2, [pc, #216]	; (800304c <main+0x248>)
 8002f72:	0038      	movs	r0, r7
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	0023      	movs	r3, r4
 8002f78:	2110      	movs	r1, #16
 8002f7a:	f004 fee7 	bl	8007d4c <sniprintf>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    rgb_lcd_setCursor(&lcd, 0, 1);
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <main+0x228>)
 8002f84:	2201      	movs	r2, #1
 8002f86:	2100      	movs	r1, #0
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 fa99 	bl	80034c0 <rgb_lcd_setCursor>
    rgb_lcd_print(&lcd, s2, len2);
 8002f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f90:	0039      	movs	r1, r7
 8002f92:	4b26      	ldr	r3, [pc, #152]	; (800302c <main+0x228>)
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fb4d 	bl	8003634 <rgb_lcd_print>
    if (S)
 8002f9a:	4b29      	ldr	r3, [pc, #164]	; (8003040 <main+0x23c>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <main+0x1ac>
    {
      rgb_lcd_write(&lcd, 'F');
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <main+0x228>)
 8002fa6:	2146      	movs	r1, #70	; 0x46
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 fb29 	bl	8003600 <rgb_lcd_write>
 8002fae:	e009      	b.n	8002fc4 <main+0x1c0>
    }
    else
    {
      rgb_lcd_write(&lcd, 0);
 8002fb0:	4b1e      	ldr	r3, [pc, #120]	; (800302c <main+0x228>)
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	f000 fb23 	bl	8003600 <rgb_lcd_write>
      rgb_lcd_write(&lcd, 'C');
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <main+0x228>)
 8002fbc:	2143      	movs	r1, #67	; 0x43
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 fb1e 	bl	8003600 <rgb_lcd_write>
    }


    htim2.Instance->CCR1 = map(humidity, 5, 95, 0, 99);
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	4a22      	ldr	r2, [pc, #136]	; (8003050 <main+0x24c>)
 8002fc8:	4922      	ldr	r1, [pc, #136]	; (8003054 <main+0x250>)
 8002fca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002fcc:	4b22      	ldr	r3, [pc, #136]	; (8003058 <main+0x254>)
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	1c23      	adds	r3, r4, #0
 8002fd2:	f000 f901 	bl	80031d8 <map>
 8002fd6:	1c02      	adds	r2, r0, #0
 8002fd8:	4b15      	ldr	r3, [pc, #84]	; (8003030 <main+0x22c>)
 8002fda:	681c      	ldr	r4, [r3, #0]
 8002fdc:	1c10      	adds	r0, r2, #0
 8002fde:	f7fd f977 	bl	80002d0 <__aeabi_f2uiz>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	6363      	str	r3, [r4, #52]	; 0x34
    htim2.Instance->CCR2 = map(temperature, -20, S ? 140 : 60, 0, 99);
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <main+0x23c>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <main+0x1f0>
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <main+0x258>)
 8002ff2:	e000      	b.n	8002ff6 <main+0x1f2>
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <main+0x25c>)
 8002ff6:	2400      	movs	r4, #0
 8002ff8:	491a      	ldr	r1, [pc, #104]	; (8003064 <main+0x260>)
 8002ffa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <main+0x254>)
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	1c23      	adds	r3, r4, #0
 8003002:	f000 f8e9 	bl	80031d8 <map>
 8003006:	1c02      	adds	r2, r0, #0
 8003008:	4b09      	ldr	r3, [pc, #36]	; (8003030 <main+0x22c>)
 800300a:	681c      	ldr	r4, [r3, #0]
 800300c:	1c10      	adds	r0, r2, #0
 800300e:	f7fd f95f 	bl	80002d0 <__aeabi_f2uiz>
 8003012:	0003      	movs	r3, r0
 8003014:	63a3      	str	r3, [r4, #56]	; 0x38

    HAL_Delay(1000);
 8003016:	23fa      	movs	r3, #250	; 0xfa
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	0018      	movs	r0, r3
 800301c:	f000 fec2 	bl	8003da4 <HAL_Delay>
 8003020:	e736      	b.n	8002e90 <main+0x8c>
      continue;
 8003022:	46c0      	nop			; (mov r8, r8)
  {
 8003024:	e734      	b.n	8002e90 <main+0x8c>
 8003026:	46c0      	nop			; (mov r8, r8)
 8003028:	200000e0 	.word	0x200000e0
 800302c:	200000f0 	.word	0x200000f0
 8003030:	20000104 	.word	0x20000104
 8003034:	20000184 	.word	0x20000184
 8003038:	20000094 	.word	0x20000094
 800303c:	20000000 	.word	0x20000000
 8003040:	200000fc 	.word	0x200000fc
 8003044:	080086c8 	.word	0x080086c8
 8003048:	40240000 	.word	0x40240000
 800304c:	080086d8 	.word	0x080086d8
 8003050:	42be0000 	.word	0x42be0000
 8003054:	40a00000 	.word	0x40a00000
 8003058:	42c60000 	.word	0x42c60000
 800305c:	430c0000 	.word	0x430c0000
 8003060:	42700000 	.word	0x42700000
 8003064:	c1a00000 	.word	0xc1a00000

08003068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003068:	b590      	push	{r4, r7, lr}
 800306a:	b09d      	sub	sp, #116	; 0x74
 800306c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306e:	2438      	movs	r4, #56	; 0x38
 8003070:	193b      	adds	r3, r7, r4
 8003072:	0018      	movs	r0, r3
 8003074:	2338      	movs	r3, #56	; 0x38
 8003076:	001a      	movs	r2, r3
 8003078:	2100      	movs	r1, #0
 800307a:	f004 fdf7 	bl	8007c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800307e:	2324      	movs	r3, #36	; 0x24
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	0018      	movs	r0, r3
 8003084:	2314      	movs	r3, #20
 8003086:	001a      	movs	r2, r3
 8003088:	2100      	movs	r1, #0
 800308a:	f004 fdef 	bl	8007c6c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800308e:	003b      	movs	r3, r7
 8003090:	0018      	movs	r0, r3
 8003092:	2324      	movs	r3, #36	; 0x24
 8003094:	001a      	movs	r2, r3
 8003096:	2100      	movs	r1, #0
 8003098:	f004 fde8 	bl	8007c6c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <SystemClock_Config+0xcc>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <SystemClock_Config+0xd0>)
 80030a2:	401a      	ands	r2, r3
 80030a4:	4b23      	ldr	r3, [pc, #140]	; (8003134 <SystemClock_Config+0xcc>)
 80030a6:	2180      	movs	r1, #128	; 0x80
 80030a8:	0109      	lsls	r1, r1, #4
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030ae:	0021      	movs	r1, r4
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	2202      	movs	r2, #2
 80030b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030b6:	187b      	adds	r3, r7, r1
 80030b8:	2201      	movs	r2, #1
 80030ba:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2210      	movs	r2, #16
 80030c0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c8:	187b      	adds	r3, r7, r1
 80030ca:	0018      	movs	r0, r3
 80030cc:	f001 fe9c 	bl	8004e08 <HAL_RCC_OscConfig>
 80030d0:	1e03      	subs	r3, r0, #0
 80030d2:	d001      	beq.n	80030d8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80030d4:	f000 f8ab 	bl	800322e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030d8:	2124      	movs	r1, #36	; 0x24
 80030da:	187b      	adds	r3, r7, r1
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2201      	movs	r2, #1
 80030e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2100      	movs	r1, #0
 80030fc:	0018      	movs	r0, r3
 80030fe:	f002 fa47 	bl	8005590 <HAL_RCC_ClockConfig>
 8003102:	1e03      	subs	r3, r0, #0
 8003104:	d001      	beq.n	800310a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003106:	f000 f892 	bl	800322e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 800310a:	003b      	movs	r3, r7
 800310c:	220a      	movs	r2, #10
 800310e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003110:	003b      	movs	r3, r7
 8003112:	2200      	movs	r2, #0
 8003114:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003116:	003b      	movs	r3, r7
 8003118:	2200      	movs	r2, #0
 800311a:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800311c:	003b      	movs	r3, r7
 800311e:	0018      	movs	r0, r3
 8003120:	f002 fc5a 	bl	80059d8 <HAL_RCCEx_PeriphCLKConfig>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d001      	beq.n	800312c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003128:	f000 f881 	bl	800322e <Error_Handler>
  }
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	46bd      	mov	sp, r7
 8003130:	b01d      	add	sp, #116	; 0x74
 8003132:	bd90      	pop	{r4, r7, pc}
 8003134:	40007000 	.word	0x40007000
 8003138:	ffffe7ff 	.word	0xffffe7ff

0800313c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d123      	bne.n	8003196 <HAL_TIM_PeriodElapsedCallback+0x5a>
    S = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) ? !S : S;
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	00da      	lsls	r2, r3, #3
 8003152:	23a0      	movs	r3, #160	; 0xa0
 8003154:	05db      	lsls	r3, r3, #23
 8003156:	0011      	movs	r1, r2
 8003158:	0018      	movs	r0, r3
 800315a:	f001 f923 	bl	80043a4 <HAL_GPIO_ReadPin>
 800315e:	1e03      	subs	r3, r0, #0
 8003160:	d00d      	beq.n	800317e <HAL_TIM_PeriodElapsedCallback+0x42>
 8003162:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	1e5a      	subs	r2, r3, #1
 800316a:	4193      	sbcs	r3, r2
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2201      	movs	r2, #1
 8003170:	4053      	eors	r3, r2
 8003172:	b2db      	uxtb	r3, r3
 8003174:	1c1a      	adds	r2, r3, #0
 8003176:	2301      	movs	r3, #1
 8003178:	4013      	ands	r3, r2
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e005      	b.n	800318a <HAL_TIM_PeriodElapsedCallback+0x4e>
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	1e5a      	subs	r2, r3, #1
 8003186:	4193      	sbcs	r3, r2
 8003188:	b2db      	uxtb	r3, r3
 800318a:	4a06      	ldr	r2, [pc, #24]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800318c:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_Stop_IT(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	0018      	movs	r0, r3
 8003192:	f002 fe55 	bl	8005e40 <HAL_TIM_Base_Stop_IT>
  }
}
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	46bd      	mov	sp, r7
 800319a:	b002      	add	sp, #8
 800319c:	bd80      	pop	{r7, pc}
 800319e:	46c0      	nop			; (mov r8, r8)
 80031a0:	40001000 	.word	0x40001000
 80031a4:	200000fc 	.word	0x200000fc

080031a8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	0002      	movs	r2, r0
 80031b0:	1dbb      	adds	r3, r7, #6
 80031b2:	801a      	strh	r2, [r3, #0]
  switch (GPIO_Pin)
 80031b4:	1dbb      	adds	r3, r7, #6
 80031b6:	881a      	ldrh	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	429a      	cmp	r2, r3
 80031be:	d104      	bne.n	80031ca <HAL_GPIO_EXTI_Callback+0x22>
  {
  case GPIO_PIN_10:
    HAL_TIM_Base_Start_IT(&htim6);
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_GPIO_EXTI_Callback+0x2c>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f002 fdf0 	bl	8005da8 <HAL_TIM_Base_Start_IT>
    break;
 80031c8:	e000      	b.n	80031cc <HAL_GPIO_EXTI_Callback+0x24>

  default:
    break;
 80031ca:	46c0      	nop			; (mov r8, r8)
  }
}
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b002      	add	sp, #8
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	20000144 	.word	0x20000144

080031d8 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 80031d8:	b590      	push	{r4, r7, lr}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80031e6:	68b9      	ldr	r1, [r7, #8]
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7fd fd31 	bl	8000c50 <__aeabi_fsub>
 80031ee:	1c03      	adds	r3, r0, #0
 80031f0:	1c1c      	adds	r4, r3, #0
 80031f2:	6839      	ldr	r1, [r7, #0]
 80031f4:	6a38      	ldr	r0, [r7, #32]
 80031f6:	f7fd fd2b 	bl	8000c50 <__aeabi_fsub>
 80031fa:	1c03      	adds	r3, r0, #0
 80031fc:	1c19      	adds	r1, r3, #0
 80031fe:	1c20      	adds	r0, r4, #0
 8003200:	f7fd fc00 	bl	8000a04 <__aeabi_fmul>
 8003204:	1c03      	adds	r3, r0, #0
 8003206:	1c1c      	adds	r4, r3, #0
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd20 	bl	8000c50 <__aeabi_fsub>
 8003210:	1c03      	adds	r3, r0, #0
 8003212:	1c19      	adds	r1, r3, #0
 8003214:	1c20      	adds	r0, r4, #0
 8003216:	f7fd fadd 	bl	80007d4 <__aeabi_fdiv>
 800321a:	1c03      	adds	r3, r0, #0
 800321c:	6839      	ldr	r1, [r7, #0]
 800321e:	1c18      	adds	r0, r3, #0
 8003220:	f7fd f93a 	bl	8000498 <__aeabi_fadd>
 8003224:	1c03      	adds	r3, r0, #0
}
 8003226:	1c18      	adds	r0, r3, #0
 8003228:	46bd      	mov	sp, r7
 800322a:	b005      	add	sp, #20
 800322c:	bd90      	pop	{r4, r7, pc}

0800322e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003232:	b672      	cpsid	i
}
 8003234:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003236:	e7fe      	b.n	8003236 <Error_Handler+0x8>

08003238 <rgb_lcd_setColorWhite>:

void rgb_lcd_setColor(rgb_lcd *_this, unsigned char color);
static void rgb_lcd_setColorAll(rgb_lcd *_this) {
    rgb_lcd_setRGB(_this, 0, 0, 0);
}
static void rgb_lcd_setColorWhite(rgb_lcd *_this) {
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
    rgb_lcd_setRGB(_this, 255, 255, 255);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	23ff      	movs	r3, #255	; 0xff
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	21ff      	movs	r1, #255	; 0xff
 8003248:	f000 fa38 	bl	80036bc <rgb_lcd_setRGB>
}
 800324c:	46c0      	nop			; (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	b002      	add	sp, #8
 8003252:	bd80      	pop	{r7, pc}

08003254 <rgb_lcd_i2c_send_byteS>:

void rgb_lcd_send(rgb_lcd* _this, uint8_t, uint8_t);
void rgb_lcd_setReg(rgb_lcd* _this, unsigned char addr, unsigned char dta);
void rgb_lcd_i2c_send_byteS(rgb_lcd* _this, unsigned char* dta, unsigned char len);

void rgb_lcd_i2c_send_byteS(rgb_lcd* _this, unsigned char* dta, unsigned char len) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af02      	add	r7, sp, #8
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	1dfb      	adds	r3, r7, #7
 8003260:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Master_Transmit(_this->_wire, LCD_ADDRESS << 1, dta, len, TIMEOUT);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6898      	ldr	r0, [r3, #8]
 8003266:	1dfb      	adds	r3, r7, #7
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	2119      	movs	r1, #25
 8003270:	9100      	str	r1, [sp, #0]
 8003272:	217c      	movs	r1, #124	; 0x7c
 8003274:	f001 f982 	bl	800457c <HAL_I2C_Master_Transmit>
}
 8003278:	46c0      	nop			; (mov r8, r8)
 800327a:	46bd      	mov	sp, r7
 800327c:	b004      	add	sp, #16
 800327e:	bd80      	pop	{r7, pc}

08003280 <rgb_lcd_init>:

void rgb_lcd_init(rgb_lcd* _this) {
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    _this->_displayfunction = 0;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	705a      	strb	r2, [r3, #1]
    _this->_displaycontrol = 0;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	709a      	strb	r2, [r3, #2]
    _this->_displaymode = 0;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	70da      	strb	r2, [r3, #3]
    _this->_initialized = 0;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	711a      	strb	r2, [r3, #4]
    _this->_numlines = 0;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	715a      	strb	r2, [r3, #5]
    _this->_currline = 0;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	719a      	strb	r2, [r3, #6]
}
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	46bd      	mov	sp, r7
 80032b0:	b002      	add	sp, #8
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <rgb_lcd_begin>:

void rgb_lcd_begin(rgb_lcd* _this, uint8_t cols, uint8_t lines, uint8_t dotsize, I2C_HandleTypeDef *wire) {
 80032b4:	b590      	push	{r4, r7, lr}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	000c      	movs	r4, r1
 80032be:	0010      	movs	r0, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	1c22      	adds	r2, r4, #0
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	1cbb      	adds	r3, r7, #2
 80032ca:	1c02      	adds	r2, r0, #0
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	1c7b      	adds	r3, r7, #1
 80032d0:	1c0a      	adds	r2, r1, #0
 80032d2:	701a      	strb	r2, [r3, #0]

    _this->_wire = wire;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d8:	609a      	str	r2, [r3, #8]

    if (lines > 1) {
 80032da:	1cbb      	adds	r3, r7, #2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d906      	bls.n	80032f0 <rgb_lcd_begin+0x3c>
        _this->_displayfunction |= LCD_2LINE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	2208      	movs	r2, #8
 80032e8:	4313      	orrs	r3, r2
 80032ea:	b2da      	uxtb	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	705a      	strb	r2, [r3, #1]
    }
    _this->_numlines = lines;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1cba      	adds	r2, r7, #2
 80032f4:	7812      	ldrb	r2, [r2, #0]
 80032f6:	715a      	strb	r2, [r3, #5]
    _this->_currline = 0;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	719a      	strb	r2, [r3, #6]

    // for some 1 line displays you can select a 10 pixel high font
    if ((dotsize != 0) && (lines == 1)) {
 80032fe:	1c7b      	adds	r3, r7, #1
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <rgb_lcd_begin+0x68>
 8003306:	1cbb      	adds	r3, r7, #2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d106      	bne.n	800331c <rgb_lcd_begin+0x68>
        _this->_displayfunction |= LCD_5x10DOTS;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	2204      	movs	r2, #4
 8003314:	4313      	orrs	r3, r2
 8003316:	b2da      	uxtb	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	705a      	strb	r2, [r3, #1]
 800331c:	4b56      	ldr	r3, [pc, #344]	; (8003478 <rgb_lcd_begin+0x1c4>)
 800331e:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8003320:	4b56      	ldr	r3, [pc, #344]	; (800347c <rgb_lcd_begin+0x1c8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2200      	movs	r2, #0
 8003326:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	4b54      	ldr	r3, [pc, #336]	; (800347c <rgb_lcd_begin+0x1c8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	d8f9      	bhi.n	800332a <rgb_lcd_begin+0x76>
}
 8003336:	46c0      	nop			; (mov r8, r8)

    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    rgb_lcd_command(_this, LCD_FUNCTIONSET | _this->_displayfunction);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2220      	movs	r2, #32
 800333e:	4313      	orrs	r3, r2
 8003340:	b2da      	uxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	0011      	movs	r1, r2
 8003346:	0018      	movs	r0, r3
 8003348:	f000 f941 	bl	80035ce <rgb_lcd_command>
 800334c:	4b4c      	ldr	r3, [pc, #304]	; (8003480 <rgb_lcd_begin+0x1cc>)
 800334e:	613b      	str	r3, [r7, #16]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8003350:	4b4a      	ldr	r3, [pc, #296]	; (800347c <rgb_lcd_begin+0x1c8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	4b48      	ldr	r3, [pc, #288]	; (800347c <rgb_lcd_begin+0x1c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	429a      	cmp	r2, r3
 8003364:	d8f9      	bhi.n	800335a <rgb_lcd_begin+0xa6>
}
 8003366:	46c0      	nop			; (mov r8, r8)
    delayMicroseconds(4500);  // wait more than 4.1ms

    // second try
    rgb_lcd_command(_this, LCD_FUNCTIONSET | _this->_displayfunction);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	785b      	ldrb	r3, [r3, #1]
 800336c:	2220      	movs	r2, #32
 800336e:	4313      	orrs	r3, r2
 8003370:	b2da      	uxtb	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f000 f929 	bl	80035ce <rgb_lcd_command>
 800337c:	2396      	movs	r3, #150	; 0x96
 800337e:	617b      	str	r3, [r7, #20]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8003380:	4b3e      	ldr	r3, [pc, #248]	; (800347c <rgb_lcd_begin+0x1c8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	4b3c      	ldr	r3, [pc, #240]	; (800347c <rgb_lcd_begin+0x1c8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	697a      	ldr	r2, [r7, #20]
 8003392:	429a      	cmp	r2, r3
 8003394:	d8f9      	bhi.n	800338a <rgb_lcd_begin+0xd6>
}
 8003396:	46c0      	nop			; (mov r8, r8)
    delayMicroseconds(150);

    // third go
    rgb_lcd_command(_this, LCD_FUNCTIONSET | _this->_displayfunction);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	2220      	movs	r2, #32
 800339e:	4313      	orrs	r3, r2
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0011      	movs	r1, r2
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f911 	bl	80035ce <rgb_lcd_command>


    // finally, set # lines, font size, etc.
    rgb_lcd_command(_this, LCD_FUNCTIONSET | _this->_displayfunction);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	785b      	ldrb	r3, [r3, #1]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f907 	bl	80035ce <rgb_lcd_command>

    // turn the display on with no cursor or blinking default
    _this->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2204      	movs	r2, #4
 80033c4:	709a      	strb	r2, [r3, #2]
    rgb_lcd_display(_this);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 f8aa 	bl	8003522 <rgb_lcd_display>

    // clear it off
    rgb_lcd_clear(_this);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	0018      	movs	r0, r3
 80033d2:	f000 f857 	bl	8003484 <rgb_lcd_clear>

    // Initialize to default text direction (for romance languages)
    _this->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2202      	movs	r2, #2
 80033da:	70da      	strb	r2, [r3, #3]
    // set the entry mode
    rgb_lcd_command(_this, LCD_ENTRYMODESET | _this->_displaymode);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	78db      	ldrb	r3, [r3, #3]
 80033e0:	2204      	movs	r2, #4
 80033e2:	4313      	orrs	r3, r2
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0011      	movs	r1, r2
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 f8ef 	bl	80035ce <rgb_lcd_command>


    // check rgb chip model
    if (HAL_I2C_IsDeviceReady(_this->_wire, RGB_ADDRESS_V5 << 1, TRIALS, TIMEOUT) == 0)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6898      	ldr	r0, [r3, #8]
 80033f4:	2319      	movs	r3, #25
 80033f6:	2201      	movs	r2, #1
 80033f8:	2160      	movs	r1, #96	; 0x60
 80033fa:	f001 f9c7 	bl	800478c <HAL_I2C_IsDeviceReady>
 80033fe:	1e03      	subs	r3, r0, #0
 8003400:	d11d      	bne.n	800343e <rgb_lcd_begin+0x18a>
    {
        _this->rgb_chip_addr = RGB_ADDRESS_V5;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2230      	movs	r2, #48	; 0x30
 8003406:	701a      	strb	r2, [r3, #0]
        rgb_lcd_setReg(_this, 0x00, 0x07); // reset the chip
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2207      	movs	r2, #7
 800340c:	2100      	movs	r1, #0
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f92e 	bl	8003670 <rgb_lcd_setReg>
 8003414:	23c8      	movs	r3, #200	; 0xc8
 8003416:	60bb      	str	r3, [r7, #8]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 8003418:	4b18      	ldr	r3, [pc, #96]	; (800347c <rgb_lcd_begin+0x1c8>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2200      	movs	r2, #0
 800341e:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	4b16      	ldr	r3, [pc, #88]	; (800347c <rgb_lcd_begin+0x1c8>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d8f9      	bhi.n	8003422 <rgb_lcd_begin+0x16e>
}
 800342e:	46c0      	nop			; (mov r8, r8)
        delayMicroseconds(200); // wait 200 us to complete
        rgb_lcd_setReg(_this, 0x04, 0x15); // set all led always on
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2215      	movs	r2, #21
 8003434:	2104      	movs	r1, #4
 8003436:	0018      	movs	r0, r3
 8003438:	f000 f91a 	bl	8003670 <rgb_lcd_setReg>
 800343c:	e014      	b.n	8003468 <rgb_lcd_begin+0x1b4>
    }
    else
    {
        _this->rgb_chip_addr = RGB_ADDRESS;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2262      	movs	r2, #98	; 0x62
 8003442:	701a      	strb	r2, [r3, #0]
        // backlight init
        rgb_lcd_setReg(_this, REG_MODE1, 0);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	2100      	movs	r1, #0
 800344a:	0018      	movs	r0, r3
 800344c:	f000 f910 	bl	8003670 <rgb_lcd_setReg>
        // set LEDs controllable by both PWM and GRPPWM registers
        rgb_lcd_setReg(_this, REG_OUTPUT, 0xFF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	22ff      	movs	r2, #255	; 0xff
 8003454:	2108      	movs	r1, #8
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f90a 	bl	8003670 <rgb_lcd_setReg>
        // set MODE2 values
        // 0010 0000 -> 0x20  (DMBLNK to 1, ie blinky mode)
        rgb_lcd_setReg(_this, REG_MODE2, 0x20);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	2101      	movs	r1, #1
 8003462:	0018      	movs	r0, r3
 8003464:	f000 f904 	bl	8003670 <rgb_lcd_setReg>
    }

    rgb_lcd_setColorWhite(_this);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fee4 	bl	8003238 <rgb_lcd_setColorWhite>

}
 8003470:	46c0      	nop			; (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b007      	add	sp, #28
 8003476:	bd90      	pop	{r4, r7, pc}
 8003478:	0000c350 	.word	0x0000c350
 800347c:	20000184 	.word	0x20000184
 8003480:	00001194 	.word	0x00001194

08003484 <rgb_lcd_clear>:

/********** high level commands, for the user! */
void rgb_lcd_clear(rgb_lcd* _this) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
    rgb_lcd_command(_this, LCD_CLEARDISPLAY);        // clear display, set cursor position to zero
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2101      	movs	r1, #1
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f89c 	bl	80035ce <rgb_lcd_command>
 8003496:	23fa      	movs	r3, #250	; 0xfa
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COUNTER(&htim21,0);  // set the counter value a 0
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <rgb_lcd_clear+0x38>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2200      	movs	r2, #0
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24
  while (__HAL_TIM_GET_COUNTER(&htim21) < us);  // wait for the counter to reach the us input in the parameter
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	4b05      	ldr	r3, [pc, #20]	; (80034bc <rgb_lcd_clear+0x38>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d8f9      	bhi.n	80034a6 <rgb_lcd_clear+0x22>
}
 80034b2:	46c0      	nop			; (mov r8, r8)
    delayMicroseconds(2000);          // this command takes a long time!
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	20000184 	.word	0x20000184

080034c0 <rgb_lcd_setCursor>:
void rgb_lcd_home(rgb_lcd* _this) {
    rgb_lcd_command(_this, LCD_RETURNHOME);        // set cursor position to zero
    delayMicroseconds(2000);        // this command takes a long time!
}

void rgb_lcd_setCursor(rgb_lcd* _this, uint8_t col, uint8_t row) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	0008      	movs	r0, r1
 80034ca:	0011      	movs	r1, r2
 80034cc:	1cfb      	adds	r3, r7, #3
 80034ce:	1c02      	adds	r2, r0, #0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	1cbb      	adds	r3, r7, #2
 80034d4:	1c0a      	adds	r2, r1, #0
 80034d6:	701a      	strb	r2, [r3, #0]

    col = (row == 0 ? col | 0x80 : col | 0xc0);
 80034d8:	1cbb      	adds	r3, r7, #2
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <rgb_lcd_setCursor+0x2e>
 80034e0:	1cfb      	adds	r3, r7, #3
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	4252      	negs	r2, r2
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	e005      	b.n	80034fa <rgb_lcd_setCursor+0x3a>
 80034ee:	1cfb      	adds	r3, r7, #3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	4252      	negs	r2, r2
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	1cfa      	adds	r2, r7, #3
 80034fc:	7013      	strb	r3, [r2, #0]
    unsigned char dta[2] = {0x80, col};
 80034fe:	210c      	movs	r1, #12
 8003500:	187b      	adds	r3, r7, r1
 8003502:	2280      	movs	r2, #128	; 0x80
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	187b      	adds	r3, r7, r1
 8003508:	1cfa      	adds	r2, r7, #3
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	705a      	strb	r2, [r3, #1]

    rgb_lcd_i2c_send_byteS(_this, dta, 2);
 800350e:	1879      	adds	r1, r7, r1
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2202      	movs	r2, #2
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff fe9d 	bl	8003254 <rgb_lcd_i2c_send_byteS>

}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	46bd      	mov	sp, r7
 800351e:	b004      	add	sp, #16
 8003520:	bd80      	pop	{r7, pc}

08003522 <rgb_lcd_display>:
void rgb_lcd_noDisplay(rgb_lcd* _this) {
    _this->_displaycontrol &= ~LCD_DISPLAYON;
    rgb_lcd_command(_this, LCD_DISPLAYCONTROL | _this->_displaycontrol);
}

void rgb_lcd_display(rgb_lcd* _this) {
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
    _this->_displaycontrol |= LCD_DISPLAYON;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	789b      	ldrb	r3, [r3, #2]
 800352e:	2204      	movs	r2, #4
 8003530:	4313      	orrs	r3, r2
 8003532:	b2da      	uxtb	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	709a      	strb	r2, [r3, #2]
    rgb_lcd_command(_this, LCD_DISPLAYCONTROL | _this->_displaycontrol);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	789b      	ldrb	r3, [r3, #2]
 800353c:	2208      	movs	r2, #8
 800353e:	4313      	orrs	r3, r2
 8003540:	b2da      	uxtb	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	0011      	movs	r1, r2
 8003546:	0018      	movs	r0, r3
 8003548:	f000 f841 	bl	80035ce <rgb_lcd_command>
}
 800354c:	46c0      	nop			; (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <rgb_lcd_createChar>:
    rgb_lcd_command(_this, LCD_ENTRYMODESET | _this->_displaymode);
}

// Allows us to fill the first 8 CGRAM locations
// with custom characters
void rgb_lcd_createChar(rgb_lcd* _this, uint8_t location, uint8_t charmap[]) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	607a      	str	r2, [r7, #4]
 800355e:	200b      	movs	r0, #11
 8003560:	183b      	adds	r3, r7, r0
 8003562:	1c0a      	adds	r2, r1, #0
 8003564:	701a      	strb	r2, [r3, #0]

    location &= 0x7; // we only have 8 locations 0-7
 8003566:	183b      	adds	r3, r7, r0
 8003568:	183a      	adds	r2, r7, r0
 800356a:	7812      	ldrb	r2, [r2, #0]
 800356c:	2107      	movs	r1, #7
 800356e:	400a      	ands	r2, r1
 8003570:	701a      	strb	r2, [r3, #0]
    rgb_lcd_command(_this, LCD_SETCGRAMADDR | (location << 3));
 8003572:	183b      	adds	r3, r7, r0
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	b25b      	sxtb	r3, r3
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	4313      	orrs	r3, r2
 800357e:	b25b      	sxtb	r3, r3
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f821 	bl	80035ce <rgb_lcd_command>


    unsigned char dta[9];
    dta[0] = 0x40;
 800358c:	2310      	movs	r3, #16
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	e00b      	b.n	80035b2 <rgb_lcd_createChar+0x5e>
        dta[i + 1] = charmap[i];
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	18d2      	adds	r2, r2, r3
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	7811      	ldrb	r1, [r2, #0]
 80035a6:	2210      	movs	r2, #16
 80035a8:	18ba      	adds	r2, r7, r2
 80035aa:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < 8; i++) {
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b07      	cmp	r3, #7
 80035b6:	ddf0      	ble.n	800359a <rgb_lcd_createChar+0x46>
    }
    rgb_lcd_i2c_send_byteS(_this, dta, 9);
 80035b8:	2310      	movs	r3, #16
 80035ba:	18f9      	adds	r1, r7, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2209      	movs	r2, #9
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff fe47 	bl	8003254 <rgb_lcd_i2c_send_byteS>
}
 80035c6:	46c0      	nop			; (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b008      	add	sp, #32
 80035cc:	bd80      	pop	{r7, pc}

080035ce <rgb_lcd_command>:
}

/*********** mid level commands, for sending data/cmds */

// send command
inline void rgb_lcd_command(rgb_lcd* _this, uint8_t value) {
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	000a      	movs	r2, r1
 80035d8:	1cfb      	adds	r3, r7, #3
 80035da:	701a      	strb	r2, [r3, #0]
    unsigned char dta[2] = {0x80, value};
 80035dc:	210c      	movs	r1, #12
 80035de:	187b      	adds	r3, r7, r1
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	701a      	strb	r2, [r3, #0]
 80035e4:	187b      	adds	r3, r7, r1
 80035e6:	1cfa      	adds	r2, r7, #3
 80035e8:	7812      	ldrb	r2, [r2, #0]
 80035ea:	705a      	strb	r2, [r3, #1]
    rgb_lcd_i2c_send_byteS(_this, dta, 2);
 80035ec:	1879      	adds	r1, r7, r1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2202      	movs	r2, #2
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7ff fe2e 	bl	8003254 <rgb_lcd_i2c_send_byteS>
}
 80035f8:	46c0      	nop			; (mov r8, r8)
 80035fa:	46bd      	mov	sp, r7
 80035fc:	b004      	add	sp, #16
 80035fe:	bd80      	pop	{r7, pc}

08003600 <rgb_lcd_write>:

// send data
inline size_t rgb_lcd_write(rgb_lcd* _this, uint8_t value) {
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	000a      	movs	r2, r1
 800360a:	1cfb      	adds	r3, r7, #3
 800360c:	701a      	strb	r2, [r3, #0]

    unsigned char dta[2] = {0x40, value};
 800360e:	210c      	movs	r1, #12
 8003610:	187b      	adds	r3, r7, r1
 8003612:	2240      	movs	r2, #64	; 0x40
 8003614:	701a      	strb	r2, [r3, #0]
 8003616:	187b      	adds	r3, r7, r1
 8003618:	1cfa      	adds	r2, r7, #3
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	705a      	strb	r2, [r3, #1]
    rgb_lcd_i2c_send_byteS(_this, dta, 2);
 800361e:	1879      	adds	r1, r7, r1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff fe15 	bl	8003254 <rgb_lcd_i2c_send_byteS>
    return 1; // assume sucess
 800362a:	2301      	movs	r3, #1
}
 800362c:	0018      	movs	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	b004      	add	sp, #16
 8003632:	bd80      	pop	{r7, pc}

08003634 <rgb_lcd_print>:

inline void rgb_lcd_print(rgb_lcd* _this, uint8_t *value, uint32_t len) {
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; i++)
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
 8003644:	e00b      	b.n	800365e <rgb_lcd_print+0x2a>
    {
        rgb_lcd_write(_this, value[i]);
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	18d3      	adds	r3, r2, r3
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	0011      	movs	r1, r2
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff ffd4 	bl	8003600 <rgb_lcd_write>
    for (size_t i = 0; i < len; i++)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	3301      	adds	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d3ef      	bcc.n	8003646 <rgb_lcd_print+0x12>
    }
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b006      	add	sp, #24
 800366e:	bd80      	pop	{r7, pc}

08003670 <rgb_lcd_setReg>:

void rgb_lcd_setReg(rgb_lcd* _this, unsigned char reg, unsigned char dat) {
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b087      	sub	sp, #28
 8003674:	af02      	add	r7, sp, #8
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	0008      	movs	r0, r1
 800367a:	0011      	movs	r1, r2
 800367c:	1cfb      	adds	r3, r7, #3
 800367e:	1c02      	adds	r2, r0, #0
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	1cbb      	adds	r3, r7, #2
 8003684:	1c0a      	adds	r2, r1, #0
 8003686:	701a      	strb	r2, [r3, #0]
    unsigned char dta[2] = {reg, dat};
 8003688:	240c      	movs	r4, #12
 800368a:	193b      	adds	r3, r7, r4
 800368c:	1cfa      	adds	r2, r7, #3
 800368e:	7812      	ldrb	r2, [r2, #0]
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	193b      	adds	r3, r7, r4
 8003694:	1cba      	adds	r2, r7, #2
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	705a      	strb	r2, [r3, #1]
    HAL_I2C_Master_Transmit(_this->_wire, _this->rgb_chip_addr << 1, dta, 2, TIMEOUT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6898      	ldr	r0, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	18db      	adds	r3, r3, r3
 80036a6:	b299      	uxth	r1, r3
 80036a8:	193a      	adds	r2, r7, r4
 80036aa:	2319      	movs	r3, #25
 80036ac:	9300      	str	r3, [sp, #0]
 80036ae:	2302      	movs	r3, #2
 80036b0:	f000 ff64 	bl	800457c <HAL_I2C_Master_Transmit>
}
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b005      	add	sp, #20
 80036ba:	bd90      	pop	{r4, r7, pc}

080036bc <rgb_lcd_setRGB>:

void rgb_lcd_setRGB(rgb_lcd* _this, unsigned char r, unsigned char g, unsigned char b) {
 80036bc:	b590      	push	{r4, r7, lr}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	000c      	movs	r4, r1
 80036c6:	0010      	movs	r0, r2
 80036c8:	0019      	movs	r1, r3
 80036ca:	1cfb      	adds	r3, r7, #3
 80036cc:	1c22      	adds	r2, r4, #0
 80036ce:	701a      	strb	r2, [r3, #0]
 80036d0:	1cbb      	adds	r3, r7, #2
 80036d2:	1c02      	adds	r2, r0, #0
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	1c7b      	adds	r3, r7, #1
 80036d8:	1c0a      	adds	r2, r1, #0
 80036da:	701a      	strb	r2, [r3, #0]
    if (_this->rgb_chip_addr == RGB_ADDRESS_V5)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b30      	cmp	r3, #48	; 0x30
 80036e2:	d115      	bne.n	8003710 <rgb_lcd_setRGB+0x54>
    {
        rgb_lcd_setReg(_this, 0x06, r);
 80036e4:	1cfb      	adds	r3, r7, #3
 80036e6:	781a      	ldrb	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2106      	movs	r1, #6
 80036ec:	0018      	movs	r0, r3
 80036ee:	f7ff ffbf 	bl	8003670 <rgb_lcd_setReg>
        rgb_lcd_setReg(_this, 0x07, g);
 80036f2:	1cbb      	adds	r3, r7, #2
 80036f4:	781a      	ldrb	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2107      	movs	r1, #7
 80036fa:	0018      	movs	r0, r3
 80036fc:	f7ff ffb8 	bl	8003670 <rgb_lcd_setReg>
        rgb_lcd_setReg(_this, 0x08, b);
 8003700:	1c7b      	adds	r3, r7, #1
 8003702:	781a      	ldrb	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2108      	movs	r1, #8
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff ffb1 	bl	8003670 <rgb_lcd_setReg>
    {
        rgb_lcd_setReg(_this, 0x04, r);
        rgb_lcd_setReg(_this, 0x03, g);
        rgb_lcd_setReg(_this, 0x02, b);
    }
}
 800370e:	e014      	b.n	800373a <rgb_lcd_setRGB+0x7e>
        rgb_lcd_setReg(_this, 0x04, r);
 8003710:	1cfb      	adds	r3, r7, #3
 8003712:	781a      	ldrb	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2104      	movs	r1, #4
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff ffa9 	bl	8003670 <rgb_lcd_setReg>
        rgb_lcd_setReg(_this, 0x03, g);
 800371e:	1cbb      	adds	r3, r7, #2
 8003720:	781a      	ldrb	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2103      	movs	r1, #3
 8003726:	0018      	movs	r0, r3
 8003728:	f7ff ffa2 	bl	8003670 <rgb_lcd_setReg>
        rgb_lcd_setReg(_this, 0x02, b);
 800372c:	1c7b      	adds	r3, r7, #1
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2102      	movs	r1, #2
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff ff9b 	bl	8003670 <rgb_lcd_setReg>
}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b003      	add	sp, #12
 8003740:	bd90      	pop	{r4, r7, pc}
	...

08003744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003748:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_MspInit+0x24>)
 800374a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800374c:	4b06      	ldr	r3, [pc, #24]	; (8003768 <HAL_MspInit+0x24>)
 800374e:	2101      	movs	r1, #1
 8003750:	430a      	orrs	r2, r1
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <HAL_MspInit+0x24>)
 8003756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003758:	4b03      	ldr	r3, [pc, #12]	; (8003768 <HAL_MspInit+0x24>)
 800375a:	2180      	movs	r1, #128	; 0x80
 800375c:	0549      	lsls	r1, r1, #21
 800375e:	430a      	orrs	r2, r1
 8003760:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000

0800376c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003770:	e7fe      	b.n	8003770 <NMI_Handler+0x4>

08003772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003776:	e7fe      	b.n	8003776 <HardFault_Handler+0x4>

08003778 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800377c:	46c0      	nop			; (mov r8, r8)
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003782:	b580      	push	{r7, lr}
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003790:	f000 faec 	bl	8003d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003794:	46c0      	nop			; (mov r8, r8)
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 fe38 	bl	8004418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037a8:	46c0      	nop			; (mov r8, r8)
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <TIM6_DAC_IRQHandler+0x14>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f002 fc3c 	bl	8006034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	20000144 	.word	0x20000144

080037c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <USART2_IRQHandler+0x14>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f003 fa3c 	bl	8006c4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	200001c4 	.word	0x200001c4

080037e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037e8:	4a14      	ldr	r2, [pc, #80]	; (800383c <_sbrk+0x5c>)
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <_sbrk+0x60>)
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037f4:	4b13      	ldr	r3, [pc, #76]	; (8003844 <_sbrk+0x64>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037fc:	4b11      	ldr	r3, [pc, #68]	; (8003844 <_sbrk+0x64>)
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <_sbrk+0x68>)
 8003800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	18d3      	adds	r3, r2, r3
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	429a      	cmp	r2, r3
 800380e:	d207      	bcs.n	8003820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003810:	f004 fa02 	bl	8007c18 <__errno>
 8003814:	0003      	movs	r3, r0
 8003816:	220c      	movs	r2, #12
 8003818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800381a:	2301      	movs	r3, #1
 800381c:	425b      	negs	r3, r3
 800381e:	e009      	b.n	8003834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003820:	4b08      	ldr	r3, [pc, #32]	; (8003844 <_sbrk+0x64>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003826:	4b07      	ldr	r3, [pc, #28]	; (8003844 <_sbrk+0x64>)
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	18d2      	adds	r2, r2, r3
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <_sbrk+0x64>)
 8003830:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003832:	68fb      	ldr	r3, [r7, #12]
}
 8003834:	0018      	movs	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	b006      	add	sp, #24
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20002000 	.word	0x20002000
 8003840:	00000400 	.word	0x00000400
 8003844:	20000100 	.word	0x20000100
 8003848:	20000260 	.word	0x20000260

0800384c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
	...

08003858 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	; 0x28
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800385e:	2318      	movs	r3, #24
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	0018      	movs	r0, r3
 8003864:	2310      	movs	r3, #16
 8003866:	001a      	movs	r2, r3
 8003868:	2100      	movs	r1, #0
 800386a:	f004 f9ff 	bl	8007c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800386e:	2310      	movs	r3, #16
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	0018      	movs	r0, r3
 8003874:	2308      	movs	r3, #8
 8003876:	001a      	movs	r2, r3
 8003878:	2100      	movs	r1, #0
 800387a:	f004 f9f7 	bl	8007c6c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800387e:	003b      	movs	r3, r7
 8003880:	0018      	movs	r0, r3
 8003882:	2310      	movs	r3, #16
 8003884:	001a      	movs	r2, r3
 8003886:	2100      	movs	r1, #0
 8003888:	f004 f9f0 	bl	8007c6c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800388c:	4b35      	ldr	r3, [pc, #212]	; (8003964 <MX_TIM2_Init+0x10c>)
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	05d2      	lsls	r2, r2, #23
 8003892:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 319;
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <MX_TIM2_Init+0x10c>)
 8003896:	2240      	movs	r2, #64	; 0x40
 8003898:	32ff      	adds	r2, #255	; 0xff
 800389a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389c:	4b31      	ldr	r3, [pc, #196]	; (8003964 <MX_TIM2_Init+0x10c>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <MX_TIM2_Init+0x10c>)
 80038a4:	2263      	movs	r2, #99	; 0x63
 80038a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a8:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <MX_TIM2_Init+0x10c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <MX_TIM2_Init+0x10c>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <MX_TIM2_Init+0x10c>)
 80038b6:	0018      	movs	r0, r3
 80038b8:	f002 f9f2 	bl	8005ca0 <HAL_TIM_Base_Init>
 80038bc:	1e03      	subs	r3, r0, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 80038c0:	f7ff fcb5 	bl	800322e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c4:	2118      	movs	r1, #24
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2280      	movs	r2, #128	; 0x80
 80038ca:	0152      	lsls	r2, r2, #5
 80038cc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038ce:	187a      	adds	r2, r7, r1
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <MX_TIM2_Init+0x10c>)
 80038d2:	0011      	movs	r1, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f002 fd5b 	bl	8006390 <HAL_TIM_ConfigClockSource>
 80038da:	1e03      	subs	r3, r0, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038de:	f7ff fca6 	bl	800322e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038e2:	4b20      	ldr	r3, [pc, #128]	; (8003964 <MX_TIM2_Init+0x10c>)
 80038e4:	0018      	movs	r0, r3
 80038e6:	f002 fad1 	bl	8005e8c <HAL_TIM_PWM_Init>
 80038ea:	1e03      	subs	r3, r0, #0
 80038ec:	d001      	beq.n	80038f2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80038ee:	f7ff fc9e 	bl	800322e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f2:	2110      	movs	r1, #16
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	187b      	adds	r3, r7, r1
 80038fc:	2200      	movs	r2, #0
 80038fe:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003900:	187a      	adds	r2, r7, r1
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <MX_TIM2_Init+0x10c>)
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f003 f84c 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003910:	f7ff fc8d 	bl	800322e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003914:	003b      	movs	r3, r7
 8003916:	2260      	movs	r2, #96	; 0x60
 8003918:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800391a:	003b      	movs	r3, r7
 800391c:	2200      	movs	r2, #0
 800391e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003920:	003b      	movs	r3, r7
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003926:	003b      	movs	r3, r7
 8003928:	2200      	movs	r2, #0
 800392a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800392c:	0039      	movs	r1, r7
 800392e:	4b0d      	ldr	r3, [pc, #52]	; (8003964 <MX_TIM2_Init+0x10c>)
 8003930:	2200      	movs	r2, #0
 8003932:	0018      	movs	r0, r3
 8003934:	f002 fc66 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 800393c:	f7ff fc77 	bl	800322e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003940:	0039      	movs	r1, r7
 8003942:	4b08      	ldr	r3, [pc, #32]	; (8003964 <MX_TIM2_Init+0x10c>)
 8003944:	2204      	movs	r2, #4
 8003946:	0018      	movs	r0, r3
 8003948:	f002 fc5c 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8003950:	f7ff fc6d 	bl	800322e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <MX_TIM2_Init+0x10c>)
 8003956:	0018      	movs	r0, r3
 8003958:	f000 f8d2 	bl	8003b00 <HAL_TIM_MspPostInit>

}
 800395c:	46c0      	nop			; (mov r8, r8)
 800395e:	46bd      	mov	sp, r7
 8003960:	b00a      	add	sp, #40	; 0x28
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000104 	.word	0x20000104

08003968 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800396e:	003b      	movs	r3, r7
 8003970:	0018      	movs	r0, r3
 8003972:	2308      	movs	r3, #8
 8003974:	001a      	movs	r2, r3
 8003976:	2100      	movs	r1, #0
 8003978:	f004 f978 	bl	8007c6c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800397c:	4b15      	ldr	r3, [pc, #84]	; (80039d4 <MX_TIM6_Init+0x6c>)
 800397e:	4a16      	ldr	r2, [pc, #88]	; (80039d8 <MX_TIM6_Init+0x70>)
 8003980:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <MX_TIM6_Init+0x6c>)
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <MX_TIM6_Init+0x74>)
 8003986:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003988:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <MX_TIM6_Init+0x6c>)
 800398a:	2200      	movs	r2, #0
 800398c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49;
 800398e:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <MX_TIM6_Init+0x6c>)
 8003990:	2231      	movs	r2, #49	; 0x31
 8003992:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <MX_TIM6_Init+0x6c>)
 8003996:	2200      	movs	r2, #0
 8003998:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800399a:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <MX_TIM6_Init+0x6c>)
 800399c:	0018      	movs	r0, r3
 800399e:	f002 f97f 	bl	8005ca0 <HAL_TIM_Base_Init>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d001      	beq.n	80039aa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80039a6:	f7ff fc42 	bl	800322e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039aa:	003b      	movs	r3, r7
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039b0:	003b      	movs	r3, r7
 80039b2:	2200      	movs	r2, #0
 80039b4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039b6:	003a      	movs	r2, r7
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <MX_TIM6_Init+0x6c>)
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f002 fff1 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80039c6:	f7ff fc32 	bl	800322e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b002      	add	sp, #8
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	20000144 	.word	0x20000144
 80039d8:	40001000 	.word	0x40001000
 80039dc:	00003e7f 	.word	0x00003e7f

080039e0 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039e6:	2308      	movs	r3, #8
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	0018      	movs	r0, r3
 80039ec:	2310      	movs	r3, #16
 80039ee:	001a      	movs	r2, r3
 80039f0:	2100      	movs	r1, #0
 80039f2:	f004 f93b 	bl	8007c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039f6:	003b      	movs	r3, r7
 80039f8:	0018      	movs	r0, r3
 80039fa:	2308      	movs	r3, #8
 80039fc:	001a      	movs	r2, r3
 80039fe:	2100      	movs	r1, #0
 8003a00:	f004 f934 	bl	8007c6c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8003a04:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a06:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <MX_TIM21_Init+0xa4>)
 8003a08:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 15;
 8003a0a:	4b1d      	ldr	r3, [pc, #116]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8003a16:	4b1a      	ldr	r3, [pc, #104]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <MX_TIM21_Init+0xa8>)
 8003a1a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a1c:	4b18      	ldr	r3, [pc, #96]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a22:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8003a28:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	f002 f938 	bl	8005ca0 <HAL_TIM_Base_Init>
 8003a30:	1e03      	subs	r3, r0, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8003a34:	f7ff fbfb 	bl	800322e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a38:	2108      	movs	r1, #8
 8003a3a:	187b      	adds	r3, r7, r1
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	0152      	lsls	r2, r2, #5
 8003a40:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8003a42:	187a      	adds	r2, r7, r1
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a46:	0011      	movs	r1, r2
 8003a48:	0018      	movs	r0, r3
 8003a4a:	f002 fca1 	bl	8006390 <HAL_TIM_ConfigClockSource>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d001      	beq.n	8003a56 <MX_TIM21_Init+0x76>
  {
    Error_Handler();
 8003a52:	f7ff fbec 	bl	800322e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a56:	003b      	movs	r3, r7
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a5c:	003b      	movs	r3, r7
 8003a5e:	2200      	movs	r2, #0
 8003a60:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8003a62:	003a      	movs	r2, r7
 8003a64:	4b06      	ldr	r3, [pc, #24]	; (8003a80 <MX_TIM21_Init+0xa0>)
 8003a66:	0011      	movs	r1, r2
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f002 ff9b 	bl	80069a4 <HAL_TIMEx_MasterConfigSynchronization>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d001      	beq.n	8003a76 <MX_TIM21_Init+0x96>
  {
    Error_Handler();
 8003a72:	f7ff fbdc 	bl	800322e <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	b006      	add	sp, #24
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	20000184 	.word	0x20000184
 8003a84:	40010800 	.word	0x40010800
 8003a88:	0000ffff 	.word	0x0000ffff

08003a8c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	05db      	lsls	r3, r3, #23
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d106      	bne.n	8003aae <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_TIM_Base_MspInit+0x68>)
 8003aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aa4:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <HAL_TIM_Base_MspInit+0x68>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM21_CLK_ENABLE();
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8003aac:	e01e      	b.n	8003aec <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM6)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <HAL_TIM_Base_MspInit+0x6c>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d10e      	bne.n	8003ad6 <HAL_TIM_Base_MspInit+0x4a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <HAL_TIM_Base_MspInit+0x68>)
 8003aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003abc:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <HAL_TIM_Base_MspInit+0x68>)
 8003abe:	2110      	movs	r1, #16
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	2011      	movs	r0, #17
 8003aca:	f000 fa3b 	bl	8003f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ace:	2011      	movs	r0, #17
 8003ad0:	f000 fa4d 	bl	8003f6e <HAL_NVIC_EnableIRQ>
}
 8003ad4:	e00a      	b.n	8003aec <HAL_TIM_Base_MspInit+0x60>
  else if(tim_baseHandle->Instance==TIM21)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_TIM_Base_MspInit+0x70>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d105      	bne.n	8003aec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8003ae0:	4b04      	ldr	r3, [pc, #16]	; (8003af4 <HAL_TIM_Base_MspInit+0x68>)
 8003ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_TIM_Base_MspInit+0x68>)
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b002      	add	sp, #8
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40001000 	.word	0x40001000
 8003afc:	40010800 	.word	0x40010800

08003b00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b08:	240c      	movs	r4, #12
 8003b0a:	193b      	adds	r3, r7, r4
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	2314      	movs	r3, #20
 8003b10:	001a      	movs	r2, r3
 8003b12:	2100      	movs	r1, #0
 8003b14:	f004 f8aa 	bl	8007c6c <memset>
  if(timHandle->Instance==TIM2)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	2380      	movs	r3, #128	; 0x80
 8003b1e:	05db      	lsls	r3, r3, #23
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d122      	bne.n	8003b6a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b24:	4b13      	ldr	r3, [pc, #76]	; (8003b74 <HAL_TIM_MspPostInit+0x74>)
 8003b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b28:	4b12      	ldr	r3, [pc, #72]	; (8003b74 <HAL_TIM_MspPostInit+0x74>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b30:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_TIM_MspPostInit+0x74>)
 8003b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	4013      	ands	r3, r2
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b3c:	0021      	movs	r1, r4
 8003b3e:	187b      	adds	r3, r7, r1
 8003b40:	2203      	movs	r2, #3
 8003b42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b44:	187b      	adds	r3, r7, r1
 8003b46:	2202      	movs	r2, #2
 8003b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	187b      	adds	r3, r7, r1
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	2200      	movs	r2, #0
 8003b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003b56:	187b      	adds	r3, r7, r1
 8003b58:	2202      	movs	r2, #2
 8003b5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b5c:	187a      	adds	r2, r7, r1
 8003b5e:	23a0      	movs	r3, #160	; 0xa0
 8003b60:	05db      	lsls	r3, r3, #23
 8003b62:	0011      	movs	r1, r2
 8003b64:	0018      	movs	r0, r3
 8003b66:	f000 faa7 	bl	80040b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	b009      	add	sp, #36	; 0x24
 8003b70:	bd90      	pop	{r4, r7, pc}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	40021000 	.word	0x40021000

08003b78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b7c:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003b7e:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <MX_USART2_UART_Init+0x5c>)
 8003b80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003b84:	22e1      	movs	r2, #225	; 0xe1
 8003b86:	0252      	lsls	r2, r2, #9
 8003b88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b8a:	4b11      	ldr	r3, [pc, #68]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8003b9c:	4b0c      	ldr	r3, [pc, #48]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bae:	4b08      	ldr	r3, [pc, #32]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <MX_USART2_UART_Init+0x58>)
 8003bbc:	0018      	movs	r0, r3
 8003bbe:	f002 ff49 	bl	8006a54 <HAL_UART_Init>
 8003bc2:	1e03      	subs	r3, r0, #0
 8003bc4:	d001      	beq.n	8003bca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003bc6:	f7ff fb32 	bl	800322e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bca:	46c0      	nop			; (mov r8, r8)
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	200001c4 	.word	0x200001c4
 8003bd4:	40004400 	.word	0x40004400

08003bd8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bd8:	b590      	push	{r4, r7, lr}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	240c      	movs	r4, #12
 8003be2:	193b      	adds	r3, r7, r4
 8003be4:	0018      	movs	r0, r3
 8003be6:	2314      	movs	r3, #20
 8003be8:	001a      	movs	r2, r3
 8003bea:	2100      	movs	r1, #0
 8003bec:	f004 f83e 	bl	8007c6c <memset>
  if(uartHandle->Instance==USART2)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1c      	ldr	r2, [pc, #112]	; (8003c68 <HAL_UART_MspInit+0x90>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d131      	bne.n	8003c5e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003bfa:	4b1c      	ldr	r3, [pc, #112]	; (8003c6c <HAL_UART_MspInit+0x94>)
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_UART_MspInit+0x94>)
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	0289      	lsls	r1, r1, #10
 8003c04:	430a      	orrs	r2, r1
 8003c06:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_UART_MspInit+0x94>)
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_UART_MspInit+0x94>)
 8003c0e:	2101      	movs	r1, #1
 8003c10:	430a      	orrs	r2, r1
 8003c12:	62da      	str	r2, [r3, #44]	; 0x2c
 8003c14:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_UART_MspInit+0x94>)
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	2201      	movs	r2, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	60bb      	str	r3, [r7, #8]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c20:	0021      	movs	r1, r4
 8003c22:	187b      	adds	r3, r7, r1
 8003c24:	220c      	movs	r2, #12
 8003c26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	187b      	adds	r3, r7, r1
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	187b      	adds	r3, r7, r1
 8003c30:	2200      	movs	r2, #0
 8003c32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c34:	187b      	adds	r3, r7, r1
 8003c36:	2203      	movs	r2, #3
 8003c38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003c3a:	187b      	adds	r3, r7, r1
 8003c3c:	2204      	movs	r2, #4
 8003c3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c40:	187a      	adds	r2, r7, r1
 8003c42:	23a0      	movs	r3, #160	; 0xa0
 8003c44:	05db      	lsls	r3, r3, #23
 8003c46:	0011      	movs	r1, r2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 fa35 	bl	80040b8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	201c      	movs	r0, #28
 8003c54:	f000 f976 	bl	8003f44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c58:	201c      	movs	r0, #28
 8003c5a:	f000 f988 	bl	8003f6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b009      	add	sp, #36	; 0x24
 8003c64:	bd90      	pop	{r4, r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	40004400 	.word	0x40004400
 8003c6c:	40021000 	.word	0x40021000

08003c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003c70:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003c72:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003c74:	480d      	ldr	r0, [pc, #52]	; (8003cac <LoopForever+0x6>)
  ldr r1, =_edata
 8003c76:	490e      	ldr	r1, [pc, #56]	; (8003cb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003c78:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <LoopForever+0xe>)
  movs r3, #0
 8003c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c7c:	e002      	b.n	8003c84 <LoopCopyDataInit>

08003c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c82:	3304      	adds	r3, #4

08003c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c88:	d3f9      	bcc.n	8003c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c8a:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003c8c:	4c0b      	ldr	r4, [pc, #44]	; (8003cbc <LoopForever+0x16>)
  movs r3, #0
 8003c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c90:	e001      	b.n	8003c96 <LoopFillZerobss>

08003c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c94:	3204      	adds	r2, #4

08003c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c98:	d3fb      	bcc.n	8003c92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003c9a:	f7ff fdd7 	bl	800384c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c9e:	f003 ffc1 	bl	8007c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ca2:	f7ff f8af 	bl	8002e04 <main>

08003ca6 <LoopForever>:

LoopForever:
    b LoopForever
 8003ca6:	e7fe      	b.n	8003ca6 <LoopForever>
  ldr   r0, =_estack
 8003ca8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003cb0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003cb4:	08008898 	.word	0x08008898
  ldr r2, =_sbss
 8003cb8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003cbc:	2000025c 	.word	0x2000025c

08003cc0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cc0:	e7fe      	b.n	8003cc0 <ADC1_COMP_IRQHandler>
	...

08003cc4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003cca:	1dfb      	adds	r3, r7, #7
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <HAL_Init+0x3c>)
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	4b0a      	ldr	r3, [pc, #40]	; (8003d00 <HAL_Init+0x3c>)
 8003cd6:	2140      	movs	r1, #64	; 0x40
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f000 f811 	bl	8003d04 <HAL_InitTick>
 8003ce2:	1e03      	subs	r3, r0, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003ce6:	1dfb      	adds	r3, r7, #7
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e001      	b.n	8003cf2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cee:	f7ff fd29 	bl	8003744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cf2:	1dfb      	adds	r3, r7, #7
 8003cf4:	781b      	ldrb	r3, [r3, #0]
}
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	40022000 	.word	0x40022000

08003d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <HAL_InitTick+0x5c>)
 8003d0e:	681c      	ldr	r4, [r3, #0]
 8003d10:	4b14      	ldr	r3, [pc, #80]	; (8003d64 <HAL_InitTick+0x60>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	0019      	movs	r1, r3
 8003d16:	23fa      	movs	r3, #250	; 0xfa
 8003d18:	0098      	lsls	r0, r3, #2
 8003d1a:	f7fc f9ff 	bl	800011c <__udivsi3>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	0019      	movs	r1, r3
 8003d22:	0020      	movs	r0, r4
 8003d24:	f7fc f9fa 	bl	800011c <__udivsi3>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 f92f 	bl	8003f8e <HAL_SYSTICK_Config>
 8003d30:	1e03      	subs	r3, r0, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e00f      	b.n	8003d58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d80b      	bhi.n	8003d56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	2301      	movs	r3, #1
 8003d42:	425b      	negs	r3, r3
 8003d44:	2200      	movs	r2, #0
 8003d46:	0018      	movs	r0, r3
 8003d48:	f000 f8fc 	bl	8003f44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_InitTick+0x64>)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	e000      	b.n	8003d58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b003      	add	sp, #12
 8003d5e:	bd90      	pop	{r4, r7, pc}
 8003d60:	20000008 	.word	0x20000008
 8003d64:	20000010 	.word	0x20000010
 8003d68:	2000000c 	.word	0x2000000c

08003d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_IncTick+0x1c>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	001a      	movs	r2, r3
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_IncTick+0x20>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	18d2      	adds	r2, r2, r3
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_IncTick+0x20>)
 8003d7e:	601a      	str	r2, [r3, #0]
}
 8003d80:	46c0      	nop			; (mov r8, r8)
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	20000010 	.word	0x20000010
 8003d8c:	20000248 	.word	0x20000248

08003d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  return uwTick;
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <HAL_GetTick+0x10>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	0018      	movs	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	20000248 	.word	0x20000248

08003da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_GetTick>
 8003db0:	0003      	movs	r3, r0
 8003db2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	d005      	beq.n	8003dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_Delay+0x44>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	189b      	adds	r3, r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	f7ff ffe0 	bl	8003d90 <HAL_GetTick>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d8f7      	bhi.n	8003dcc <HAL_Delay+0x28>
  {
  }
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b004      	add	sp, #16
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000010 	.word	0x20000010

08003dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	0002      	movs	r2, r0
 8003df4:	1dfb      	adds	r3, r7, #7
 8003df6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b7f      	cmp	r3, #127	; 0x7f
 8003dfe:	d809      	bhi.n	8003e14 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e00:	1dfb      	adds	r3, r7, #7
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	001a      	movs	r2, r3
 8003e06:	231f      	movs	r3, #31
 8003e08:	401a      	ands	r2, r3
 8003e0a:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <__NVIC_EnableIRQ+0x30>)
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	4091      	lsls	r1, r2
 8003e10:	000a      	movs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]
  }
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	e000e100 	.word	0xe000e100

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b590      	push	{r4, r7, lr}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	0002      	movs	r2, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	1dfb      	adds	r3, r7, #7
 8003e2c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003e2e:	1dfb      	adds	r3, r7, #7
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b7f      	cmp	r3, #127	; 0x7f
 8003e34:	d828      	bhi.n	8003e88 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e36:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <__NVIC_SetPriority+0xd4>)
 8003e38:	1dfb      	adds	r3, r7, #7
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	089b      	lsrs	r3, r3, #2
 8003e40:	33c0      	adds	r3, #192	; 0xc0
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	589b      	ldr	r3, [r3, r2]
 8003e46:	1dfa      	adds	r2, r7, #7
 8003e48:	7812      	ldrb	r2, [r2, #0]
 8003e4a:	0011      	movs	r1, r2
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	400a      	ands	r2, r1
 8003e50:	00d2      	lsls	r2, r2, #3
 8003e52:	21ff      	movs	r1, #255	; 0xff
 8003e54:	4091      	lsls	r1, r2
 8003e56:	000a      	movs	r2, r1
 8003e58:	43d2      	mvns	r2, r2
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	22ff      	movs	r2, #255	; 0xff
 8003e64:	401a      	ands	r2, r3
 8003e66:	1dfb      	adds	r3, r7, #7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	4003      	ands	r3, r0
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e74:	481f      	ldr	r0, [pc, #124]	; (8003ef4 <__NVIC_SetPriority+0xd4>)
 8003e76:	1dfb      	adds	r3, r7, #7
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	b25b      	sxtb	r3, r3
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	33c0      	adds	r3, #192	; 0xc0
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e86:	e031      	b.n	8003eec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <__NVIC_SetPriority+0xd8>)
 8003e8a:	1dfb      	adds	r3, r7, #7
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	0019      	movs	r1, r3
 8003e90:	230f      	movs	r3, #15
 8003e92:	400b      	ands	r3, r1
 8003e94:	3b08      	subs	r3, #8
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	3306      	adds	r3, #6
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1dfa      	adds	r2, r7, #7
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	0011      	movs	r1, r2
 8003ea8:	2203      	movs	r2, #3
 8003eaa:	400a      	ands	r2, r1
 8003eac:	00d2      	lsls	r2, r2, #3
 8003eae:	21ff      	movs	r1, #255	; 0xff
 8003eb0:	4091      	lsls	r1, r2
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	43d2      	mvns	r2, r2
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	22ff      	movs	r2, #255	; 0xff
 8003ec0:	401a      	ands	r2, r3
 8003ec2:	1dfb      	adds	r3, r7, #7
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	2303      	movs	r3, #3
 8003eca:	4003      	ands	r3, r0
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003ed0:	4809      	ldr	r0, [pc, #36]	; (8003ef8 <__NVIC_SetPriority+0xd8>)
 8003ed2:	1dfb      	adds	r3, r7, #7
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	001c      	movs	r4, r3
 8003ed8:	230f      	movs	r3, #15
 8003eda:	4023      	ands	r3, r4
 8003edc:	3b08      	subs	r3, #8
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	3306      	adds	r3, #6
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	18c3      	adds	r3, r0, r3
 8003ee8:	3304      	adds	r3, #4
 8003eea:	601a      	str	r2, [r3, #0]
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b003      	add	sp, #12
 8003ef2:	bd90      	pop	{r4, r7, pc}
 8003ef4:	e000e100 	.word	0xe000e100
 8003ef8:	e000ed00 	.word	0xe000ed00

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	1e5a      	subs	r2, r3, #1
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	045b      	lsls	r3, r3, #17
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d301      	bcc.n	8003f14 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f10:	2301      	movs	r3, #1
 8003f12:	e010      	b.n	8003f36 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f14:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <SysTick_Config+0x44>)
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	425b      	negs	r3, r3
 8003f20:	2103      	movs	r1, #3
 8003f22:	0018      	movs	r0, r3
 8003f24:	f7ff ff7c 	bl	8003e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <SysTick_Config+0x44>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <SysTick_Config+0x44>)
 8003f30:	2207      	movs	r2, #7
 8003f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	e000e010 	.word	0xe000e010

08003f44 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	210f      	movs	r1, #15
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	1c02      	adds	r2, r0, #0
 8003f54:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	187b      	adds	r3, r7, r1
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	b25b      	sxtb	r3, r3
 8003f5e:	0011      	movs	r1, r2
 8003f60:	0018      	movs	r0, r3
 8003f62:	f7ff ff5d 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b082      	sub	sp, #8
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	0002      	movs	r2, r0
 8003f76:	1dfb      	adds	r3, r7, #7
 8003f78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	b25b      	sxtb	r3, r3
 8003f80:	0018      	movs	r0, r3
 8003f82:	f7ff ff33 	bl	8003dec <__NVIC_EnableIRQ>
}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	b002      	add	sp, #8
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff ffaf 	bl	8003efc <SysTick_Config>
 8003f9e:	0003      	movs	r3, r0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b002      	add	sp, #8
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb0:	230f      	movs	r3, #15
 8003fb2:	18fb      	adds	r3, r7, r3
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2225      	movs	r2, #37	; 0x25
 8003fbc:	5c9b      	ldrb	r3, [r3, r2]
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d008      	beq.n	8003fd6 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2224      	movs	r2, #36	; 0x24
 8003fce:	2100      	movs	r1, #0
 8003fd0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e024      	b.n	8004020 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	210e      	movs	r1, #14
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2101      	movs	r1, #1
 8003ff2:	438a      	bics	r2, r1
 8003ff4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	221c      	movs	r2, #28
 8003ffc:	401a      	ands	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	2101      	movs	r1, #1
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2225      	movs	r2, #37	; 0x25
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2224      	movs	r2, #36	; 0x24
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]

    return status;
 800401a:	230f      	movs	r3, #15
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004030:	210f      	movs	r1, #15
 8004032:	187b      	adds	r3, r7, r1
 8004034:	2200      	movs	r2, #0
 8004036:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2225      	movs	r2, #37	; 0x25
 800403c:	5c9b      	ldrb	r3, [r3, r2]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d006      	beq.n	8004052 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2204      	movs	r2, #4
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800404a:	187b      	adds	r3, r7, r1
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e02a      	b.n	80040a8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	210e      	movs	r1, #14
 800405e:	438a      	bics	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2101      	movs	r1, #1
 800406e:	438a      	bics	r2, r1
 8004070:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	221c      	movs	r2, #28
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	2101      	movs	r1, #1
 8004080:	4091      	lsls	r1, r2
 8004082:	000a      	movs	r2, r1
 8004084:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2225      	movs	r2, #37	; 0x25
 800408a:	2101      	movs	r1, #1
 800408c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2224      	movs	r2, #36	; 0x24
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	2b00      	cmp	r3, #0
 800409c:	d004      	beq.n	80040a8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	0010      	movs	r0, r2
 80040a6:	4798      	blx	r3
    }
  }
  return status;
 80040a8:	230f      	movs	r3, #15
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80040ce:	e14f      	b.n	8004370 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2101      	movs	r1, #1
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4091      	lsls	r1, r2
 80040da:	000a      	movs	r2, r1
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d100      	bne.n	80040e8 <HAL_GPIO_Init+0x30>
 80040e6:	e140      	b.n	800436a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2203      	movs	r2, #3
 80040ee:	4013      	ands	r3, r2
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d005      	beq.n	8004100 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2203      	movs	r2, #3
 80040fa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d130      	bne.n	8004162 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2203      	movs	r2, #3
 800410c:	409a      	lsls	r2, r3
 800410e:	0013      	movs	r3, r2
 8004110:	43da      	mvns	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	409a      	lsls	r2, r3
 8004122:	0013      	movs	r3, r2
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004136:	2201      	movs	r2, #1
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	43da      	mvns	r2, r3
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	091b      	lsrs	r3, r3, #4
 800414c:	2201      	movs	r2, #1
 800414e:	401a      	ands	r2, r3
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	409a      	lsls	r2, r3
 8004154:	0013      	movs	r3, r2
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2203      	movs	r2, #3
 8004168:	4013      	ands	r3, r2
 800416a:	2b03      	cmp	r3, #3
 800416c:	d017      	beq.n	800419e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	2203      	movs	r2, #3
 800417a:	409a      	lsls	r2, r3
 800417c:	0013      	movs	r3, r2
 800417e:	43da      	mvns	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	409a      	lsls	r2, r3
 8004190:	0013      	movs	r3, r2
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	4313      	orrs	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2203      	movs	r2, #3
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d123      	bne.n	80041f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	08da      	lsrs	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3208      	adds	r2, #8
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	58d3      	ldr	r3, [r2, r3]
 80041b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2207      	movs	r2, #7
 80041bc:	4013      	ands	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	220f      	movs	r2, #15
 80041c2:	409a      	lsls	r2, r3
 80041c4:	0013      	movs	r3, r2
 80041c6:	43da      	mvns	r2, r3
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4013      	ands	r3, r2
 80041cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2107      	movs	r1, #7
 80041d6:	400b      	ands	r3, r1
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	409a      	lsls	r2, r3
 80041dc:	0013      	movs	r3, r2
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	08da      	lsrs	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	6939      	ldr	r1, [r7, #16]
 80041f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	43da      	mvns	r2, r3
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4013      	ands	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2203      	movs	r2, #3
 8004210:	401a      	ands	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	409a      	lsls	r2, r3
 8004218:	0013      	movs	r3, r2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	23c0      	movs	r3, #192	; 0xc0
 800422c:	029b      	lsls	r3, r3, #10
 800422e:	4013      	ands	r3, r2
 8004230:	d100      	bne.n	8004234 <HAL_GPIO_Init+0x17c>
 8004232:	e09a      	b.n	800436a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004234:	4b54      	ldr	r3, [pc, #336]	; (8004388 <HAL_GPIO_Init+0x2d0>)
 8004236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_GPIO_Init+0x2d0>)
 800423a:	2101      	movs	r1, #1
 800423c:	430a      	orrs	r2, r1
 800423e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004240:	4a52      	ldr	r2, [pc, #328]	; (800438c <HAL_GPIO_Init+0x2d4>)
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	089b      	lsrs	r3, r3, #2
 8004246:	3302      	adds	r3, #2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	589b      	ldr	r3, [r3, r2]
 800424c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2203      	movs	r2, #3
 8004252:	4013      	ands	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	220f      	movs	r2, #15
 8004258:	409a      	lsls	r2, r3
 800425a:	0013      	movs	r3, r2
 800425c:	43da      	mvns	r2, r3
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4013      	ands	r3, r2
 8004262:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	23a0      	movs	r3, #160	; 0xa0
 8004268:	05db      	lsls	r3, r3, #23
 800426a:	429a      	cmp	r2, r3
 800426c:	d019      	beq.n	80042a2 <HAL_GPIO_Init+0x1ea>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a47      	ldr	r2, [pc, #284]	; (8004390 <HAL_GPIO_Init+0x2d8>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <HAL_GPIO_Init+0x1e6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a46      	ldr	r2, [pc, #280]	; (8004394 <HAL_GPIO_Init+0x2dc>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00d      	beq.n	800429a <HAL_GPIO_Init+0x1e2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a45      	ldr	r2, [pc, #276]	; (8004398 <HAL_GPIO_Init+0x2e0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <HAL_GPIO_Init+0x1de>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a44      	ldr	r2, [pc, #272]	; (800439c <HAL_GPIO_Init+0x2e4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d101      	bne.n	8004292 <HAL_GPIO_Init+0x1da>
 800428e:	2305      	movs	r3, #5
 8004290:	e008      	b.n	80042a4 <HAL_GPIO_Init+0x1ec>
 8004292:	2306      	movs	r3, #6
 8004294:	e006      	b.n	80042a4 <HAL_GPIO_Init+0x1ec>
 8004296:	2303      	movs	r3, #3
 8004298:	e004      	b.n	80042a4 <HAL_GPIO_Init+0x1ec>
 800429a:	2302      	movs	r3, #2
 800429c:	e002      	b.n	80042a4 <HAL_GPIO_Init+0x1ec>
 800429e:	2301      	movs	r3, #1
 80042a0:	e000      	b.n	80042a4 <HAL_GPIO_Init+0x1ec>
 80042a2:	2300      	movs	r3, #0
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	2103      	movs	r1, #3
 80042a8:	400a      	ands	r2, r1
 80042aa:	0092      	lsls	r2, r2, #2
 80042ac:	4093      	lsls	r3, r2
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042b4:	4935      	ldr	r1, [pc, #212]	; (800438c <HAL_GPIO_Init+0x2d4>)
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	089b      	lsrs	r3, r3, #2
 80042ba:	3302      	adds	r3, #2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042c2:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	43da      	mvns	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	025b      	lsls	r3, r3, #9
 80042da:	4013      	ands	r3, r2
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042e6:	4b2e      	ldr	r3, [pc, #184]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80042ec:	4b2c      	ldr	r3, [pc, #176]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	43da      	mvns	r2, r3
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	029b      	lsls	r3, r3, #10
 8004304:	4013      	ands	r3, r2
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004310:	4b23      	ldr	r3, [pc, #140]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004316:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	43da      	mvns	r2, r3
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	035b      	lsls	r3, r3, #13
 800432e:	4013      	ands	r3, r2
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800433a:	4b19      	ldr	r3, [pc, #100]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004340:	4b17      	ldr	r3, [pc, #92]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43da      	mvns	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	4013      	ands	r3, r2
 800434e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	039b      	lsls	r3, r3, #14
 8004358:	4013      	ands	r3, r2
 800435a:	d003      	beq.n	8004364 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004364:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <HAL_GPIO_Init+0x2e8>)
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3301      	adds	r3, #1
 800436e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	40da      	lsrs	r2, r3
 8004378:	1e13      	subs	r3, r2, #0
 800437a:	d000      	beq.n	800437e <HAL_GPIO_Init+0x2c6>
 800437c:	e6a8      	b.n	80040d0 <HAL_GPIO_Init+0x18>
  }
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46c0      	nop			; (mov r8, r8)
 8004382:	46bd      	mov	sp, r7
 8004384:	b006      	add	sp, #24
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40021000 	.word	0x40021000
 800438c:	40010000 	.word	0x40010000
 8004390:	50000400 	.word	0x50000400
 8004394:	50000800 	.word	0x50000800
 8004398:	50000c00 	.word	0x50000c00
 800439c:	50001c00 	.word	0x50001c00
 80043a0:	40010400 	.word	0x40010400

080043a4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	000a      	movs	r2, r1
 80043ae:	1cbb      	adds	r3, r7, #2
 80043b0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	1cba      	adds	r2, r7, #2
 80043b8:	8812      	ldrh	r2, [r2, #0]
 80043ba:	4013      	ands	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80043be:	230f      	movs	r3, #15
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	e003      	b.n	80043d0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80043c8:	230f      	movs	r3, #15
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80043d0:	230f      	movs	r3, #15
 80043d2:	18fb      	adds	r3, r7, r3
 80043d4:	781b      	ldrb	r3, [r3, #0]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b082      	sub	sp, #8
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	0008      	movs	r0, r1
 80043e8:	0011      	movs	r1, r2
 80043ea:	1cbb      	adds	r3, r7, #2
 80043ec:	1c02      	adds	r2, r0, #0
 80043ee:	801a      	strh	r2, [r3, #0]
 80043f0:	1c7b      	adds	r3, r7, #1
 80043f2:	1c0a      	adds	r2, r1, #0
 80043f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043f6:	1c7b      	adds	r3, r7, #1
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043fe:	1cbb      	adds	r3, r7, #2
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004406:	e003      	b.n	8004410 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004408:	1cbb      	adds	r3, r7, #2
 800440a:	881a      	ldrh	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004410:	46c0      	nop			; (mov r8, r8)
 8004412:	46bd      	mov	sp, r7
 8004414:	b002      	add	sp, #8
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	0002      	movs	r2, r0
 8004420:	1dbb      	adds	r3, r7, #6
 8004422:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004424:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	1dba      	adds	r2, r7, #6
 800442a:	8812      	ldrh	r2, [r2, #0]
 800442c:	4013      	ands	r3, r2
 800442e:	d008      	beq.n	8004442 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004430:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004432:	1dba      	adds	r2, r7, #6
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004438:	1dbb      	adds	r3, r7, #6
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	0018      	movs	r0, r3
 800443e:	f7fe feb3 	bl	80031a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b002      	add	sp, #8
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	40010400 	.word	0x40010400

08004450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e082      	b.n	8004568 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2241      	movs	r2, #65	; 0x41
 8004466:	5c9b      	ldrb	r3, [r3, r2]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2240      	movs	r2, #64	; 0x40
 8004472:	2100      	movs	r1, #0
 8004474:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	0018      	movs	r0, r3
 800447a:	f7fe fc7d 	bl	8002d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2241      	movs	r2, #65	; 0x41
 8004482:	2124      	movs	r1, #36	; 0x24
 8004484:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2101      	movs	r1, #1
 8004492:	438a      	bics	r2, r1
 8004494:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4934      	ldr	r1, [pc, #208]	; (8004570 <HAL_I2C_Init+0x120>)
 80044a0:	400a      	ands	r2, r1
 80044a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4931      	ldr	r1, [pc, #196]	; (8004574 <HAL_I2C_Init+0x124>)
 80044b0:	400a      	ands	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d108      	bne.n	80044ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	0209      	lsls	r1, r1, #8
 80044c8:	430a      	orrs	r2, r1
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	e007      	b.n	80044de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2184      	movs	r1, #132	; 0x84
 80044d8:	0209      	lsls	r1, r1, #8
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d104      	bne.n	80044f0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2280      	movs	r2, #128	; 0x80
 80044ec:	0112      	lsls	r2, r2, #4
 80044ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	491f      	ldr	r1, [pc, #124]	; (8004578 <HAL_I2C_Init+0x128>)
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	491a      	ldr	r1, [pc, #104]	; (8004574 <HAL_I2C_Init+0x124>)
 800450c:	400a      	ands	r2, r1
 800450e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	431a      	orrs	r2, r3
 800451a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	69d9      	ldr	r1, [r3, #28]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2101      	movs	r1, #1
 8004546:	430a      	orrs	r2, r1
 8004548:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2241      	movs	r2, #65	; 0x41
 8004554:	2120      	movs	r1, #32
 8004556:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2242      	movs	r2, #66	; 0x42
 8004562:	2100      	movs	r1, #0
 8004564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	0018      	movs	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	b002      	add	sp, #8
 800456e:	bd80      	pop	{r7, pc}
 8004570:	f0ffffff 	.word	0xf0ffffff
 8004574:	ffff7fff 	.word	0xffff7fff
 8004578:	02008000 	.word	0x02008000

0800457c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800457c:	b590      	push	{r4, r7, lr}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af02      	add	r7, sp, #8
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	0008      	movs	r0, r1
 8004586:	607a      	str	r2, [r7, #4]
 8004588:	0019      	movs	r1, r3
 800458a:	230a      	movs	r3, #10
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	1c02      	adds	r2, r0, #0
 8004590:	801a      	strh	r2, [r3, #0]
 8004592:	2308      	movs	r3, #8
 8004594:	18fb      	adds	r3, r7, r3
 8004596:	1c0a      	adds	r2, r1, #0
 8004598:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2241      	movs	r2, #65	; 0x41
 800459e:	5c9b      	ldrb	r3, [r3, r2]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b20      	cmp	r3, #32
 80045a4:	d000      	beq.n	80045a8 <HAL_I2C_Master_Transmit+0x2c>
 80045a6:	e0e7      	b.n	8004778 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2240      	movs	r2, #64	; 0x40
 80045ac:	5c9b      	ldrb	r3, [r3, r2]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d101      	bne.n	80045b6 <HAL_I2C_Master_Transmit+0x3a>
 80045b2:	2302      	movs	r3, #2
 80045b4:	e0e1      	b.n	800477a <HAL_I2C_Master_Transmit+0x1fe>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2240      	movs	r2, #64	; 0x40
 80045ba:	2101      	movs	r1, #1
 80045bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045be:	f7ff fbe7 	bl	8003d90 <HAL_GetTick>
 80045c2:	0003      	movs	r3, r0
 80045c4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045c6:	2380      	movs	r3, #128	; 0x80
 80045c8:	0219      	lsls	r1, r3, #8
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	9300      	str	r3, [sp, #0]
 80045d0:	2319      	movs	r3, #25
 80045d2:	2201      	movs	r2, #1
 80045d4:	f000 fa16 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80045d8:	1e03      	subs	r3, r0, #0
 80045da:	d001      	beq.n	80045e0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0cc      	b.n	800477a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2241      	movs	r2, #65	; 0x41
 80045e4:	2121      	movs	r1, #33	; 0x21
 80045e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2242      	movs	r2, #66	; 0x42
 80045ec:	2110      	movs	r1, #16
 80045ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2208      	movs	r2, #8
 8004600:	18ba      	adds	r2, r7, r2
 8004602:	8812      	ldrh	r2, [r2, #0]
 8004604:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2bff      	cmp	r3, #255	; 0xff
 8004614:	d911      	bls.n	800463a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004620:	b2da      	uxtb	r2, r3
 8004622:	2380      	movs	r3, #128	; 0x80
 8004624:	045c      	lsls	r4, r3, #17
 8004626:	230a      	movs	r3, #10
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	8819      	ldrh	r1, [r3, #0]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	4b55      	ldr	r3, [pc, #340]	; (8004784 <HAL_I2C_Master_Transmit+0x208>)
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	0023      	movs	r3, r4
 8004634:	f000 fb1a 	bl	8004c6c <I2C_TransferConfig>
 8004638:	e075      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	b2da      	uxtb	r2, r3
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	049c      	lsls	r4, r3, #18
 800464e:	230a      	movs	r3, #10
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	8819      	ldrh	r1, [r3, #0]
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	4b4b      	ldr	r3, [pc, #300]	; (8004784 <HAL_I2C_Master_Transmit+0x208>)
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	0023      	movs	r3, r4
 800465c:	f000 fb06 	bl	8004c6c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004660:	e061      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	0018      	movs	r0, r3
 800466a:	f000 fa0a 	bl	8004a82 <I2C_WaitOnTXISFlagUntilTimeout>
 800466e:	1e03      	subs	r3, r0, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e081      	b.n	800477a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	781a      	ldrb	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d03a      	beq.n	8004726 <HAL_I2C_Master_Transmit+0x1aa>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d136      	bne.n	8004726 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	0013      	movs	r3, r2
 80046c2:	2200      	movs	r2, #0
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	f000 f99d 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80046ca:	1e03      	subs	r3, r0, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e053      	b.n	800477a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2bff      	cmp	r3, #255	; 0xff
 80046da:	d911      	bls.n	8004700 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	22ff      	movs	r2, #255	; 0xff
 80046e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	2380      	movs	r3, #128	; 0x80
 80046ea:	045c      	lsls	r4, r3, #17
 80046ec:	230a      	movs	r3, #10
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	8819      	ldrh	r1, [r3, #0]
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	2300      	movs	r3, #0
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	0023      	movs	r3, r4
 80046fa:	f000 fab7 	bl	8004c6c <I2C_TransferConfig>
 80046fe:	e012      	b.n	8004726 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800470e:	b2da      	uxtb	r2, r3
 8004710:	2380      	movs	r3, #128	; 0x80
 8004712:	049c      	lsls	r4, r3, #18
 8004714:	230a      	movs	r3, #10
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	8819      	ldrh	r1, [r3, #0]
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	2300      	movs	r3, #0
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	0023      	movs	r3, r4
 8004722:	f000 faa3 	bl	8004c6c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d198      	bne.n	8004662 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	0018      	movs	r0, r3
 8004738:	f000 f9e2 	bl	8004b00 <I2C_WaitOnSTOPFlagUntilTimeout>
 800473c:	1e03      	subs	r3, r0, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e01a      	b.n	800477a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2220      	movs	r2, #32
 800474a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	490c      	ldr	r1, [pc, #48]	; (8004788 <HAL_I2C_Master_Transmit+0x20c>)
 8004758:	400a      	ands	r2, r1
 800475a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2241      	movs	r2, #65	; 0x41
 8004760:	2120      	movs	r1, #32
 8004762:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2242      	movs	r2, #66	; 0x42
 8004768:	2100      	movs	r1, #0
 800476a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2240      	movs	r2, #64	; 0x40
 8004770:	2100      	movs	r1, #0
 8004772:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e000      	b.n	800477a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004778:	2302      	movs	r3, #2
  }
}
 800477a:	0018      	movs	r0, r3
 800477c:	46bd      	mov	sp, r7
 800477e:	b007      	add	sp, #28
 8004780:	bd90      	pop	{r4, r7, pc}
 8004782:	46c0      	nop			; (mov r8, r8)
 8004784:	80002000 	.word	0x80002000
 8004788:	fe00e800 	.word	0xfe00e800

0800478c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b08a      	sub	sp, #40	; 0x28
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	607a      	str	r2, [r7, #4]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	230a      	movs	r3, #10
 800479a:	18fb      	adds	r3, r7, r3
 800479c:	1c0a      	adds	r2, r1, #0
 800479e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2241      	movs	r2, #65	; 0x41
 80047a8:	5c9b      	ldrb	r3, [r3, r2]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d000      	beq.n	80047b2 <HAL_I2C_IsDeviceReady+0x26>
 80047b0:	e0fe      	b.n	80049b0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699a      	ldr	r2, [r3, #24]
 80047b8:	2380      	movs	r3, #128	; 0x80
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	401a      	ands	r2, r3
 80047be:	2380      	movs	r3, #128	; 0x80
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d101      	bne.n	80047ca <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	e0f3      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2240      	movs	r2, #64	; 0x40
 80047ce:	5c9b      	ldrb	r3, [r3, r2]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2C_IsDeviceReady+0x4c>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e0ec      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	2101      	movs	r1, #1
 80047de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2241      	movs	r2, #65	; 0x41
 80047e4:	2124      	movs	r1, #36	; 0x24
 80047e6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2200      	movs	r2, #0
 80047ec:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_I2C_IsDeviceReady+0x7a>
 80047f6:	230a      	movs	r3, #10
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	059b      	lsls	r3, r3, #22
 80047fe:	0d9b      	lsrs	r3, r3, #22
 8004800:	4a6e      	ldr	r2, [pc, #440]	; (80049bc <HAL_I2C_IsDeviceReady+0x230>)
 8004802:	431a      	orrs	r2, r3
 8004804:	e007      	b.n	8004816 <HAL_I2C_IsDeviceReady+0x8a>
 8004806:	230a      	movs	r3, #10
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	059b      	lsls	r3, r3, #22
 800480e:	0d9b      	lsrs	r3, r3, #22
 8004810:	22a0      	movs	r2, #160	; 0xa0
 8004812:	0192      	lsls	r2, r2, #6
 8004814:	431a      	orrs	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800481c:	f7ff fab8 	bl	8003d90 <HAL_GetTick>
 8004820:	0003      	movs	r3, r0
 8004822:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2220      	movs	r2, #32
 800482c:	4013      	ands	r3, r2
 800482e:	3b20      	subs	r3, #32
 8004830:	425a      	negs	r2, r3
 8004832:	4153      	adcs	r3, r2
 8004834:	b2da      	uxtb	r2, r3
 8004836:	231f      	movs	r3, #31
 8004838:	18fb      	adds	r3, r7, r3
 800483a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2210      	movs	r2, #16
 8004844:	4013      	ands	r3, r2
 8004846:	3b10      	subs	r3, #16
 8004848:	425a      	negs	r2, r3
 800484a:	4153      	adcs	r3, r2
 800484c:	b2da      	uxtb	r2, r3
 800484e:	231e      	movs	r3, #30
 8004850:	18fb      	adds	r3, r7, r3
 8004852:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004854:	e035      	b.n	80048c2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	3301      	adds	r3, #1
 800485a:	d01a      	beq.n	8004892 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800485c:	f7ff fa98 	bl	8003d90 <HAL_GetTick>
 8004860:	0002      	movs	r2, r0
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d302      	bcc.n	8004872 <HAL_I2C_IsDeviceReady+0xe6>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2241      	movs	r2, #65	; 0x41
 8004876:	2120      	movs	r1, #32
 8004878:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487e:	2220      	movs	r2, #32
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2240      	movs	r2, #64	; 0x40
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e08f      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2220      	movs	r2, #32
 800489a:	4013      	ands	r3, r2
 800489c:	3b20      	subs	r3, #32
 800489e:	425a      	negs	r2, r3
 80048a0:	4153      	adcs	r3, r2
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	231f      	movs	r3, #31
 80048a6:	18fb      	adds	r3, r7, r3
 80048a8:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	2210      	movs	r2, #16
 80048b2:	4013      	ands	r3, r2
 80048b4:	3b10      	subs	r3, #16
 80048b6:	425a      	negs	r2, r3
 80048b8:	4153      	adcs	r3, r2
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	231e      	movs	r3, #30
 80048be:	18fb      	adds	r3, r7, r3
 80048c0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80048c2:	231f      	movs	r3, #31
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <HAL_I2C_IsDeviceReady+0x14a>
 80048cc:	231e      	movs	r3, #30
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d0bf      	beq.n	8004856 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2210      	movs	r2, #16
 80048de:	4013      	ands	r3, r2
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d01a      	beq.n	800491a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80048e4:	683a      	ldr	r2, [r7, #0]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	0013      	movs	r3, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	2120      	movs	r1, #32
 80048f2:	f000 f887 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e059      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2220      	movs	r2, #32
 8004904:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2241      	movs	r2, #65	; 0x41
 800490a:	2120      	movs	r1, #32
 800490c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	e04b      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	0013      	movs	r3, r2
 8004924:	2200      	movs	r2, #0
 8004926:	2120      	movs	r1, #32
 8004928:	f000 f86c 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 800492c:	1e03      	subs	r3, r0, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e03e      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2210      	movs	r2, #16
 800493a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2220      	movs	r2, #32
 8004942:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	429a      	cmp	r2, r3
 800494a:	d119      	bne.n	8004980 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2180      	movs	r1, #128	; 0x80
 8004958:	01c9      	lsls	r1, r1, #7
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	0013      	movs	r3, r2
 8004968:	2200      	movs	r2, #0
 800496a:	2120      	movs	r1, #32
 800496c:	f000 f84a 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d001      	beq.n	8004978 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e01c      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2220      	movs	r2, #32
 800497e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	3301      	adds	r3, #1
 8004984:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d900      	bls.n	8004990 <HAL_I2C_IsDeviceReady+0x204>
 800498e:	e72e      	b.n	80047ee <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2241      	movs	r2, #65	; 0x41
 8004994:	2120      	movs	r1, #32
 8004996:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499c:	2220      	movs	r2, #32
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2240      	movs	r2, #64	; 0x40
 80049a8:	2100      	movs	r1, #0
 80049aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80049b0:	2302      	movs	r3, #2
  }
}
 80049b2:	0018      	movs	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	b008      	add	sp, #32
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	46c0      	nop			; (mov r8, r8)
 80049bc:	02002000 	.word	0x02002000

080049c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2202      	movs	r2, #2
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d103      	bne.n	80049de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2200      	movs	r2, #0
 80049dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	2201      	movs	r2, #1
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d007      	beq.n	80049fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699a      	ldr	r2, [r3, #24]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2101      	movs	r1, #1
 80049f8:	430a      	orrs	r2, r1
 80049fa:	619a      	str	r2, [r3, #24]
  }
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	46bd      	mov	sp, r7
 8004a00:	b002      	add	sp, #8
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	1dfb      	adds	r3, r7, #7
 8004a12:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a14:	e021      	b.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	d01e      	beq.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1c:	f7ff f9b8 	bl	8003d90 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d113      	bne.n	8004a5a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	2220      	movs	r2, #32
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2241      	movs	r2, #65	; 0x41
 8004a42:	2120      	movs	r1, #32
 8004a44:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2242      	movs	r2, #66	; 0x42
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e00f      	b.n	8004a7a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	68ba      	ldr	r2, [r7, #8]
 8004a62:	4013      	ands	r3, r2
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	425a      	negs	r2, r3
 8004a6a:	4153      	adcs	r3, r2
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	001a      	movs	r2, r3
 8004a70:	1dfb      	adds	r3, r7, #7
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d0ce      	beq.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b004      	add	sp, #16
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a8e:	e02b      	b.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f86e 	bl	8004b78 <I2C_IsAcknowledgeFailed>
 8004a9c:	1e03      	subs	r3, r0, #0
 8004a9e:	d001      	beq.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e029      	b.n	8004af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	d01e      	beq.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7ff f971 	bl	8003d90 <HAL_GetTick>
 8004aae:	0002      	movs	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d113      	bne.n	8004ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2241      	movs	r2, #65	; 0x41
 8004ad0:	2120      	movs	r1, #32
 8004ad2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2242      	movs	r2, #66	; 0x42
 8004ad8:	2100      	movs	r1, #0
 8004ada:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e007      	b.n	8004af8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2202      	movs	r2, #2
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d1cc      	bne.n	8004a90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	0018      	movs	r0, r3
 8004afa:	46bd      	mov	sp, r7
 8004afc:	b004      	add	sp, #16
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b0c:	e028      	b.n	8004b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 f82f 	bl	8004b78 <I2C_IsAcknowledgeFailed>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d001      	beq.n	8004b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e026      	b.n	8004b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7ff f935 	bl	8003d90 <HAL_GetTick>
 8004b26:	0002      	movs	r2, r0
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d113      	bne.n	8004b60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2241      	movs	r2, #65	; 0x41
 8004b48:	2120      	movs	r1, #32
 8004b4a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2242      	movs	r2, #66	; 0x42
 8004b50:	2100      	movs	r1, #0
 8004b52:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2240      	movs	r2, #64	; 0x40
 8004b58:	2100      	movs	r1, #0
 8004b5a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e007      	b.n	8004b70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	2220      	movs	r2, #32
 8004b68:	4013      	ands	r3, r2
 8004b6a:	2b20      	cmp	r3, #32
 8004b6c:	d1cf      	bne.n	8004b0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	0018      	movs	r0, r3
 8004b72:	46bd      	mov	sp, r7
 8004b74:	b004      	add	sp, #16
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b10      	cmp	r3, #16
 8004b90:	d164      	bne.n	8004c5c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	2380      	movs	r3, #128	; 0x80
 8004b9a:	049b      	lsls	r3, r3, #18
 8004b9c:	401a      	ands	r2, r3
 8004b9e:	2380      	movs	r3, #128	; 0x80
 8004ba0:	049b      	lsls	r3, r3, #18
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d02b      	beq.n	8004bfe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2180      	movs	r1, #128	; 0x80
 8004bb2:	01c9      	lsls	r1, r1, #7
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bb8:	e021      	b.n	8004bfe <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	d01e      	beq.n	8004bfe <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc0:	f7ff f8e6 	bl	8003d90 <HAL_GetTick>
 8004bc4:	0002      	movs	r2, r0
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d302      	bcc.n	8004bd6 <I2C_IsAcknowledgeFailed+0x5e>
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d113      	bne.n	8004bfe <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	2220      	movs	r2, #32
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2241      	movs	r2, #65	; 0x41
 8004be6:	2120      	movs	r1, #32
 8004be8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2242      	movs	r2, #66	; 0x42
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2240      	movs	r2, #64	; 0x40
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e02f      	b.n	8004c5e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2220      	movs	r2, #32
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d1d6      	bne.n	8004bba <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2210      	movs	r2, #16
 8004c12:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	0018      	movs	r0, r3
 8004c20:	f7ff fece 	bl	80049c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	490e      	ldr	r1, [pc, #56]	; (8004c68 <I2C_IsAcknowledgeFailed+0xf0>)
 8004c30:	400a      	ands	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c38:	2204      	movs	r2, #4
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2241      	movs	r2, #65	; 0x41
 8004c44:	2120      	movs	r1, #32
 8004c46:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2242      	movs	r2, #66	; 0x42
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2240      	movs	r2, #64	; 0x40
 8004c54:	2100      	movs	r1, #0
 8004c56:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b004      	add	sp, #16
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	fe00e800 	.word	0xfe00e800

08004c6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	0008      	movs	r0, r1
 8004c76:	0011      	movs	r1, r2
 8004c78:	607b      	str	r3, [r7, #4]
 8004c7a:	240a      	movs	r4, #10
 8004c7c:	193b      	adds	r3, r7, r4
 8004c7e:	1c02      	adds	r2, r0, #0
 8004c80:	801a      	strh	r2, [r3, #0]
 8004c82:	2009      	movs	r0, #9
 8004c84:	183b      	adds	r3, r7, r0
 8004c86:	1c0a      	adds	r2, r1, #0
 8004c88:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	0d51      	lsrs	r1, r2, #21
 8004c94:	2280      	movs	r2, #128	; 0x80
 8004c96:	00d2      	lsls	r2, r2, #3
 8004c98:	400a      	ands	r2, r1
 8004c9a:	490e      	ldr	r1, [pc, #56]	; (8004cd4 <I2C_TransferConfig+0x68>)
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	43d2      	mvns	r2, r2
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	0011      	movs	r1, r2
 8004ca4:	193b      	adds	r3, r7, r4
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	059b      	lsls	r3, r3, #22
 8004caa:	0d9a      	lsrs	r2, r3, #22
 8004cac:	183b      	adds	r3, r7, r0
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	0418      	lsls	r0, r3, #16
 8004cb2:	23ff      	movs	r3, #255	; 0xff
 8004cb4:	041b      	lsls	r3, r3, #16
 8004cb6:	4003      	ands	r3, r0
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004cca:	46c0      	nop			; (mov r8, r8)
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b005      	add	sp, #20
 8004cd0:	bd90      	pop	{r4, r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	03ff63ff 	.word	0x03ff63ff

08004cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2241      	movs	r2, #65	; 0x41
 8004ce6:	5c9b      	ldrb	r3, [r3, r2]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	d138      	bne.n	8004d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2240      	movs	r2, #64	; 0x40
 8004cf2:	5c9b      	ldrb	r3, [r3, r2]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e032      	b.n	8004d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	2101      	movs	r1, #1
 8004d02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2241      	movs	r2, #65	; 0x41
 8004d08:	2124      	movs	r1, #36	; 0x24
 8004d0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2101      	movs	r1, #1
 8004d18:	438a      	bics	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4911      	ldr	r1, [pc, #68]	; (8004d6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2101      	movs	r1, #1
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2241      	movs	r2, #65	; 0x41
 8004d50:	2120      	movs	r1, #32
 8004d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2240      	movs	r2, #64	; 0x40
 8004d58:	2100      	movs	r1, #0
 8004d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b002      	add	sp, #8
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	ffffefff 	.word	0xffffefff

08004d70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2241      	movs	r2, #65	; 0x41
 8004d7e:	5c9b      	ldrb	r3, [r3, r2]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b20      	cmp	r3, #32
 8004d84:	d139      	bne.n	8004dfa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2240      	movs	r2, #64	; 0x40
 8004d8a:	5c9b      	ldrb	r3, [r3, r2]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e033      	b.n	8004dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2240      	movs	r2, #64	; 0x40
 8004d98:	2101      	movs	r1, #1
 8004d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2241      	movs	r2, #65	; 0x41
 8004da0:	2124      	movs	r1, #36	; 0x24
 8004da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2101      	movs	r1, #1
 8004db0:	438a      	bics	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a11      	ldr	r2, [pc, #68]	; (8004e04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	021b      	lsls	r3, r3, #8
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2101      	movs	r1, #1
 8004de2:	430a      	orrs	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2241      	movs	r2, #65	; 0x41
 8004dea:	2120      	movs	r1, #32
 8004dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	2100      	movs	r1, #0
 8004df4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e000      	b.n	8004dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
  }
}
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b004      	add	sp, #16
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	fffff0ff 	.word	0xfffff0ff

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b5b0      	push	{r4, r5, r7, lr}
 8004e0a:	b08a      	sub	sp, #40	; 0x28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d102      	bne.n	8004e1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f000 fbaf 	bl	800557a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e1c:	4bcf      	ldr	r3, [pc, #828]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	220c      	movs	r2, #12
 8004e22:	4013      	ands	r3, r2
 8004e24:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e26:	4bcd      	ldr	r3, [pc, #820]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <HAL_RCC_OscConfig+0x36>
 8004e3c:	e07e      	b.n	8004f3c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d007      	beq.n	8004e54 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	2b0c      	cmp	r3, #12
 8004e48:	d112      	bne.n	8004e70 <HAL_RCC_OscConfig+0x68>
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	025b      	lsls	r3, r3, #9
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d10d      	bne.n	8004e70 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4bc1      	ldr	r3, [pc, #772]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	029b      	lsls	r3, r3, #10
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d100      	bne.n	8004e62 <HAL_RCC_OscConfig+0x5a>
 8004e60:	e06b      	b.n	8004f3a <HAL_RCC_OscConfig+0x132>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d167      	bne.n	8004f3a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f000 fb85 	bl	800557a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	025b      	lsls	r3, r3, #9
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x84>
 8004e7c:	4bb7      	ldr	r3, [pc, #732]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	4bb6      	ldr	r3, [pc, #728]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e82:	2180      	movs	r1, #128	; 0x80
 8004e84:	0249      	lsls	r1, r1, #9
 8004e86:	430a      	orrs	r2, r1
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	e027      	b.n	8004edc <HAL_RCC_OscConfig+0xd4>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	23a0      	movs	r3, #160	; 0xa0
 8004e92:	02db      	lsls	r3, r3, #11
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d10e      	bne.n	8004eb6 <HAL_RCC_OscConfig+0xae>
 8004e98:	4bb0      	ldr	r3, [pc, #704]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	4baf      	ldr	r3, [pc, #700]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004e9e:	2180      	movs	r1, #128	; 0x80
 8004ea0:	02c9      	lsls	r1, r1, #11
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	4bad      	ldr	r3, [pc, #692]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4bac      	ldr	r3, [pc, #688]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004eac:	2180      	movs	r1, #128	; 0x80
 8004eae:	0249      	lsls	r1, r1, #9
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	e012      	b.n	8004edc <HAL_RCC_OscConfig+0xd4>
 8004eb6:	4ba9      	ldr	r3, [pc, #676]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4ba8      	ldr	r3, [pc, #672]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004ebc:	49a8      	ldr	r1, [pc, #672]	; (8005160 <HAL_RCC_OscConfig+0x358>)
 8004ebe:	400a      	ands	r2, r1
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	4ba6      	ldr	r3, [pc, #664]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	4013      	ands	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4ba2      	ldr	r3, [pc, #648]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4ba1      	ldr	r3, [pc, #644]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004ed6:	49a3      	ldr	r1, [pc, #652]	; (8005164 <HAL_RCC_OscConfig+0x35c>)
 8004ed8:	400a      	ands	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d015      	beq.n	8004f10 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe ff54 	bl	8003d90 <HAL_GetTick>
 8004ee8:	0003      	movs	r3, r0
 8004eea:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004eec:	e009      	b.n	8004f02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eee:	f7fe ff4f 	bl	8003d90 <HAL_GetTick>
 8004ef2:	0002      	movs	r2, r0
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b64      	cmp	r3, #100	; 0x64
 8004efa:	d902      	bls.n	8004f02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	f000 fb3c 	bl	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f02:	4b96      	ldr	r3, [pc, #600]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	029b      	lsls	r3, r3, #10
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	d0ef      	beq.n	8004eee <HAL_RCC_OscConfig+0xe6>
 8004f0e:	e015      	b.n	8004f3c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fe ff3e 	bl	8003d90 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f1a:	f7fe ff39 	bl	8003d90 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b64      	cmp	r3, #100	; 0x64
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e326      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f2c:	4b8b      	ldr	r3, [pc, #556]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	029b      	lsls	r3, r3, #10
 8004f34:	4013      	ands	r3, r2
 8004f36:	d1f0      	bne.n	8004f1a <HAL_RCC_OscConfig+0x112>
 8004f38:	e000      	b.n	8004f3c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2202      	movs	r2, #2
 8004f42:	4013      	ands	r3, r2
 8004f44:	d100      	bne.n	8004f48 <HAL_RCC_OscConfig+0x140>
 8004f46:	e08b      	b.n	8005060 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d13e      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1d0>
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d13b      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004f60:	4b7e      	ldr	r3, [pc, #504]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2204      	movs	r2, #4
 8004f66:	4013      	ands	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_RCC_OscConfig+0x16c>
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e302      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f74:	4b79      	ldr	r3, [pc, #484]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4a7b      	ldr	r2, [pc, #492]	; (8005168 <HAL_RCC_OscConfig+0x360>)
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	021a      	lsls	r2, r3, #8
 8004f84:	4b75      	ldr	r3, [pc, #468]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f86:	430a      	orrs	r2, r1
 8004f88:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f8a:	4b74      	ldr	r3, [pc, #464]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2209      	movs	r2, #9
 8004f90:	4393      	bics	r3, r2
 8004f92:	0019      	movs	r1, r3
 8004f94:	4b71      	ldr	r3, [pc, #452]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f9c:	f000 fc40 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8004fa0:	0001      	movs	r1, r0
 8004fa2:	4b6e      	ldr	r3, [pc, #440]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	220f      	movs	r2, #15
 8004faa:	4013      	ands	r3, r2
 8004fac:	4a6f      	ldr	r2, [pc, #444]	; (800516c <HAL_RCC_OscConfig+0x364>)
 8004fae:	5cd3      	ldrb	r3, [r2, r3]
 8004fb0:	000a      	movs	r2, r1
 8004fb2:	40da      	lsrs	r2, r3
 8004fb4:	4b6e      	ldr	r3, [pc, #440]	; (8005170 <HAL_RCC_OscConfig+0x368>)
 8004fb6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004fb8:	4b6e      	ldr	r3, [pc, #440]	; (8005174 <HAL_RCC_OscConfig+0x36c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2513      	movs	r5, #19
 8004fbe:	197c      	adds	r4, r7, r5
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7fe fe9f 	bl	8003d04 <HAL_InitTick>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004fca:	197b      	adds	r3, r7, r5
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d046      	beq.n	8005060 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004fd2:	197b      	adds	r3, r7, r5
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	e2d0      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d027      	beq.n	800502e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004fde:	4b5f      	ldr	r3, [pc, #380]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2209      	movs	r2, #9
 8004fe4:	4393      	bics	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	4b5c      	ldr	r3, [pc, #368]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fe fece 	bl	8003d90 <HAL_GetTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ffa:	f7fe fec9 	bl	8003d90 <HAL_GetTick>
 8004ffe:	0002      	movs	r2, r0
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e2b6      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_OscConfig+0x354>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d0f1      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b51      	ldr	r3, [pc, #324]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	4a53      	ldr	r2, [pc, #332]	; (8005168 <HAL_RCC_OscConfig+0x360>)
 800501c:	4013      	ands	r3, r2
 800501e:	0019      	movs	r1, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	4b4d      	ldr	r3, [pc, #308]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
 800502c:	e018      	b.n	8005060 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502e:	4b4b      	ldr	r3, [pc, #300]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005034:	2101      	movs	r1, #1
 8005036:	438a      	bics	r2, r1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fe fea9 	bl	8003d90 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005044:	f7fe fea4 	bl	8003d90 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e291      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2204      	movs	r2, #4
 800505c:	4013      	ands	r3, r2
 800505e:	d1f1      	bne.n	8005044 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2210      	movs	r2, #16
 8005066:	4013      	ands	r3, r2
 8005068:	d100      	bne.n	800506c <HAL_RCC_OscConfig+0x264>
 800506a:	e0a1      	b.n	80051b0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d140      	bne.n	80050f4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005072:	4b3a      	ldr	r3, [pc, #232]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4013      	ands	r3, r2
 800507c:	d005      	beq.n	800508a <HAL_RCC_OscConfig+0x282>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e277      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800508a:	4b34      	ldr	r3, [pc, #208]	; (800515c <HAL_RCC_OscConfig+0x354>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a3a      	ldr	r2, [pc, #232]	; (8005178 <HAL_RCC_OscConfig+0x370>)
 8005090:	4013      	ands	r3, r2
 8005092:	0019      	movs	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_RCC_OscConfig+0x354>)
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800509e:	4b2f      	ldr	r3, [pc, #188]	; (800515c <HAL_RCC_OscConfig+0x354>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	0a19      	lsrs	r1, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	061a      	lsls	r2, r3, #24
 80050ac:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_RCC_OscConfig+0x354>)
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	3301      	adds	r3, #1
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	0212      	lsls	r2, r2, #8
 80050be:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80050c0:	4b26      	ldr	r3, [pc, #152]	; (800515c <HAL_RCC_OscConfig+0x354>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	091b      	lsrs	r3, r3, #4
 80050c6:	210f      	movs	r1, #15
 80050c8:	400b      	ands	r3, r1
 80050ca:	4928      	ldr	r1, [pc, #160]	; (800516c <HAL_RCC_OscConfig+0x364>)
 80050cc:	5ccb      	ldrb	r3, [r1, r3]
 80050ce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050d0:	4b27      	ldr	r3, [pc, #156]	; (8005170 <HAL_RCC_OscConfig+0x368>)
 80050d2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80050d4:	4b27      	ldr	r3, [pc, #156]	; (8005174 <HAL_RCC_OscConfig+0x36c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2513      	movs	r5, #19
 80050da:	197c      	adds	r4, r7, r5
 80050dc:	0018      	movs	r0, r3
 80050de:	f7fe fe11 	bl	8003d04 <HAL_InitTick>
 80050e2:	0003      	movs	r3, r0
 80050e4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80050e6:	197b      	adds	r3, r7, r5
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d060      	beq.n	80051b0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80050ee:	197b      	adds	r3, r7, r5
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	e242      	b.n	800557a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d03f      	beq.n	800517c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050fc:	4b17      	ldr	r3, [pc, #92]	; (800515c <HAL_RCC_OscConfig+0x354>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b16      	ldr	r3, [pc, #88]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005102:	2180      	movs	r1, #128	; 0x80
 8005104:	0049      	lsls	r1, r1, #1
 8005106:	430a      	orrs	r2, r1
 8005108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510a:	f7fe fe41 	bl	8003d90 <HAL_GetTick>
 800510e:	0003      	movs	r3, r0
 8005110:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005112:	e008      	b.n	8005126 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005114:	f7fe fe3c 	bl	8003d90 <HAL_GetTick>
 8005118:	0002      	movs	r2, r0
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b02      	cmp	r3, #2
 8005120:	d901      	bls.n	8005126 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e229      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	2380      	movs	r3, #128	; 0x80
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4013      	ands	r3, r2
 8005130:	d0f0      	beq.n	8005114 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005132:	4b0a      	ldr	r3, [pc, #40]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	4a10      	ldr	r2, [pc, #64]	; (8005178 <HAL_RCC_OscConfig+0x370>)
 8005138:	4013      	ands	r3, r2
 800513a:	0019      	movs	r1, r3
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005142:	430a      	orrs	r2, r1
 8005144:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	021b      	lsls	r3, r3, #8
 800514c:	0a19      	lsrs	r1, r3, #8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	061a      	lsls	r2, r3, #24
 8005154:	4b01      	ldr	r3, [pc, #4]	; (800515c <HAL_RCC_OscConfig+0x354>)
 8005156:	430a      	orrs	r2, r1
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	e029      	b.n	80051b0 <HAL_RCC_OscConfig+0x3a8>
 800515c:	40021000 	.word	0x40021000
 8005160:	fffeffff 	.word	0xfffeffff
 8005164:	fffbffff 	.word	0xfffbffff
 8005168:	ffffe0ff 	.word	0xffffe0ff
 800516c:	080087e8 	.word	0x080087e8
 8005170:	20000008 	.word	0x20000008
 8005174:	2000000c 	.word	0x2000000c
 8005178:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800517c:	4bbd      	ldr	r3, [pc, #756]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	4bbc      	ldr	r3, [pc, #752]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005182:	49bd      	ldr	r1, [pc, #756]	; (8005478 <HAL_RCC_OscConfig+0x670>)
 8005184:	400a      	ands	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005188:	f7fe fe02 	bl	8003d90 <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005192:	f7fe fdfd 	bl	8003d90 <HAL_GetTick>
 8005196:	0002      	movs	r2, r0
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e1ea      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051a4:	4bb3      	ldr	r3, [pc, #716]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	d1f0      	bne.n	8005192 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2208      	movs	r2, #8
 80051b6:	4013      	ands	r3, r2
 80051b8:	d036      	beq.n	8005228 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d019      	beq.n	80051f6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051c2:	4bac      	ldr	r3, [pc, #688]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80051c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051c6:	4bab      	ldr	r3, [pc, #684]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80051c8:	2101      	movs	r1, #1
 80051ca:	430a      	orrs	r2, r1
 80051cc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ce:	f7fe fddf 	bl	8003d90 <HAL_GetTick>
 80051d2:	0003      	movs	r3, r0
 80051d4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051d8:	f7fe fdda 	bl	8003d90 <HAL_GetTick>
 80051dc:	0002      	movs	r2, r0
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e1c7      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051ea:	4ba2      	ldr	r3, [pc, #648]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80051ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ee:	2202      	movs	r2, #2
 80051f0:	4013      	ands	r3, r2
 80051f2:	d0f1      	beq.n	80051d8 <HAL_RCC_OscConfig+0x3d0>
 80051f4:	e018      	b.n	8005228 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051f6:	4b9f      	ldr	r3, [pc, #636]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80051f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051fa:	4b9e      	ldr	r3, [pc, #632]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80051fc:	2101      	movs	r1, #1
 80051fe:	438a      	bics	r2, r1
 8005200:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005202:	f7fe fdc5 	bl	8003d90 <HAL_GetTick>
 8005206:	0003      	movs	r3, r0
 8005208:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800520c:	f7fe fdc0 	bl	8003d90 <HAL_GetTick>
 8005210:	0002      	movs	r2, r0
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e1ad      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800521e:	4b95      	ldr	r3, [pc, #596]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d1f1      	bne.n	800520c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2204      	movs	r2, #4
 800522e:	4013      	ands	r3, r2
 8005230:	d100      	bne.n	8005234 <HAL_RCC_OscConfig+0x42c>
 8005232:	e0ae      	b.n	8005392 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005234:	2027      	movs	r0, #39	; 0x27
 8005236:	183b      	adds	r3, r7, r0
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523c:	4b8d      	ldr	r3, [pc, #564]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800523e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005240:	2380      	movs	r3, #128	; 0x80
 8005242:	055b      	lsls	r3, r3, #21
 8005244:	4013      	ands	r3, r2
 8005246:	d109      	bne.n	800525c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005248:	4b8a      	ldr	r3, [pc, #552]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800524a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524c:	4b89      	ldr	r3, [pc, #548]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	0549      	lsls	r1, r1, #21
 8005252:	430a      	orrs	r2, r1
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005256:	183b      	adds	r3, r7, r0
 8005258:	2201      	movs	r2, #1
 800525a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525c:	4b87      	ldr	r3, [pc, #540]	; (800547c <HAL_RCC_OscConfig+0x674>)
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	2380      	movs	r3, #128	; 0x80
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	4013      	ands	r3, r2
 8005266:	d11a      	bne.n	800529e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005268:	4b84      	ldr	r3, [pc, #528]	; (800547c <HAL_RCC_OscConfig+0x674>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b83      	ldr	r3, [pc, #524]	; (800547c <HAL_RCC_OscConfig+0x674>)
 800526e:	2180      	movs	r1, #128	; 0x80
 8005270:	0049      	lsls	r1, r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005276:	f7fe fd8b 	bl	8003d90 <HAL_GetTick>
 800527a:	0003      	movs	r3, r0
 800527c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005280:	f7fe fd86 	bl	8003d90 <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b64      	cmp	r3, #100	; 0x64
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e173      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005292:	4b7a      	ldr	r3, [pc, #488]	; (800547c <HAL_RCC_OscConfig+0x674>)
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4013      	ands	r3, r2
 800529c:	d0f0      	beq.n	8005280 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d107      	bne.n	80052ba <HAL_RCC_OscConfig+0x4b2>
 80052aa:	4b72      	ldr	r3, [pc, #456]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ae:	4b71      	ldr	r3, [pc, #452]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052b0:	2180      	movs	r1, #128	; 0x80
 80052b2:	0049      	lsls	r1, r1, #1
 80052b4:	430a      	orrs	r2, r1
 80052b6:	651a      	str	r2, [r3, #80]	; 0x50
 80052b8:	e031      	b.n	800531e <HAL_RCC_OscConfig+0x516>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10c      	bne.n	80052dc <HAL_RCC_OscConfig+0x4d4>
 80052c2:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c6:	4b6b      	ldr	r3, [pc, #428]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052c8:	496b      	ldr	r1, [pc, #428]	; (8005478 <HAL_RCC_OscConfig+0x670>)
 80052ca:	400a      	ands	r2, r1
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
 80052ce:	4b69      	ldr	r3, [pc, #420]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052d2:	4b68      	ldr	r3, [pc, #416]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052d4:	496a      	ldr	r1, [pc, #424]	; (8005480 <HAL_RCC_OscConfig+0x678>)
 80052d6:	400a      	ands	r2, r1
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50
 80052da:	e020      	b.n	800531e <HAL_RCC_OscConfig+0x516>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689a      	ldr	r2, [r3, #8]
 80052e0:	23a0      	movs	r3, #160	; 0xa0
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d10e      	bne.n	8005306 <HAL_RCC_OscConfig+0x4fe>
 80052e8:	4b62      	ldr	r3, [pc, #392]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ec:	4b61      	ldr	r3, [pc, #388]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052ee:	2180      	movs	r1, #128	; 0x80
 80052f0:	00c9      	lsls	r1, r1, #3
 80052f2:	430a      	orrs	r2, r1
 80052f4:	651a      	str	r2, [r3, #80]	; 0x50
 80052f6:	4b5f      	ldr	r3, [pc, #380]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052fa:	4b5e      	ldr	r3, [pc, #376]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80052fc:	2180      	movs	r1, #128	; 0x80
 80052fe:	0049      	lsls	r1, r1, #1
 8005300:	430a      	orrs	r2, r1
 8005302:	651a      	str	r2, [r3, #80]	; 0x50
 8005304:	e00b      	b.n	800531e <HAL_RCC_OscConfig+0x516>
 8005306:	4b5b      	ldr	r3, [pc, #364]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800530a:	4b5a      	ldr	r3, [pc, #360]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800530c:	495a      	ldr	r1, [pc, #360]	; (8005478 <HAL_RCC_OscConfig+0x670>)
 800530e:	400a      	ands	r2, r1
 8005310:	651a      	str	r2, [r3, #80]	; 0x50
 8005312:	4b58      	ldr	r3, [pc, #352]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005314:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005316:	4b57      	ldr	r3, [pc, #348]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005318:	4959      	ldr	r1, [pc, #356]	; (8005480 <HAL_RCC_OscConfig+0x678>)
 800531a:	400a      	ands	r2, r1
 800531c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d015      	beq.n	8005352 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005326:	f7fe fd33 	bl	8003d90 <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800532e:	e009      	b.n	8005344 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005330:	f7fe fd2e 	bl	8003d90 <HAL_GetTick>
 8005334:	0002      	movs	r2, r0
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	4a52      	ldr	r2, [pc, #328]	; (8005484 <HAL_RCC_OscConfig+0x67c>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e11a      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005344:	4b4b      	ldr	r3, [pc, #300]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4013      	ands	r3, r2
 800534e:	d0ef      	beq.n	8005330 <HAL_RCC_OscConfig+0x528>
 8005350:	e014      	b.n	800537c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fe fd1d 	bl	8003d90 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800535a:	e009      	b.n	8005370 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fe fd18 	bl	8003d90 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a47      	ldr	r2, [pc, #284]	; (8005484 <HAL_RCC_OscConfig+0x67c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e104      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005370:	4b40      	ldr	r3, [pc, #256]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005374:	2380      	movs	r3, #128	; 0x80
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4013      	ands	r3, r2
 800537a:	d1ef      	bne.n	800535c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800537c:	2327      	movs	r3, #39	; 0x27
 800537e:	18fb      	adds	r3, r7, r3
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d105      	bne.n	8005392 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005386:	4b3b      	ldr	r3, [pc, #236]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538a:	4b3a      	ldr	r3, [pc, #232]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800538c:	493e      	ldr	r1, [pc, #248]	; (8005488 <HAL_RCC_OscConfig+0x680>)
 800538e:	400a      	ands	r2, r1
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2220      	movs	r2, #32
 8005398:	4013      	ands	r3, r2
 800539a:	d049      	beq.n	8005430 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d026      	beq.n	80053f2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80053a4:	4b33      	ldr	r3, [pc, #204]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	4b32      	ldr	r3, [pc, #200]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053aa:	2101      	movs	r1, #1
 80053ac:	430a      	orrs	r2, r1
 80053ae:	609a      	str	r2, [r3, #8]
 80053b0:	4b30      	ldr	r3, [pc, #192]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b4:	4b2f      	ldr	r3, [pc, #188]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053b6:	2101      	movs	r1, #1
 80053b8:	430a      	orrs	r2, r1
 80053ba:	635a      	str	r2, [r3, #52]	; 0x34
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <HAL_RCC_OscConfig+0x684>)
 80053be:	6a1a      	ldr	r2, [r3, #32]
 80053c0:	4b32      	ldr	r3, [pc, #200]	; (800548c <HAL_RCC_OscConfig+0x684>)
 80053c2:	2180      	movs	r1, #128	; 0x80
 80053c4:	0189      	lsls	r1, r1, #6
 80053c6:	430a      	orrs	r2, r1
 80053c8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ca:	f7fe fce1 	bl	8003d90 <HAL_GetTick>
 80053ce:	0003      	movs	r3, r0
 80053d0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d4:	f7fe fcdc 	bl	8003d90 <HAL_GetTick>
 80053d8:	0002      	movs	r2, r0
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e0c9      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053e6:	4b23      	ldr	r3, [pc, #140]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	2202      	movs	r2, #2
 80053ec:	4013      	ands	r3, r2
 80053ee:	d0f1      	beq.n	80053d4 <HAL_RCC_OscConfig+0x5cc>
 80053f0:	e01e      	b.n	8005430 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80053f2:	4b20      	ldr	r3, [pc, #128]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	4b1f      	ldr	r3, [pc, #124]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 80053f8:	2101      	movs	r1, #1
 80053fa:	438a      	bics	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	4b23      	ldr	r3, [pc, #140]	; (800548c <HAL_RCC_OscConfig+0x684>)
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	4b22      	ldr	r3, [pc, #136]	; (800548c <HAL_RCC_OscConfig+0x684>)
 8005404:	4922      	ldr	r1, [pc, #136]	; (8005490 <HAL_RCC_OscConfig+0x688>)
 8005406:	400a      	ands	r2, r1
 8005408:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540a:	f7fe fcc1 	bl	8003d90 <HAL_GetTick>
 800540e:	0003      	movs	r3, r0
 8005410:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005414:	f7fe fcbc 	bl	8003d90 <HAL_GetTick>
 8005418:	0002      	movs	r2, r0
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0a9      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005426:	4b13      	ldr	r3, [pc, #76]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2202      	movs	r2, #2
 800542c:	4013      	ands	r3, r2
 800542e:	d1f1      	bne.n	8005414 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005434:	2b00      	cmp	r3, #0
 8005436:	d100      	bne.n	800543a <HAL_RCC_OscConfig+0x632>
 8005438:	e09e      	b.n	8005578 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d100      	bne.n	8005442 <HAL_RCC_OscConfig+0x63a>
 8005440:	e077      	b.n	8005532 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005446:	2b02      	cmp	r3, #2
 8005448:	d158      	bne.n	80054fc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800544a:	4b0a      	ldr	r3, [pc, #40]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	4b09      	ldr	r3, [pc, #36]	; (8005474 <HAL_RCC_OscConfig+0x66c>)
 8005450:	4910      	ldr	r1, [pc, #64]	; (8005494 <HAL_RCC_OscConfig+0x68c>)
 8005452:	400a      	ands	r2, r1
 8005454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005456:	f7fe fc9b 	bl	8003d90 <HAL_GetTick>
 800545a:	0003      	movs	r3, r0
 800545c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800545e:	e01b      	b.n	8005498 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005460:	f7fe fc96 	bl	8003d90 <HAL_GetTick>
 8005464:	0002      	movs	r2, r0
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d914      	bls.n	8005498 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e083      	b.n	800557a <HAL_RCC_OscConfig+0x772>
 8005472:	46c0      	nop			; (mov r8, r8)
 8005474:	40021000 	.word	0x40021000
 8005478:	fffffeff 	.word	0xfffffeff
 800547c:	40007000 	.word	0x40007000
 8005480:	fffffbff 	.word	0xfffffbff
 8005484:	00001388 	.word	0x00001388
 8005488:	efffffff 	.word	0xefffffff
 800548c:	40010000 	.word	0x40010000
 8005490:	ffffdfff 	.word	0xffffdfff
 8005494:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005498:	4b3a      	ldr	r3, [pc, #232]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2380      	movs	r3, #128	; 0x80
 800549e:	049b      	lsls	r3, r3, #18
 80054a0:	4013      	ands	r3, r2
 80054a2:	d1dd      	bne.n	8005460 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054a4:	4b37      	ldr	r3, [pc, #220]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a37      	ldr	r2, [pc, #220]	; (8005588 <HAL_RCC_OscConfig+0x780>)
 80054aa:	4013      	ands	r3, r2
 80054ac:	0019      	movs	r1, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b6:	431a      	orrs	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054bc:	431a      	orrs	r2, r3
 80054be:	4b31      	ldr	r3, [pc, #196]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054c0:	430a      	orrs	r2, r1
 80054c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c4:	4b2f      	ldr	r3, [pc, #188]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	4b2e      	ldr	r3, [pc, #184]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054ca:	2180      	movs	r1, #128	; 0x80
 80054cc:	0449      	lsls	r1, r1, #17
 80054ce:	430a      	orrs	r2, r1
 80054d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d2:	f7fe fc5d 	bl	8003d90 <HAL_GetTick>
 80054d6:	0003      	movs	r3, r0
 80054d8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80054da:	e008      	b.n	80054ee <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054dc:	f7fe fc58 	bl	8003d90 <HAL_GetTick>
 80054e0:	0002      	movs	r2, r0
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d901      	bls.n	80054ee <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e045      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	049b      	lsls	r3, r3, #18
 80054f6:	4013      	ands	r3, r2
 80054f8:	d0f0      	beq.n	80054dc <HAL_RCC_OscConfig+0x6d4>
 80054fa:	e03d      	b.n	8005578 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fc:	4b21      	ldr	r3, [pc, #132]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	4b20      	ldr	r3, [pc, #128]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 8005502:	4922      	ldr	r1, [pc, #136]	; (800558c <HAL_RCC_OscConfig+0x784>)
 8005504:	400a      	ands	r2, r1
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7fe fc42 	bl	8003d90 <HAL_GetTick>
 800550c:	0003      	movs	r3, r0
 800550e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005512:	f7fe fc3d 	bl	8003d90 <HAL_GetTick>
 8005516:	0002      	movs	r2, r0
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e02a      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005524:	4b17      	ldr	r3, [pc, #92]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	049b      	lsls	r3, r3, #18
 800552c:	4013      	ands	r3, r2
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x70a>
 8005530:	e022      	b.n	8005578 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	2b01      	cmp	r3, #1
 8005538:	d101      	bne.n	800553e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e01d      	b.n	800557a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <HAL_RCC_OscConfig+0x77c>)
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005544:	69fa      	ldr	r2, [r7, #28]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	025b      	lsls	r3, r3, #9
 800554a:	401a      	ands	r2, r3
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005550:	429a      	cmp	r2, r3
 8005552:	d10f      	bne.n	8005574 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005554:	69fa      	ldr	r2, [r7, #28]
 8005556:	23f0      	movs	r3, #240	; 0xf0
 8005558:	039b      	lsls	r3, r3, #14
 800555a:	401a      	ands	r2, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005560:	429a      	cmp	r2, r3
 8005562:	d107      	bne.n	8005574 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	23c0      	movs	r3, #192	; 0xc0
 8005568:	041b      	lsls	r3, r3, #16
 800556a:	401a      	ands	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d001      	beq.n	8005578 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	0018      	movs	r0, r3
 800557c:	46bd      	mov	sp, r7
 800557e:	b00a      	add	sp, #40	; 0x28
 8005580:	bdb0      	pop	{r4, r5, r7, pc}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	40021000 	.word	0x40021000
 8005588:	ff02ffff 	.word	0xff02ffff
 800558c:	feffffff 	.word	0xfeffffff

08005590 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e128      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055a4:	4b96      	ldr	r3, [pc, #600]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2201      	movs	r2, #1
 80055aa:	4013      	ands	r3, r2
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d91e      	bls.n	80055f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b93      	ldr	r3, [pc, #588]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2201      	movs	r2, #1
 80055b8:	4393      	bics	r3, r2
 80055ba:	0019      	movs	r1, r3
 80055bc:	4b90      	ldr	r3, [pc, #576]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80055c4:	f7fe fbe4 	bl	8003d90 <HAL_GetTick>
 80055c8:	0003      	movs	r3, r0
 80055ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055cc:	e009      	b.n	80055e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ce:	f7fe fbdf 	bl	8003d90 <HAL_GetTick>
 80055d2:	0002      	movs	r2, r0
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	4a8a      	ldr	r2, [pc, #552]	; (8005804 <HAL_RCC_ClockConfig+0x274>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e109      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055e2:	4b87      	ldr	r3, [pc, #540]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	4013      	ands	r3, r2
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d1ee      	bne.n	80055ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2202      	movs	r2, #2
 80055f6:	4013      	ands	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fa:	4b83      	ldr	r3, [pc, #524]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	22f0      	movs	r2, #240	; 0xf0
 8005600:	4393      	bics	r3, r2
 8005602:	0019      	movs	r1, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	4b7f      	ldr	r3, [pc, #508]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 800560a:	430a      	orrs	r2, r1
 800560c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2201      	movs	r2, #1
 8005614:	4013      	ands	r3, r2
 8005616:	d100      	bne.n	800561a <HAL_RCC_ClockConfig+0x8a>
 8005618:	e089      	b.n	800572e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005622:	4b79      	ldr	r3, [pc, #484]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	029b      	lsls	r3, r3, #10
 800562a:	4013      	ands	r3, r2
 800562c:	d120      	bne.n	8005670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e0e1      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b03      	cmp	r3, #3
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	049b      	lsls	r3, r3, #18
 8005642:	4013      	ands	r3, r2
 8005644:	d114      	bne.n	8005670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0d5      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d106      	bne.n	8005660 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005652:	4b6d      	ldr	r3, [pc, #436]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2204      	movs	r2, #4
 8005658:	4013      	ands	r3, r2
 800565a:	d109      	bne.n	8005670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e0ca      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005660:	4b69      	ldr	r3, [pc, #420]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	2380      	movs	r3, #128	; 0x80
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4013      	ands	r3, r2
 800566a:	d101      	bne.n	8005670 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e0c2      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005670:	4b65      	ldr	r3, [pc, #404]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2203      	movs	r2, #3
 8005676:	4393      	bics	r3, r2
 8005678:	0019      	movs	r1, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685a      	ldr	r2, [r3, #4]
 800567e:	4b62      	ldr	r3, [pc, #392]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005680:	430a      	orrs	r2, r1
 8005682:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005684:	f7fe fb84 	bl	8003d90 <HAL_GetTick>
 8005688:	0003      	movs	r3, r0
 800568a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b02      	cmp	r3, #2
 8005692:	d111      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005694:	e009      	b.n	80056aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005696:	f7fe fb7b 	bl	8003d90 <HAL_GetTick>
 800569a:	0002      	movs	r2, r0
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	4a58      	ldr	r2, [pc, #352]	; (8005804 <HAL_RCC_ClockConfig+0x274>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d901      	bls.n	80056aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80056a6:	2303      	movs	r3, #3
 80056a8:	e0a5      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80056aa:	4b57      	ldr	r3, [pc, #348]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	220c      	movs	r2, #12
 80056b0:	4013      	ands	r3, r2
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d1ef      	bne.n	8005696 <HAL_RCC_ClockConfig+0x106>
 80056b6:	e03a      	b.n	800572e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2b03      	cmp	r3, #3
 80056be:	d111      	bne.n	80056e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056c0:	e009      	b.n	80056d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c2:	f7fe fb65 	bl	8003d90 <HAL_GetTick>
 80056c6:	0002      	movs	r2, r0
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	4a4d      	ldr	r2, [pc, #308]	; (8005804 <HAL_RCC_ClockConfig+0x274>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e08f      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056d6:	4b4c      	ldr	r3, [pc, #304]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	220c      	movs	r2, #12
 80056dc:	4013      	ands	r3, r2
 80056de:	2b0c      	cmp	r3, #12
 80056e0:	d1ef      	bne.n	80056c2 <HAL_RCC_ClockConfig+0x132>
 80056e2:	e024      	b.n	800572e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d11b      	bne.n	8005724 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ec:	e009      	b.n	8005702 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ee:	f7fe fb4f 	bl	8003d90 <HAL_GetTick>
 80056f2:	0002      	movs	r2, r0
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	4a42      	ldr	r2, [pc, #264]	; (8005804 <HAL_RCC_ClockConfig+0x274>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e079      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005702:	4b41      	ldr	r3, [pc, #260]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	220c      	movs	r2, #12
 8005708:	4013      	ands	r3, r2
 800570a:	2b04      	cmp	r3, #4
 800570c:	d1ef      	bne.n	80056ee <HAL_RCC_ClockConfig+0x15e>
 800570e:	e00e      	b.n	800572e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005710:	f7fe fb3e 	bl	8003d90 <HAL_GetTick>
 8005714:	0002      	movs	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	4a3a      	ldr	r2, [pc, #232]	; (8005804 <HAL_RCC_ClockConfig+0x274>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e068      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005724:	4b38      	ldr	r3, [pc, #224]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	220c      	movs	r2, #12
 800572a:	4013      	ands	r3, r2
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800572e:	4b34      	ldr	r3, [pc, #208]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2201      	movs	r2, #1
 8005734:	4013      	ands	r3, r2
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d21e      	bcs.n	800577a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573c:	4b30      	ldr	r3, [pc, #192]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2201      	movs	r2, #1
 8005742:	4393      	bics	r3, r2
 8005744:	0019      	movs	r1, r3
 8005746:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	430a      	orrs	r2, r1
 800574c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800574e:	f7fe fb1f 	bl	8003d90 <HAL_GetTick>
 8005752:	0003      	movs	r3, r0
 8005754:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005756:	e009      	b.n	800576c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fe fb1a 	bl	8003d90 <HAL_GetTick>
 800575c:	0002      	movs	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	4a28      	ldr	r2, [pc, #160]	; (8005804 <HAL_RCC_ClockConfig+0x274>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e044      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_RCC_ClockConfig+0x270>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2201      	movs	r2, #1
 8005772:	4013      	ands	r3, r2
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	429a      	cmp	r2, r3
 8005778:	d1ee      	bne.n	8005758 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2204      	movs	r2, #4
 8005780:	4013      	ands	r3, r2
 8005782:	d009      	beq.n	8005798 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005784:	4b20      	ldr	r3, [pc, #128]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a20      	ldr	r2, [pc, #128]	; (800580c <HAL_RCC_ClockConfig+0x27c>)
 800578a:	4013      	ands	r3, r2
 800578c:	0019      	movs	r1, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68da      	ldr	r2, [r3, #12]
 8005792:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 8005794:	430a      	orrs	r2, r1
 8005796:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2208      	movs	r2, #8
 800579e:	4013      	ands	r3, r2
 80057a0:	d00a      	beq.n	80057b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	4a1a      	ldr	r2, [pc, #104]	; (8005810 <HAL_RCC_ClockConfig+0x280>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	0019      	movs	r1, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	00da      	lsls	r2, r3, #3
 80057b2:	4b15      	ldr	r3, [pc, #84]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 80057b4:	430a      	orrs	r2, r1
 80057b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057b8:	f000 f832 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80057bc:	0001      	movs	r1, r0
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <HAL_RCC_ClockConfig+0x278>)
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	091b      	lsrs	r3, r3, #4
 80057c4:	220f      	movs	r2, #15
 80057c6:	4013      	ands	r3, r2
 80057c8:	4a12      	ldr	r2, [pc, #72]	; (8005814 <HAL_RCC_ClockConfig+0x284>)
 80057ca:	5cd3      	ldrb	r3, [r2, r3]
 80057cc:	000a      	movs	r2, r1
 80057ce:	40da      	lsrs	r2, r3
 80057d0:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_RCC_ClockConfig+0x288>)
 80057d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80057d4:	4b11      	ldr	r3, [pc, #68]	; (800581c <HAL_RCC_ClockConfig+0x28c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	250b      	movs	r5, #11
 80057da:	197c      	adds	r4, r7, r5
 80057dc:	0018      	movs	r0, r3
 80057de:	f7fe fa91 	bl	8003d04 <HAL_InitTick>
 80057e2:	0003      	movs	r3, r0
 80057e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80057e6:	197b      	adds	r3, r7, r5
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d002      	beq.n	80057f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80057ee:	197b      	adds	r3, r7, r5
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	e000      	b.n	80057f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	0018      	movs	r0, r3
 80057f8:	46bd      	mov	sp, r7
 80057fa:	b004      	add	sp, #16
 80057fc:	bdb0      	pop	{r4, r5, r7, pc}
 80057fe:	46c0      	nop			; (mov r8, r8)
 8005800:	40022000 	.word	0x40022000
 8005804:	00001388 	.word	0x00001388
 8005808:	40021000 	.word	0x40021000
 800580c:	fffff8ff 	.word	0xfffff8ff
 8005810:	ffffc7ff 	.word	0xffffc7ff
 8005814:	080087e8 	.word	0x080087e8
 8005818:	20000008 	.word	0x20000008
 800581c:	2000000c 	.word	0x2000000c

08005820 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b08e      	sub	sp, #56	; 0x38
 8005824:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005826:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <HAL_RCC_GetSysClockFreq+0x138>)
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800582c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582e:	230c      	movs	r3, #12
 8005830:	4013      	ands	r3, r2
 8005832:	2b0c      	cmp	r3, #12
 8005834:	d014      	beq.n	8005860 <HAL_RCC_GetSysClockFreq+0x40>
 8005836:	d900      	bls.n	800583a <HAL_RCC_GetSysClockFreq+0x1a>
 8005838:	e07b      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x112>
 800583a:	2b04      	cmp	r3, #4
 800583c:	d002      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x24>
 800583e:	2b08      	cmp	r3, #8
 8005840:	d00b      	beq.n	800585a <HAL_RCC_GetSysClockFreq+0x3a>
 8005842:	e076      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005844:	4b44      	ldr	r3, [pc, #272]	; (8005958 <HAL_RCC_GetSysClockFreq+0x138>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2210      	movs	r2, #16
 800584a:	4013      	ands	r3, r2
 800584c:	d002      	beq.n	8005854 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800584e:	4b43      	ldr	r3, [pc, #268]	; (800595c <HAL_RCC_GetSysClockFreq+0x13c>)
 8005850:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005852:	e07c      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005854:	4b42      	ldr	r3, [pc, #264]	; (8005960 <HAL_RCC_GetSysClockFreq+0x140>)
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005858:	e079      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800585a:	4b42      	ldr	r3, [pc, #264]	; (8005964 <HAL_RCC_GetSysClockFreq+0x144>)
 800585c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800585e:	e076      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005862:	0c9a      	lsrs	r2, r3, #18
 8005864:	230f      	movs	r3, #15
 8005866:	401a      	ands	r2, r3
 8005868:	4b3f      	ldr	r3, [pc, #252]	; (8005968 <HAL_RCC_GetSysClockFreq+0x148>)
 800586a:	5c9b      	ldrb	r3, [r3, r2]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	0d9a      	lsrs	r2, r3, #22
 8005872:	2303      	movs	r3, #3
 8005874:	4013      	ands	r3, r2
 8005876:	3301      	adds	r3, #1
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800587a:	4b37      	ldr	r3, [pc, #220]	; (8005958 <HAL_RCC_GetSysClockFreq+0x138>)
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	4013      	ands	r3, r2
 8005884:	d01a      	beq.n	80058bc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	4a35      	ldr	r2, [pc, #212]	; (8005964 <HAL_RCC_GetSysClockFreq+0x144>)
 8005890:	2300      	movs	r3, #0
 8005892:	69b8      	ldr	r0, [r7, #24]
 8005894:	69f9      	ldr	r1, [r7, #28]
 8005896:	f7fa fced 	bl	8000274 <__aeabi_lmul>
 800589a:	0002      	movs	r2, r0
 800589c:	000b      	movs	r3, r1
 800589e:	0010      	movs	r0, r2
 80058a0:	0019      	movs	r1, r3
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	2300      	movs	r3, #0
 80058a8:	617b      	str	r3, [r7, #20]
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f7fa fcc1 	bl	8000234 <__aeabi_uldivmod>
 80058b2:	0002      	movs	r2, r0
 80058b4:	000b      	movs	r3, r1
 80058b6:	0013      	movs	r3, r2
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ba:	e037      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80058bc:	4b26      	ldr	r3, [pc, #152]	; (8005958 <HAL_RCC_GetSysClockFreq+0x138>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2210      	movs	r2, #16
 80058c2:	4013      	ands	r3, r2
 80058c4:	d01a      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80058c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c8:	60bb      	str	r3, [r7, #8]
 80058ca:	2300      	movs	r3, #0
 80058cc:	60fb      	str	r3, [r7, #12]
 80058ce:	4a23      	ldr	r2, [pc, #140]	; (800595c <HAL_RCC_GetSysClockFreq+0x13c>)
 80058d0:	2300      	movs	r3, #0
 80058d2:	68b8      	ldr	r0, [r7, #8]
 80058d4:	68f9      	ldr	r1, [r7, #12]
 80058d6:	f7fa fccd 	bl	8000274 <__aeabi_lmul>
 80058da:	0002      	movs	r2, r0
 80058dc:	000b      	movs	r3, r1
 80058de:	0010      	movs	r0, r2
 80058e0:	0019      	movs	r1, r3
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	603b      	str	r3, [r7, #0]
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f7fa fca1 	bl	8000234 <__aeabi_uldivmod>
 80058f2:	0002      	movs	r2, r0
 80058f4:	000b      	movs	r3, r1
 80058f6:	0013      	movs	r3, r2
 80058f8:	637b      	str	r3, [r7, #52]	; 0x34
 80058fa:	e017      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	0018      	movs	r0, r3
 8005900:	2300      	movs	r3, #0
 8005902:	0019      	movs	r1, r3
 8005904:	4a16      	ldr	r2, [pc, #88]	; (8005960 <HAL_RCC_GetSysClockFreq+0x140>)
 8005906:	2300      	movs	r3, #0
 8005908:	f7fa fcb4 	bl	8000274 <__aeabi_lmul>
 800590c:	0002      	movs	r2, r0
 800590e:	000b      	movs	r3, r1
 8005910:	0010      	movs	r0, r2
 8005912:	0019      	movs	r1, r3
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	001c      	movs	r4, r3
 8005918:	2300      	movs	r3, #0
 800591a:	001d      	movs	r5, r3
 800591c:	0022      	movs	r2, r4
 800591e:	002b      	movs	r3, r5
 8005920:	f7fa fc88 	bl	8000234 <__aeabi_uldivmod>
 8005924:	0002      	movs	r2, r0
 8005926:	000b      	movs	r3, r1
 8005928:	0013      	movs	r3, r2
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005930:	e00d      	b.n	800594e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005932:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_RCC_GetSysClockFreq+0x138>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	0b5b      	lsrs	r3, r3, #13
 8005938:	2207      	movs	r2, #7
 800593a:	4013      	ands	r3, r2
 800593c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	3301      	adds	r3, #1
 8005942:	2280      	movs	r2, #128	; 0x80
 8005944:	0212      	lsls	r2, r2, #8
 8005946:	409a      	lsls	r2, r3
 8005948:	0013      	movs	r3, r2
 800594a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800594c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005950:	0018      	movs	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	b00e      	add	sp, #56	; 0x38
 8005956:	bdb0      	pop	{r4, r5, r7, pc}
 8005958:	40021000 	.word	0x40021000
 800595c:	003d0900 	.word	0x003d0900
 8005960:	00f42400 	.word	0x00f42400
 8005964:	007a1200 	.word	0x007a1200
 8005968:	08008800 	.word	0x08008800

0800596c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005970:	4b02      	ldr	r3, [pc, #8]	; (800597c <HAL_RCC_GetHCLKFreq+0x10>)
 8005972:	681b      	ldr	r3, [r3, #0]
}
 8005974:	0018      	movs	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	46c0      	nop			; (mov r8, r8)
 800597c:	20000008 	.word	0x20000008

08005980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005984:	f7ff fff2 	bl	800596c <HAL_RCC_GetHCLKFreq>
 8005988:	0001      	movs	r1, r0
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	0a1b      	lsrs	r3, r3, #8
 8005990:	2207      	movs	r2, #7
 8005992:	4013      	ands	r3, r2
 8005994:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005996:	5cd3      	ldrb	r3, [r2, r3]
 8005998:	40d9      	lsrs	r1, r3
 800599a:	000b      	movs	r3, r1
}
 800599c:	0018      	movs	r0, r3
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	40021000 	.word	0x40021000
 80059a8:	080087f8 	.word	0x080087f8

080059ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059b0:	f7ff ffdc 	bl	800596c <HAL_RCC_GetHCLKFreq>
 80059b4:	0001      	movs	r1, r0
 80059b6:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	0adb      	lsrs	r3, r3, #11
 80059bc:	2207      	movs	r2, #7
 80059be:	4013      	ands	r3, r2
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80059c2:	5cd3      	ldrb	r3, [r2, r3]
 80059c4:	40d9      	lsrs	r1, r3
 80059c6:	000b      	movs	r3, r1
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	40021000 	.word	0x40021000
 80059d4:	080087f8 	.word	0x080087f8

080059d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80059e0:	2317      	movs	r3, #23
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2220      	movs	r2, #32
 80059ee:	4013      	ands	r3, r2
 80059f0:	d106      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	2380      	movs	r3, #128	; 0x80
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	4013      	ands	r3, r2
 80059fc:	d100      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80059fe:	e0d9      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a00:	4b9c      	ldr	r3, [pc, #624]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	055b      	lsls	r3, r3, #21
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d10a      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0c:	4b99      	ldr	r3, [pc, #612]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a10:	4b98      	ldr	r3, [pc, #608]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a12:	2180      	movs	r1, #128	; 0x80
 8005a14:	0549      	lsls	r1, r1, #21
 8005a16:	430a      	orrs	r2, r1
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005a1a:	2317      	movs	r3, #23
 8005a1c:	18fb      	adds	r3, r7, r3
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a22:	4b95      	ldr	r3, [pc, #596]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d11a      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a2e:	4b92      	ldr	r3, [pc, #584]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	4b91      	ldr	r3, [pc, #580]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a34:	2180      	movs	r1, #128	; 0x80
 8005a36:	0049      	lsls	r1, r1, #1
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3c:	f7fe f9a8 	bl	8003d90 <HAL_GetTick>
 8005a40:	0003      	movs	r3, r0
 8005a42:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a44:	e008      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a46:	f7fe f9a3 	bl	8003d90 <HAL_GetTick>
 8005a4a:	0002      	movs	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b64      	cmp	r3, #100	; 0x64
 8005a52:	d901      	bls.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e108      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a58:	4b87      	ldr	r3, [pc, #540]	; (8005c78 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	005b      	lsls	r3, r3, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a64:	4b83      	ldr	r3, [pc, #524]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	23c0      	movs	r3, #192	; 0xc0
 8005a6a:	039b      	lsls	r3, r3, #14
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	23c0      	movs	r3, #192	; 0xc0
 8005a76:	039b      	lsls	r3, r3, #14
 8005a78:	4013      	ands	r3, r2
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689a      	ldr	r2, [r3, #8]
 8005a84:	23c0      	movs	r3, #192	; 0xc0
 8005a86:	039b      	lsls	r3, r3, #14
 8005a88:	4013      	ands	r3, r2
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d013      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	23c0      	movs	r3, #192	; 0xc0
 8005a96:	029b      	lsls	r3, r3, #10
 8005a98:	401a      	ands	r2, r3
 8005a9a:	23c0      	movs	r3, #192	; 0xc0
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005aa2:	4b74      	ldr	r3, [pc, #464]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	2380      	movs	r3, #128	; 0x80
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	401a      	ands	r2, r3
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0d8      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005ab8:	4b6e      	ldr	r3, [pc, #440]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005abc:	23c0      	movs	r3, #192	; 0xc0
 8005abe:	029b      	lsls	r3, r3, #10
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d049      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	23c0      	movs	r3, #192	; 0xc0
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d004      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d10d      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	23c0      	movs	r3, #192	; 0xc0
 8005aea:	029b      	lsls	r3, r3, #10
 8005aec:	4013      	ands	r3, r2
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d034      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	2380      	movs	r3, #128	; 0x80
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	4013      	ands	r3, r2
 8005afe:	d02e      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b00:	4b5c      	ldr	r3, [pc, #368]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b04:	4a5d      	ldr	r2, [pc, #372]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b0a:	4b5a      	ldr	r3, [pc, #360]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b0e:	4b59      	ldr	r3, [pc, #356]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b10:	2180      	movs	r1, #128	; 0x80
 8005b12:	0309      	lsls	r1, r1, #12
 8005b14:	430a      	orrs	r2, r1
 8005b16:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b18:	4b56      	ldr	r3, [pc, #344]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b1c:	4b55      	ldr	r3, [pc, #340]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b1e:	4958      	ldr	r1, [pc, #352]	; (8005c80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005b20:	400a      	ands	r2, r1
 8005b22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b24:	4b53      	ldr	r3, [pc, #332]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4013      	ands	r3, r2
 8005b32:	d014      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fe f92c 	bl	8003d90 <HAL_GetTick>
 8005b38:	0003      	movs	r3, r0
 8005b3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b3c:	e009      	b.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b3e:	f7fe f927 	bl	8003d90 <HAL_GetTick>
 8005b42:	0002      	movs	r2, r0
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	4a4e      	ldr	r2, [pc, #312]	; (8005c84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e08b      	b.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b52:	4b48      	ldr	r3, [pc, #288]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b56:	2380      	movs	r3, #128	; 0x80
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d0ef      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	23c0      	movs	r3, #192	; 0xc0
 8005b64:	029b      	lsls	r3, r3, #10
 8005b66:	401a      	ands	r2, r3
 8005b68:	23c0      	movs	r3, #192	; 0xc0
 8005b6a:	029b      	lsls	r3, r3, #10
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d10c      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005b70:	4b40      	ldr	r3, [pc, #256]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a44      	ldr	r2, [pc, #272]	; (8005c88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	0019      	movs	r1, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	23c0      	movs	r3, #192	; 0xc0
 8005b80:	039b      	lsls	r3, r3, #14
 8005b82:	401a      	ands	r2, r3
 8005b84:	4b3b      	ldr	r3, [pc, #236]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b86:	430a      	orrs	r2, r1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	23c0      	movs	r3, #192	; 0xc0
 8005b94:	029b      	lsls	r3, r3, #10
 8005b96:	401a      	ands	r2, r3
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b9e:	2317      	movs	r3, #23
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba8:	4b32      	ldr	r3, [pc, #200]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bac:	4b31      	ldr	r3, [pc, #196]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bae:	4937      	ldr	r1, [pc, #220]	; (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005bb0:	400a      	ands	r2, r1
 8005bb2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	d009      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc2:	2203      	movs	r2, #3
 8005bc4:	4393      	bics	r3, r2
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68da      	ldr	r2, [r3, #12]
 8005bcc:	4b29      	ldr	r3, [pc, #164]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d009      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005be0:	220c      	movs	r2, #12
 8005be2:	4393      	bics	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	4b22      	ldr	r3, [pc, #136]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bec:	430a      	orrs	r2, r1
 8005bee:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2204      	movs	r2, #4
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d009      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bfa:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bfe:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005c00:	4013      	ands	r3, r2
 8005c02:	0019      	movs	r1, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	4b1a      	ldr	r3, [pc, #104]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2208      	movs	r2, #8
 8005c14:	4013      	ands	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c18:	4b16      	ldr	r3, [pc, #88]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c1c:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c28:	430a      	orrs	r2, r1
 8005c2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2240      	movs	r2, #64	; 0x40
 8005c32:	4013      	ands	r3, r2
 8005c34:	d009      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c36:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c3a:	4a17      	ldr	r2, [pc, #92]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	0019      	movs	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c46:	430a      	orrs	r2, r1
 8005c48:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	4013      	ands	r3, r2
 8005c52:	d009      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c58:	4a10      	ldr	r2, [pc, #64]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	0019      	movs	r1, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	4b04      	ldr	r3, [pc, #16]	; (8005c74 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c64:	430a      	orrs	r2, r1
 8005c66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	0018      	movs	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	b006      	add	sp, #24
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	46c0      	nop			; (mov r8, r8)
 8005c74:	40021000 	.word	0x40021000
 8005c78:	40007000 	.word	0x40007000
 8005c7c:	fffcffff 	.word	0xfffcffff
 8005c80:	fff7ffff 	.word	0xfff7ffff
 8005c84:	00001388 	.word	0x00001388
 8005c88:	ffcfffff 	.word	0xffcfffff
 8005c8c:	efffffff 	.word	0xefffffff
 8005c90:	fffff3ff 	.word	0xfffff3ff
 8005c94:	ffffcfff 	.word	0xffffcfff
 8005c98:	fbffffff 	.word	0xfbffffff
 8005c9c:	fff3ffff 	.word	0xfff3ffff

08005ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d101      	bne.n	8005cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e032      	b.n	8005d18 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2239      	movs	r2, #57	; 0x39
 8005cb6:	5c9b      	ldrb	r3, [r3, r2]
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d107      	bne.n	8005cce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2238      	movs	r2, #56	; 0x38
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	0018      	movs	r0, r3
 8005cca:	f7fd fedf 	bl	8003a8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2239      	movs	r2, #57	; 0x39
 8005cd2:	2102      	movs	r1, #2
 8005cd4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	0019      	movs	r1, r3
 8005ce0:	0010      	movs	r0, r2
 8005ce2:	f000 fc49 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	223e      	movs	r2, #62	; 0x3e
 8005cea:	2101      	movs	r1, #1
 8005cec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	223a      	movs	r2, #58	; 0x3a
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	5499      	strb	r1, [r3, r2]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	223b      	movs	r2, #59	; 0x3b
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	5499      	strb	r1, [r3, r2]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	223c      	movs	r2, #60	; 0x3c
 8005d02:	2101      	movs	r1, #1
 8005d04:	5499      	strb	r1, [r3, r2]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	223d      	movs	r2, #61	; 0x3d
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2239      	movs	r2, #57	; 0x39
 8005d12:	2101      	movs	r1, #1
 8005d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	0018      	movs	r0, r3
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	b002      	add	sp, #8
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2239      	movs	r2, #57	; 0x39
 8005d2c:	5c9b      	ldrb	r3, [r3, r2]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d001      	beq.n	8005d38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e02e      	b.n	8005d96 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2239      	movs	r2, #57	; 0x39
 8005d3c:	2102      	movs	r1, #2
 8005d3e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	2380      	movs	r3, #128	; 0x80
 8005d46:	05db      	lsls	r3, r3, #23
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d009      	beq.n	8005d60 <HAL_TIM_Base_Start+0x40>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <HAL_TIM_Base_Start+0x80>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d004      	beq.n	8005d60 <HAL_TIM_Base_Start+0x40>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <HAL_TIM_Base_Start+0x84>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d111      	bne.n	8005d84 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2207      	movs	r2, #7
 8005d68:	4013      	ands	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b06      	cmp	r3, #6
 8005d70:	d010      	beq.n	8005d94 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	e007      	b.n	8005d94 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2101      	movs	r1, #1
 8005d90:	430a      	orrs	r2, r1
 8005d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	0018      	movs	r0, r3
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b004      	add	sp, #16
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	40010800 	.word	0x40010800
 8005da4:	40011400 	.word	0x40011400

08005da8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2239      	movs	r2, #57	; 0x39
 8005db4:	5c9b      	ldrb	r3, [r3, r2]
 8005db6:	b2db      	uxtb	r3, r3
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d001      	beq.n	8005dc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e036      	b.n	8005e2e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2239      	movs	r2, #57	; 0x39
 8005dc4:	2102      	movs	r1, #2
 8005dc6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	05db      	lsls	r3, r3, #23
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d009      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x50>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a13      	ldr	r2, [pc, #76]	; (8005e38 <HAL_TIM_Base_Start_IT+0x90>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d004      	beq.n	8005df8 <HAL_TIM_Base_Start_IT+0x50>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a12      	ldr	r2, [pc, #72]	; (8005e3c <HAL_TIM_Base_Start_IT+0x94>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d111      	bne.n	8005e1c <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	2207      	movs	r2, #7
 8005e00:	4013      	ands	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d010      	beq.n	8005e2c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1a:	e007      	b.n	8005e2c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2101      	movs	r1, #1
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	0018      	movs	r0, r3
 8005e30:	46bd      	mov	sp, r7
 8005e32:	b004      	add	sp, #16
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	40010800 	.word	0x40010800
 8005e3c:	40011400 	.word	0x40011400

08005e40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2101      	movs	r1, #1
 8005e54:	438a      	bics	r2, r1
 8005e56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	4a0a      	ldr	r2, [pc, #40]	; (8005e88 <HAL_TIM_Base_Stop_IT+0x48>)
 8005e60:	4013      	ands	r3, r2
 8005e62:	d107      	bne.n	8005e74 <HAL_TIM_Base_Stop_IT+0x34>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2101      	movs	r1, #1
 8005e70:	438a      	bics	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2239      	movs	r2, #57	; 0x39
 8005e78:	2101      	movs	r1, #1
 8005e7a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	0018      	movs	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	b002      	add	sp, #8
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	46c0      	nop			; (mov r8, r8)
 8005e88:	00001111 	.word	0x00001111

08005e8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d101      	bne.n	8005e9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e032      	b.n	8005f04 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2239      	movs	r2, #57	; 0x39
 8005ea2:	5c9b      	ldrb	r3, [r3, r2]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2238      	movs	r2, #56	; 0x38
 8005eae:	2100      	movs	r1, #0
 8005eb0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	0018      	movs	r0, r3
 8005eb6:	f000 f829 	bl	8005f0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2239      	movs	r2, #57	; 0x39
 8005ebe:	2102      	movs	r1, #2
 8005ec0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	0019      	movs	r1, r3
 8005ecc:	0010      	movs	r0, r2
 8005ece:	f000 fb53 	bl	8006578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	223e      	movs	r2, #62	; 0x3e
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	223a      	movs	r2, #58	; 0x3a
 8005ede:	2101      	movs	r1, #1
 8005ee0:	5499      	strb	r1, [r3, r2]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	223b      	movs	r2, #59	; 0x3b
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	5499      	strb	r1, [r3, r2]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	223c      	movs	r2, #60	; 0x3c
 8005eee:	2101      	movs	r1, #1
 8005ef0:	5499      	strb	r1, [r3, r2]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	223d      	movs	r2, #61	; 0x3d
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2239      	movs	r2, #57	; 0x39
 8005efe:	2101      	movs	r1, #1
 8005f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	0018      	movs	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f14:	46c0      	nop			; (mov r8, r8)
 8005f16:	46bd      	mov	sp, r7
 8005f18:	b002      	add	sp, #8
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d108      	bne.n	8005f3e <HAL_TIM_PWM_Start+0x22>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	223a      	movs	r2, #58	; 0x3a
 8005f30:	5c9b      	ldrb	r3, [r3, r2]
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	4193      	sbcs	r3, r2
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	e01f      	b.n	8005f7e <HAL_TIM_PWM_Start+0x62>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	2b04      	cmp	r3, #4
 8005f42:	d108      	bne.n	8005f56 <HAL_TIM_PWM_Start+0x3a>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	223b      	movs	r2, #59	; 0x3b
 8005f48:	5c9b      	ldrb	r3, [r3, r2]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	1e5a      	subs	r2, r3, #1
 8005f50:	4193      	sbcs	r3, r2
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	e013      	b.n	8005f7e <HAL_TIM_PWM_Start+0x62>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d108      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x52>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	223c      	movs	r2, #60	; 0x3c
 8005f60:	5c9b      	ldrb	r3, [r3, r2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	3b01      	subs	r3, #1
 8005f66:	1e5a      	subs	r2, r3, #1
 8005f68:	4193      	sbcs	r3, r2
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e007      	b.n	8005f7e <HAL_TIM_PWM_Start+0x62>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	223d      	movs	r2, #61	; 0x3d
 8005f72:	5c9b      	ldrb	r3, [r3, r2]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	1e5a      	subs	r2, r3, #1
 8005f7a:	4193      	sbcs	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e04d      	b.n	8006022 <HAL_TIM_PWM_Start+0x106>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x7a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	223a      	movs	r2, #58	; 0x3a
 8005f90:	2102      	movs	r1, #2
 8005f92:	5499      	strb	r1, [r3, r2]
 8005f94:	e013      	b.n	8005fbe <HAL_TIM_PWM_Start+0xa2>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b04      	cmp	r3, #4
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0x8a>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	223b      	movs	r2, #59	; 0x3b
 8005fa0:	2102      	movs	r1, #2
 8005fa2:	5499      	strb	r1, [r3, r2]
 8005fa4:	e00b      	b.n	8005fbe <HAL_TIM_PWM_Start+0xa2>
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d104      	bne.n	8005fb6 <HAL_TIM_PWM_Start+0x9a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	223c      	movs	r2, #60	; 0x3c
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	5499      	strb	r1, [r3, r2]
 8005fb4:	e003      	b.n	8005fbe <HAL_TIM_PWM_Start+0xa2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	223d      	movs	r2, #61	; 0x3d
 8005fba:	2102      	movs	r1, #2
 8005fbc:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6839      	ldr	r1, [r7, #0]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f000 fcc8 	bl	800695c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	05db      	lsls	r3, r3, #23
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d009      	beq.n	8005fec <HAL_TIM_PWM_Start+0xd0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a13      	ldr	r2, [pc, #76]	; (800602c <HAL_TIM_PWM_Start+0x110>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIM_PWM_Start+0xd0>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a12      	ldr	r2, [pc, #72]	; (8006030 <HAL_TIM_PWM_Start+0x114>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d111      	bne.n	8006010 <HAL_TIM_PWM_Start+0xf4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2207      	movs	r2, #7
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d010      	beq.n	8006020 <HAL_TIM_PWM_Start+0x104>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	430a      	orrs	r2, r1
 800600c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600e:	e007      	b.n	8006020 <HAL_TIM_PWM_Start+0x104>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2101      	movs	r1, #1
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	0018      	movs	r0, r3
 8006024:	46bd      	mov	sp, r7
 8006026:	b004      	add	sp, #16
 8006028:	bd80      	pop	{r7, pc}
 800602a:	46c0      	nop			; (mov r8, r8)
 800602c:	40010800 	.word	0x40010800
 8006030:	40011400 	.word	0x40011400

08006034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	2202      	movs	r2, #2
 8006044:	4013      	ands	r3, r2
 8006046:	2b02      	cmp	r3, #2
 8006048:	d124      	bne.n	8006094 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2202      	movs	r2, #2
 8006052:	4013      	ands	r3, r2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d11d      	bne.n	8006094 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2203      	movs	r2, #3
 800605e:	4252      	negs	r2, r2
 8006060:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2203      	movs	r2, #3
 8006070:	4013      	ands	r3, r2
 8006072:	d004      	beq.n	800607e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	0018      	movs	r0, r3
 8006078:	f000 fa66 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 800607c:	e007      	b.n	800608e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	0018      	movs	r0, r3
 8006082:	f000 fa59 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0018      	movs	r0, r3
 800608a:	f000 fa65 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2204      	movs	r2, #4
 800609c:	4013      	ands	r3, r2
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d125      	bne.n	80060ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	2204      	movs	r2, #4
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d11e      	bne.n	80060ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2205      	movs	r2, #5
 80060b6:	4252      	negs	r2, r2
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	23c0      	movs	r3, #192	; 0xc0
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4013      	ands	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 fa39 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 80060d6:	e007      	b.n	80060e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	0018      	movs	r0, r3
 80060dc:	f000 fa2c 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	0018      	movs	r0, r3
 80060e4:	f000 fa38 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2208      	movs	r2, #8
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d124      	bne.n	8006146 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	2208      	movs	r2, #8
 8006104:	4013      	ands	r3, r2
 8006106:	2b08      	cmp	r3, #8
 8006108:	d11d      	bne.n	8006146 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2209      	movs	r2, #9
 8006110:	4252      	negs	r2, r2
 8006112:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2204      	movs	r2, #4
 8006118:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	2203      	movs	r2, #3
 8006122:	4013      	ands	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	0018      	movs	r0, r3
 800612a:	f000 fa0d 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 800612e:	e007      	b.n	8006140 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	0018      	movs	r0, r3
 8006134:	f000 fa00 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	0018      	movs	r0, r3
 800613c:	f000 fa0c 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	2210      	movs	r2, #16
 800614e:	4013      	ands	r3, r2
 8006150:	2b10      	cmp	r3, #16
 8006152:	d125      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2210      	movs	r2, #16
 800615c:	4013      	ands	r3, r2
 800615e:	2b10      	cmp	r3, #16
 8006160:	d11e      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2211      	movs	r2, #17
 8006168:	4252      	negs	r2, r2
 800616a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2208      	movs	r2, #8
 8006170:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69da      	ldr	r2, [r3, #28]
 8006178:	23c0      	movs	r3, #192	; 0xc0
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4013      	ands	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	0018      	movs	r0, r3
 8006184:	f000 f9e0 	bl	8006548 <HAL_TIM_IC_CaptureCallback>
 8006188:	e007      	b.n	800619a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	0018      	movs	r0, r3
 800618e:	f000 f9d3 	bl	8006538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	0018      	movs	r0, r3
 8006196:	f000 f9df 	bl	8006558 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d10f      	bne.n	80061ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	4013      	ands	r3, r2
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d108      	bne.n	80061ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2202      	movs	r2, #2
 80061c2:	4252      	negs	r2, r2
 80061c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	0018      	movs	r0, r3
 80061ca:	f7fc ffb7 	bl	800313c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	2240      	movs	r2, #64	; 0x40
 80061d6:	4013      	ands	r3, r2
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d10f      	bne.n	80061fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2240      	movs	r2, #64	; 0x40
 80061e4:	4013      	ands	r3, r2
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d108      	bne.n	80061fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2241      	movs	r2, #65	; 0x41
 80061f0:	4252      	negs	r2, r2
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	0018      	movs	r0, r3
 80061f8:	f000 f9b6 	bl	8006568 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061fc:	46c0      	nop			; (mov r8, r8)
 80061fe:	46bd      	mov	sp, r7
 8006200:	b002      	add	sp, #8
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006210:	2317      	movs	r3, #23
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2238      	movs	r2, #56	; 0x38
 800621c:	5c9b      	ldrb	r3, [r3, r2]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006222:	2302      	movs	r3, #2
 8006224:	e0ad      	b.n	8006382 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2238      	movs	r2, #56	; 0x38
 800622a:	2101      	movs	r1, #1
 800622c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	d100      	bne.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006234:	e076      	b.n	8006324 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	d900      	bls.n	800623e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800623c:	e095      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x166>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b08      	cmp	r3, #8
 8006242:	d04e      	beq.n	80062e2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b08      	cmp	r3, #8
 8006248:	d900      	bls.n	800624c <HAL_TIM_PWM_ConfigChannel+0x48>
 800624a:	e08e      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x166>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_PWM_ConfigChannel+0x56>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2b04      	cmp	r3, #4
 8006256:	d021      	beq.n	800629c <HAL_TIM_PWM_ConfigChannel+0x98>
 8006258:	e087      	b.n	800636a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	0011      	movs	r1, r2
 8006262:	0018      	movs	r0, r3
 8006264:	f000 f9dc 	bl	8006620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699a      	ldr	r2, [r3, #24]
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2108      	movs	r1, #8
 8006274:	430a      	orrs	r2, r1
 8006276:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2104      	movs	r1, #4
 8006284:	438a      	bics	r2, r1
 8006286:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6999      	ldr	r1, [r3, #24]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	619a      	str	r2, [r3, #24]
      break;
 800629a:	e06b      	b.n	8006374 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	0011      	movs	r1, r2
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 f9f7 	bl	8006698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2180      	movs	r1, #128	; 0x80
 80062b6:	0109      	lsls	r1, r1, #4
 80062b8:	430a      	orrs	r2, r1
 80062ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4931      	ldr	r1, [pc, #196]	; (800638c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80062c8:	400a      	ands	r2, r1
 80062ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6999      	ldr	r1, [r3, #24]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	021a      	lsls	r2, r3, #8
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	619a      	str	r2, [r3, #24]
      break;
 80062e0:	e048      	b.n	8006374 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68ba      	ldr	r2, [r7, #8]
 80062e8:	0011      	movs	r1, r2
 80062ea:	0018      	movs	r0, r3
 80062ec:	f000 fa16 	bl	800671c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	69da      	ldr	r2, [r3, #28]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2108      	movs	r1, #8
 80062fc:	430a      	orrs	r2, r1
 80062fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2104      	movs	r1, #4
 800630c:	438a      	bics	r2, r1
 800630e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69d9      	ldr	r1, [r3, #28]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	61da      	str	r2, [r3, #28]
      break;
 8006322:	e027      	b.n	8006374 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	0011      	movs	r1, r2
 800632c:	0018      	movs	r0, r3
 800632e:	f000 fa35 	bl	800679c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2180      	movs	r1, #128	; 0x80
 800633e:	0109      	lsls	r1, r1, #4
 8006340:	430a      	orrs	r2, r1
 8006342:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	69da      	ldr	r2, [r3, #28]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	490f      	ldr	r1, [pc, #60]	; (800638c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006350:	400a      	ands	r2, r1
 8006352:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69d9      	ldr	r1, [r3, #28]
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	021a      	lsls	r2, r3, #8
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	61da      	str	r2, [r3, #28]
      break;
 8006368:	e004      	b.n	8006374 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800636a:	2317      	movs	r3, #23
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
      break;
 8006372:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2238      	movs	r2, #56	; 0x38
 8006378:	2100      	movs	r1, #0
 800637a:	5499      	strb	r1, [r3, r2]

  return status;
 800637c:	2317      	movs	r3, #23
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	781b      	ldrb	r3, [r3, #0]
}
 8006382:	0018      	movs	r0, r3
 8006384:	46bd      	mov	sp, r7
 8006386:	b006      	add	sp, #24
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			; (mov r8, r8)
 800638c:	fffffbff 	.word	0xfffffbff

08006390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800639a:	230f      	movs	r3, #15
 800639c:	18fb      	adds	r3, r7, r3
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2238      	movs	r2, #56	; 0x38
 80063a6:	5c9b      	ldrb	r3, [r3, r2]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d101      	bne.n	80063b0 <HAL_TIM_ConfigClockSource+0x20>
 80063ac:	2302      	movs	r3, #2
 80063ae:	e0bc      	b.n	800652a <HAL_TIM_ConfigClockSource+0x19a>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2238      	movs	r2, #56	; 0x38
 80063b4:	2101      	movs	r1, #1
 80063b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2239      	movs	r2, #57	; 0x39
 80063bc:	2102      	movs	r1, #2
 80063be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2277      	movs	r2, #119	; 0x77
 80063cc:	4393      	bics	r3, r2
 80063ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4a58      	ldr	r2, [pc, #352]	; (8006534 <HAL_TIM_ConfigClockSource+0x1a4>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2280      	movs	r2, #128	; 0x80
 80063e6:	0192      	lsls	r2, r2, #6
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d040      	beq.n	800646e <HAL_TIM_ConfigClockSource+0xde>
 80063ec:	2280      	movs	r2, #128	; 0x80
 80063ee:	0192      	lsls	r2, r2, #6
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d900      	bls.n	80063f6 <HAL_TIM_ConfigClockSource+0x66>
 80063f4:	e088      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 80063f6:	2280      	movs	r2, #128	; 0x80
 80063f8:	0152      	lsls	r2, r2, #5
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d100      	bne.n	8006400 <HAL_TIM_ConfigClockSource+0x70>
 80063fe:	e088      	b.n	8006512 <HAL_TIM_ConfigClockSource+0x182>
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	0152      	lsls	r2, r2, #5
 8006404:	4293      	cmp	r3, r2
 8006406:	d900      	bls.n	800640a <HAL_TIM_ConfigClockSource+0x7a>
 8006408:	e07e      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 800640a:	2b70      	cmp	r3, #112	; 0x70
 800640c:	d018      	beq.n	8006440 <HAL_TIM_ConfigClockSource+0xb0>
 800640e:	d900      	bls.n	8006412 <HAL_TIM_ConfigClockSource+0x82>
 8006410:	e07a      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 8006412:	2b60      	cmp	r3, #96	; 0x60
 8006414:	d04f      	beq.n	80064b6 <HAL_TIM_ConfigClockSource+0x126>
 8006416:	d900      	bls.n	800641a <HAL_TIM_ConfigClockSource+0x8a>
 8006418:	e076      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 800641a:	2b50      	cmp	r3, #80	; 0x50
 800641c:	d03b      	beq.n	8006496 <HAL_TIM_ConfigClockSource+0x106>
 800641e:	d900      	bls.n	8006422 <HAL_TIM_ConfigClockSource+0x92>
 8006420:	e072      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 8006422:	2b40      	cmp	r3, #64	; 0x40
 8006424:	d057      	beq.n	80064d6 <HAL_TIM_ConfigClockSource+0x146>
 8006426:	d900      	bls.n	800642a <HAL_TIM_ConfigClockSource+0x9a>
 8006428:	e06e      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 800642a:	2b30      	cmp	r3, #48	; 0x30
 800642c:	d063      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x166>
 800642e:	d86b      	bhi.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 8006430:	2b20      	cmp	r3, #32
 8006432:	d060      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x166>
 8006434:	d868      	bhi.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
 8006436:	2b00      	cmp	r3, #0
 8006438:	d05d      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x166>
 800643a:	2b10      	cmp	r3, #16
 800643c:	d05b      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0x166>
 800643e:	e063      	b.n	8006508 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6899      	ldr	r1, [r3, #8]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f000 fa64 	bl	800691c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2277      	movs	r2, #119	; 0x77
 8006460:	4313      	orrs	r3, r2
 8006462:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	609a      	str	r2, [r3, #8]
      break;
 800646c:	e052      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6899      	ldr	r1, [r3, #8]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f000 fa4d 	bl	800691c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	01c9      	lsls	r1, r1, #7
 8006490:	430a      	orrs	r2, r1
 8006492:	609a      	str	r2, [r3, #8]
      break;
 8006494:	e03e      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6859      	ldr	r1, [r3, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	001a      	movs	r2, r3
 80064a4:	f000 f9c0 	bl	8006828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2150      	movs	r1, #80	; 0x50
 80064ae:	0018      	movs	r0, r3
 80064b0:	f000 fa1a 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80064b4:	e02e      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6818      	ldr	r0, [r3, #0]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6859      	ldr	r1, [r3, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	001a      	movs	r2, r3
 80064c4:	f000 f9de 	bl	8006884 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2160      	movs	r1, #96	; 0x60
 80064ce:	0018      	movs	r0, r3
 80064d0:	f000 fa0a 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80064d4:	e01e      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6818      	ldr	r0, [r3, #0]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	6859      	ldr	r1, [r3, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	001a      	movs	r2, r3
 80064e4:	f000 f9a0 	bl	8006828 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2140      	movs	r1, #64	; 0x40
 80064ee:	0018      	movs	r0, r3
 80064f0:	f000 f9fa 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 80064f4:	e00e      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	0019      	movs	r1, r3
 8006500:	0010      	movs	r0, r2
 8006502:	f000 f9f1 	bl	80068e8 <TIM_ITRx_SetConfig>
      break;
 8006506:	e005      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006508:	230f      	movs	r3, #15
 800650a:	18fb      	adds	r3, r7, r3
 800650c:	2201      	movs	r2, #1
 800650e:	701a      	strb	r2, [r3, #0]
      break;
 8006510:	e000      	b.n	8006514 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006512:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2239      	movs	r2, #57	; 0x39
 8006518:	2101      	movs	r1, #1
 800651a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2238      	movs	r2, #56	; 0x38
 8006520:	2100      	movs	r1, #0
 8006522:	5499      	strb	r1, [r3, r2]

  return status;
 8006524:	230f      	movs	r3, #15
 8006526:	18fb      	adds	r3, r7, r3
 8006528:	781b      	ldrb	r3, [r3, #0]
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b004      	add	sp, #16
 8006530:	bd80      	pop	{r7, pc}
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	ffff00ff 	.word	0xffff00ff

08006538 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b002      	add	sp, #8
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006550:	46c0      	nop			; (mov r8, r8)
 8006552:	46bd      	mov	sp, r7
 8006554:	b002      	add	sp, #8
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006560:	46c0      	nop			; (mov r8, r8)
 8006562:	46bd      	mov	sp, r7
 8006564:	b002      	add	sp, #8
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b002      	add	sp, #8
 8006576:	bd80      	pop	{r7, pc}

08006578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	2380      	movs	r3, #128	; 0x80
 800658c:	05db      	lsls	r3, r3, #23
 800658e:	429a      	cmp	r2, r3
 8006590:	d007      	beq.n	80065a2 <TIM_Base_SetConfig+0x2a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <TIM_Base_SetConfig+0x9c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0x2a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <TIM_Base_SetConfig+0xa0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d108      	bne.n	80065b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2270      	movs	r2, #112	; 0x70
 80065a6:	4393      	bics	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	05db      	lsls	r3, r3, #23
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d007      	beq.n	80065ce <TIM_Base_SetConfig+0x56>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a14      	ldr	r2, [pc, #80]	; (8006614 <TIM_Base_SetConfig+0x9c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d003      	beq.n	80065ce <TIM_Base_SetConfig+0x56>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <TIM_Base_SetConfig+0xa0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d108      	bne.n	80065e0 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4a12      	ldr	r2, [pc, #72]	; (800661c <TIM_Base_SetConfig+0xa4>)
 80065d2:	4013      	ands	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	4393      	bics	r3, r2
 80065e6:	001a      	movs	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2201      	movs	r2, #1
 800660a:	615a      	str	r2, [r3, #20]
}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	b004      	add	sp, #16
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40010800 	.word	0x40010800
 8006618:	40011400 	.word	0x40011400
 800661c:	fffffcff 	.word	0xfffffcff

08006620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b086      	sub	sp, #24
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	2201      	movs	r2, #1
 8006630:	4393      	bics	r3, r2
 8006632:	001a      	movs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2270      	movs	r2, #112	; 0x70
 800664e:	4393      	bics	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2203      	movs	r2, #3
 8006656:	4393      	bics	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	2202      	movs	r2, #2
 8006668:	4393      	bics	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	b006      	add	sp, #24
 8006696:	bd80      	pop	{r7, pc}

08006698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	2210      	movs	r2, #16
 80066a8:	4393      	bics	r3, r2
 80066aa:	001a      	movs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a1b      	ldr	r3, [r3, #32]
 80066b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <TIM_OC2_SetConfig+0x7c>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	4a12      	ldr	r2, [pc, #72]	; (8006718 <TIM_OC2_SetConfig+0x80>)
 80066ce:	4013      	ands	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	021b      	lsls	r3, r3, #8
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2220      	movs	r2, #32
 80066e2:	4393      	bics	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	621a      	str	r2, [r3, #32]
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b006      	add	sp, #24
 8006712:	bd80      	pop	{r7, pc}
 8006714:	ffff8fff 	.word	0xffff8fff
 8006718:	fffffcff 	.word	0xfffffcff

0800671c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	4a1a      	ldr	r2, [pc, #104]	; (8006794 <TIM_OC3_SetConfig+0x78>)
 800672c:	401a      	ands	r2, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2270      	movs	r2, #112	; 0x70
 8006748:	4393      	bics	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2203      	movs	r2, #3
 8006750:	4393      	bics	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4313      	orrs	r3, r2
 800675c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4a0d      	ldr	r2, [pc, #52]	; (8006798 <TIM_OC3_SetConfig+0x7c>)
 8006762:	4013      	ands	r3, r2
 8006764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	021b      	lsls	r3, r3, #8
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	4313      	orrs	r3, r2
 8006770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	46c0      	nop			; (mov r8, r8)
 800678e:	46bd      	mov	sp, r7
 8006790:	b006      	add	sp, #24
 8006792:	bd80      	pop	{r7, pc}
 8006794:	fffffeff 	.word	0xfffffeff
 8006798:	fffffdff 	.word	0xfffffdff

0800679c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	4a1b      	ldr	r2, [pc, #108]	; (8006818 <TIM_OC4_SetConfig+0x7c>)
 80067ac:	401a      	ands	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4a15      	ldr	r2, [pc, #84]	; (800681c <TIM_OC4_SetConfig+0x80>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a14      	ldr	r2, [pc, #80]	; (8006820 <TIM_OC4_SetConfig+0x84>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	021b      	lsls	r3, r3, #8
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4313      	orrs	r3, r2
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <TIM_OC4_SetConfig+0x88>)
 80067e4:	4013      	ands	r3, r2
 80067e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	689b      	ldr	r3, [r3, #8]
 80067ec:	031b      	lsls	r3, r3, #12
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	621a      	str	r2, [r3, #32]
}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	46bd      	mov	sp, r7
 8006812:	b006      	add	sp, #24
 8006814:	bd80      	pop	{r7, pc}
 8006816:	46c0      	nop			; (mov r8, r8)
 8006818:	ffffefff 	.word	0xffffefff
 800681c:	ffff8fff 	.word	0xffff8fff
 8006820:	fffffcff 	.word	0xfffffcff
 8006824:	ffffdfff 	.word	0xffffdfff

08006828 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	2201      	movs	r2, #1
 8006840:	4393      	bics	r3, r2
 8006842:	001a      	movs	r2, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	22f0      	movs	r2, #240	; 0xf0
 8006852:	4393      	bics	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	4313      	orrs	r3, r2
 800685e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	220a      	movs	r2, #10
 8006864:	4393      	bics	r3, r2
 8006866:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006868:	697a      	ldr	r2, [r7, #20]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	46c0      	nop			; (mov r8, r8)
 800687e:	46bd      	mov	sp, r7
 8006880:	b006      	add	sp, #24
 8006882:	bd80      	pop	{r7, pc}

08006884 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b086      	sub	sp, #24
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	2210      	movs	r2, #16
 8006896:	4393      	bics	r3, r2
 8006898:	001a      	movs	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	4a0d      	ldr	r2, [pc, #52]	; (80068e4 <TIM_TI2_ConfigInputStage+0x60>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	031b      	lsls	r3, r3, #12
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	22a0      	movs	r2, #160	; 0xa0
 80068c0:	4393      	bics	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	011b      	lsls	r3, r3, #4
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	46c0      	nop			; (mov r8, r8)
 80068dc:	46bd      	mov	sp, r7
 80068de:	b006      	add	sp, #24
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	ffff0fff 	.word	0xffff0fff

080068e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2270      	movs	r2, #112	; 0x70
 80068fc:	4393      	bics	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	2207      	movs	r2, #7
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	609a      	str	r2, [r3, #8]
}
 8006912:	46c0      	nop			; (mov r8, r8)
 8006914:	46bd      	mov	sp, r7
 8006916:	b004      	add	sp, #16
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <TIM_ETR_SetConfig+0x3c>)
 8006934:	4013      	ands	r3, r2
 8006936:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	021a      	lsls	r2, r3, #8
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	431a      	orrs	r2, r3
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	4313      	orrs	r3, r2
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	609a      	str	r2, [r3, #8]
}
 8006950:	46c0      	nop			; (mov r8, r8)
 8006952:	46bd      	mov	sp, r7
 8006954:	b006      	add	sp, #24
 8006956:	bd80      	pop	{r7, pc}
 8006958:	ffff00ff 	.word	0xffff00ff

0800695c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b086      	sub	sp, #24
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	221f      	movs	r2, #31
 800696c:	4013      	ands	r3, r2
 800696e:	2201      	movs	r2, #1
 8006970:	409a      	lsls	r2, r3
 8006972:	0013      	movs	r3, r2
 8006974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	43d2      	mvns	r2, r2
 800697e:	401a      	ands	r2, r3
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1a      	ldr	r2, [r3, #32]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	211f      	movs	r1, #31
 800698c:	400b      	ands	r3, r1
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4099      	lsls	r1, r3
 8006992:	000b      	movs	r3, r1
 8006994:	431a      	orrs	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	46bd      	mov	sp, r7
 800699e:	b006      	add	sp, #24
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2238      	movs	r2, #56	; 0x38
 80069b2:	5c9b      	ldrb	r3, [r3, r2]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e042      	b.n	8006a42 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2238      	movs	r2, #56	; 0x38
 80069c0:	2101      	movs	r1, #1
 80069c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2239      	movs	r2, #57	; 0x39
 80069c8:	2102      	movs	r1, #2
 80069ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2270      	movs	r2, #112	; 0x70
 80069e0:	4393      	bics	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	2380      	movs	r3, #128	; 0x80
 80069fc:	05db      	lsls	r3, r3, #23
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d009      	beq.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a0f      	ldr	r2, [pc, #60]	; (8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d10c      	bne.n	8006a30 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2280      	movs	r2, #128	; 0x80
 8006a1a:	4393      	bics	r3, r2
 8006a1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2239      	movs	r2, #57	; 0x39
 8006a34:	2101      	movs	r1, #1
 8006a36:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2238      	movs	r2, #56	; 0x38
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	0018      	movs	r0, r3
 8006a44:	46bd      	mov	sp, r7
 8006a46:	b004      	add	sp, #16
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	40010800 	.word	0x40010800
 8006a50:	40011400 	.word	0x40011400

08006a54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e044      	b.n	8006af0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d107      	bne.n	8006a7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2274      	movs	r2, #116	; 0x74
 8006a72:	2100      	movs	r1, #0
 8006a74:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	0018      	movs	r0, r3
 8006a7a:	f7fd f8ad 	bl	8003bd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2224      	movs	r2, #36	; 0x24
 8006a82:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2101      	movs	r1, #1
 8006a90:	438a      	bics	r2, r1
 8006a92:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	0018      	movs	r0, r3
 8006a98:	f000 fbce 	bl	8007238 <UART_SetConfig>
 8006a9c:	0003      	movs	r3, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e024      	b.n	8006af0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 fe45 	bl	8007740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	490d      	ldr	r1, [pc, #52]	; (8006af8 <HAL_UART_Init+0xa4>)
 8006ac2:	400a      	ands	r2, r1
 8006ac4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	212a      	movs	r1, #42	; 0x2a
 8006ad2:	438a      	bics	r2, r1
 8006ad4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2101      	movs	r1, #1
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	0018      	movs	r0, r3
 8006aea:	f000 fedd 	bl	80078a8 <UART_CheckIdleState>
 8006aee:	0003      	movs	r3, r0
}
 8006af0:	0018      	movs	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b002      	add	sp, #8
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	ffffb7ff 	.word	0xffffb7ff

08006afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08a      	sub	sp, #40	; 0x28
 8006b00:	af02      	add	r7, sp, #8
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	1dbb      	adds	r3, r7, #6
 8006b0a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b10:	2b20      	cmp	r3, #32
 8006b12:	d000      	beq.n	8006b16 <HAL_UART_Transmit+0x1a>
 8006b14:	e095      	b.n	8006c42 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_UART_Transmit+0x28>
 8006b1c:	1dbb      	adds	r3, r7, #6
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e08d      	b.n	8006c44 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689a      	ldr	r2, [r3, #8]
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	015b      	lsls	r3, r3, #5
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d109      	bne.n	8006b48 <HAL_UART_Transmit+0x4c>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4013      	ands	r3, r2
 8006b42:	d001      	beq.n	8006b48 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e07d      	b.n	8006c44 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2274      	movs	r2, #116	; 0x74
 8006b4c:	5c9b      	ldrb	r3, [r3, r2]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d101      	bne.n	8006b56 <HAL_UART_Transmit+0x5a>
 8006b52:	2302      	movs	r3, #2
 8006b54:	e076      	b.n	8006c44 <HAL_UART_Transmit+0x148>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2274      	movs	r2, #116	; 0x74
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2280      	movs	r2, #128	; 0x80
 8006b62:	2100      	movs	r1, #0
 8006b64:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2221      	movs	r2, #33	; 0x21
 8006b6a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b6c:	f7fd f910 	bl	8003d90 <HAL_GetTick>
 8006b70:	0003      	movs	r3, r0
 8006b72:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	1dba      	adds	r2, r7, #6
 8006b78:	2150      	movs	r1, #80	; 0x50
 8006b7a:	8812      	ldrh	r2, [r2, #0]
 8006b7c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1dba      	adds	r2, r7, #6
 8006b82:	2152      	movs	r1, #82	; 0x52
 8006b84:	8812      	ldrh	r2, [r2, #0]
 8006b86:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	2380      	movs	r3, #128	; 0x80
 8006b8e:	015b      	lsls	r3, r3, #5
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d108      	bne.n	8006ba6 <HAL_UART_Transmit+0xaa>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d104      	bne.n	8006ba6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	61bb      	str	r3, [r7, #24]
 8006ba4:	e003      	b.n	8006bae <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2274      	movs	r2, #116	; 0x74
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006bb6:	e02c      	b.n	8006c12 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	0013      	movs	r3, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	f000 feb7 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 8006bca:	1e03      	subs	r3, r0, #0
 8006bcc:	d001      	beq.n	8006bd2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e038      	b.n	8006c44 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10b      	bne.n	8006bf0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	881b      	ldrh	r3, [r3, #0]
 8006bdc:	001a      	movs	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	05d2      	lsls	r2, r2, #23
 8006be4:	0dd2      	lsrs	r2, r2, #23
 8006be6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	3302      	adds	r3, #2
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	e007      	b.n	8006c00 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2252      	movs	r2, #82	; 0x52
 8006c04:	5a9b      	ldrh	r3, [r3, r2]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	b299      	uxth	r1, r3
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2252      	movs	r2, #82	; 0x52
 8006c10:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2252      	movs	r2, #82	; 0x52
 8006c16:	5a9b      	ldrh	r3, [r3, r2]
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d1cc      	bne.n	8006bb8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	0013      	movs	r3, r2
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2140      	movs	r1, #64	; 0x40
 8006c2c:	f000 fe84 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 8006c30:	1e03      	subs	r3, r0, #0
 8006c32:	d001      	beq.n	8006c38 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e005      	b.n	8006c44 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	e000      	b.n	8006c44 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006c42:	2302      	movs	r3, #2
  }
}
 8006c44:	0018      	movs	r0, r3
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b008      	add	sp, #32
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c4c:	b590      	push	{r4, r7, lr}
 8006c4e:	b0ab      	sub	sp, #172	; 0xac
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	22a4      	movs	r2, #164	; 0xa4
 8006c5c:	18b9      	adds	r1, r7, r2
 8006c5e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	20a0      	movs	r0, #160	; 0xa0
 8006c68:	1839      	adds	r1, r7, r0
 8006c6a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	219c      	movs	r1, #156	; 0x9c
 8006c74:	1879      	adds	r1, r7, r1
 8006c76:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c78:	0011      	movs	r1, r2
 8006c7a:	18bb      	adds	r3, r7, r2
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a99      	ldr	r2, [pc, #612]	; (8006ee4 <HAL_UART_IRQHandler+0x298>)
 8006c80:	4013      	ands	r3, r2
 8006c82:	2298      	movs	r2, #152	; 0x98
 8006c84:	18bc      	adds	r4, r7, r2
 8006c86:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8006c88:	18bb      	adds	r3, r7, r2
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d114      	bne.n	8006cba <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c90:	187b      	adds	r3, r7, r1
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2220      	movs	r2, #32
 8006c96:	4013      	ands	r3, r2
 8006c98:	d00f      	beq.n	8006cba <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c9a:	183b      	adds	r3, r7, r0
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d00a      	beq.n	8006cba <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d100      	bne.n	8006cae <HAL_UART_IRQHandler+0x62>
 8006cac:	e298      	b.n	80071e0 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	0010      	movs	r0, r2
 8006cb6:	4798      	blx	r3
      }
      return;
 8006cb8:	e292      	b.n	80071e0 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006cba:	2398      	movs	r3, #152	; 0x98
 8006cbc:	18fb      	adds	r3, r7, r3
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d100      	bne.n	8006cc6 <HAL_UART_IRQHandler+0x7a>
 8006cc4:	e114      	b.n	8006ef0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cc6:	239c      	movs	r3, #156	; 0x9c
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d106      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cd2:	23a0      	movs	r3, #160	; 0xa0
 8006cd4:	18fb      	adds	r3, r7, r3
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a83      	ldr	r2, [pc, #524]	; (8006ee8 <HAL_UART_IRQHandler+0x29c>)
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d100      	bne.n	8006ce0 <HAL_UART_IRQHandler+0x94>
 8006cde:	e107      	b.n	8006ef0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce0:	23a4      	movs	r3, #164	; 0xa4
 8006ce2:	18fb      	adds	r3, r7, r3
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	4013      	ands	r3, r2
 8006cea:	d012      	beq.n	8006d12 <HAL_UART_IRQHandler+0xc6>
 8006cec:	23a0      	movs	r3, #160	; 0xa0
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	2380      	movs	r3, #128	; 0x80
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	d00b      	beq.n	8006d12 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2280      	movs	r2, #128	; 0x80
 8006d06:	589b      	ldr	r3, [r3, r2]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2180      	movs	r1, #128	; 0x80
 8006d10:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d12:	23a4      	movs	r3, #164	; 0xa4
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2202      	movs	r2, #2
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	d011      	beq.n	8006d42 <HAL_UART_IRQHandler+0xf6>
 8006d1e:	239c      	movs	r3, #156	; 0x9c
 8006d20:	18fb      	adds	r3, r7, r3
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	4013      	ands	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2280      	movs	r2, #128	; 0x80
 8006d36:	589b      	ldr	r3, [r3, r2]
 8006d38:	2204      	movs	r2, #4
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d42:	23a4      	movs	r3, #164	; 0xa4
 8006d44:	18fb      	adds	r3, r7, r3
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2204      	movs	r2, #4
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	d011      	beq.n	8006d72 <HAL_UART_IRQHandler+0x126>
 8006d4e:	239c      	movs	r3, #156	; 0x9c
 8006d50:	18fb      	adds	r3, r7, r3
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2201      	movs	r2, #1
 8006d56:	4013      	ands	r3, r2
 8006d58:	d00b      	beq.n	8006d72 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2204      	movs	r2, #4
 8006d60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2280      	movs	r2, #128	; 0x80
 8006d66:	589b      	ldr	r3, [r3, r2]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d72:	23a4      	movs	r3, #164	; 0xa4
 8006d74:	18fb      	adds	r3, r7, r3
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2208      	movs	r2, #8
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d017      	beq.n	8006dae <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d7e:	23a0      	movs	r3, #160	; 0xa0
 8006d80:	18fb      	adds	r3, r7, r3
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2220      	movs	r2, #32
 8006d86:	4013      	ands	r3, r2
 8006d88:	d105      	bne.n	8006d96 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d8a:	239c      	movs	r3, #156	; 0x9c
 8006d8c:	18fb      	adds	r3, r7, r3
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2201      	movs	r2, #1
 8006d92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d94:	d00b      	beq.n	8006dae <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2208      	movs	r2, #8
 8006d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2280      	movs	r2, #128	; 0x80
 8006da2:	589b      	ldr	r3, [r3, r2]
 8006da4:	2208      	movs	r2, #8
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2180      	movs	r1, #128	; 0x80
 8006dac:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dae:	23a4      	movs	r3, #164	; 0xa4
 8006db0:	18fb      	adds	r3, r7, r3
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	2380      	movs	r3, #128	; 0x80
 8006db6:	011b      	lsls	r3, r3, #4
 8006db8:	4013      	ands	r3, r2
 8006dba:	d013      	beq.n	8006de4 <HAL_UART_IRQHandler+0x198>
 8006dbc:	23a0      	movs	r3, #160	; 0xa0
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	2380      	movs	r3, #128	; 0x80
 8006dc4:	04db      	lsls	r3, r3, #19
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d00c      	beq.n	8006de4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2280      	movs	r2, #128	; 0x80
 8006dd0:	0112      	lsls	r2, r2, #4
 8006dd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2280      	movs	r2, #128	; 0x80
 8006dd8:	589b      	ldr	r3, [r3, r2]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2180      	movs	r1, #128	; 0x80
 8006de2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2280      	movs	r2, #128	; 0x80
 8006de8:	589b      	ldr	r3, [r3, r2]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d100      	bne.n	8006df0 <HAL_UART_IRQHandler+0x1a4>
 8006dee:	e1f9      	b.n	80071e4 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006df0:	23a4      	movs	r3, #164	; 0xa4
 8006df2:	18fb      	adds	r3, r7, r3
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2220      	movs	r2, #32
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d00e      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dfc:	23a0      	movs	r3, #160	; 0xa0
 8006dfe:	18fb      	adds	r3, r7, r3
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2220      	movs	r2, #32
 8006e04:	4013      	ands	r3, r2
 8006e06:	d008      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d004      	beq.n	8006e1a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	0010      	movs	r0, r2
 8006e18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	589b      	ldr	r3, [r3, r2]
 8006e20:	2194      	movs	r1, #148	; 0x94
 8006e22:	187a      	adds	r2, r7, r1
 8006e24:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	2240      	movs	r2, #64	; 0x40
 8006e2e:	4013      	ands	r3, r2
 8006e30:	2b40      	cmp	r3, #64	; 0x40
 8006e32:	d004      	beq.n	8006e3e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2228      	movs	r2, #40	; 0x28
 8006e3a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e3c:	d047      	beq.n	8006ece <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	0018      	movs	r0, r3
 8006e42:	f000 fe3d 	bl	8007ac0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2240      	movs	r2, #64	; 0x40
 8006e4e:	4013      	ands	r3, r2
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d137      	bne.n	8006ec4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e54:	f3ef 8310 	mrs	r3, PRIMASK
 8006e58:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e5c:	2090      	movs	r0, #144	; 0x90
 8006e5e:	183a      	adds	r2, r7, r0
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	2301      	movs	r3, #1
 8006e64:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e68:	f383 8810 	msr	PRIMASK, r3
}
 8006e6c:	46c0      	nop			; (mov r8, r8)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2140      	movs	r1, #64	; 0x40
 8006e7a:	438a      	bics	r2, r1
 8006e7c:	609a      	str	r2, [r3, #8]
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006e86:	f383 8810 	msr	PRIMASK, r3
}
 8006e8a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d012      	beq.n	8006eba <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a14      	ldr	r2, [pc, #80]	; (8006eec <HAL_UART_IRQHandler+0x2a0>)
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f7fd f8c1 	bl	8004028 <HAL_DMA_Abort_IT>
 8006ea6:	1e03      	subs	r3, r0, #0
 8006ea8:	d01a      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb4:	0018      	movs	r0, r3
 8006eb6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb8:	e012      	b.n	8006ee0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f9a7 	bl	8007210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec2:	e00d      	b.n	8006ee0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 f9a2 	bl	8007210 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ecc:	e008      	b.n	8006ee0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	f000 f99d 	bl	8007210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2280      	movs	r2, #128	; 0x80
 8006eda:	2100      	movs	r1, #0
 8006edc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006ede:	e181      	b.n	80071e4 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ee0:	46c0      	nop			; (mov r8, r8)
    return;
 8006ee2:	e17f      	b.n	80071e4 <HAL_UART_IRQHandler+0x598>
 8006ee4:	0000080f 	.word	0x0000080f
 8006ee8:	04000120 	.word	0x04000120
 8006eec:	08007b85 	.word	0x08007b85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d000      	beq.n	8006efa <HAL_UART_IRQHandler+0x2ae>
 8006ef8:	e133      	b.n	8007162 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006efa:	23a4      	movs	r3, #164	; 0xa4
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2210      	movs	r2, #16
 8006f02:	4013      	ands	r3, r2
 8006f04:	d100      	bne.n	8006f08 <HAL_UART_IRQHandler+0x2bc>
 8006f06:	e12c      	b.n	8007162 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f08:	23a0      	movs	r3, #160	; 0xa0
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2210      	movs	r2, #16
 8006f10:	4013      	ands	r3, r2
 8006f12:	d100      	bne.n	8006f16 <HAL_UART_IRQHandler+0x2ca>
 8006f14:	e125      	b.n	8007162 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	2240      	movs	r2, #64	; 0x40
 8006f26:	4013      	ands	r3, r2
 8006f28:	2b40      	cmp	r3, #64	; 0x40
 8006f2a:	d000      	beq.n	8006f2e <HAL_UART_IRQHandler+0x2e2>
 8006f2c:	e09d      	b.n	800706a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	217e      	movs	r1, #126	; 0x7e
 8006f38:	187b      	adds	r3, r7, r1
 8006f3a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006f3c:	187b      	adds	r3, r7, r1
 8006f3e:	881b      	ldrh	r3, [r3, #0]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d100      	bne.n	8006f46 <HAL_UART_IRQHandler+0x2fa>
 8006f44:	e150      	b.n	80071e8 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2258      	movs	r2, #88	; 0x58
 8006f4a:	5a9b      	ldrh	r3, [r3, r2]
 8006f4c:	187a      	adds	r2, r7, r1
 8006f4e:	8812      	ldrh	r2, [r2, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d300      	bcc.n	8006f56 <HAL_UART_IRQHandler+0x30a>
 8006f54:	e148      	b.n	80071e8 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	187a      	adds	r2, r7, r1
 8006f5a:	215a      	movs	r1, #90	; 0x5a
 8006f5c:	8812      	ldrh	r2, [r2, #0]
 8006f5e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d16e      	bne.n	800704c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f76:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f78:	2301      	movs	r3, #1
 8006f7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	f383 8810 	msr	PRIMASK, r3
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	499a      	ldr	r1, [pc, #616]	; (80071f8 <HAL_UART_IRQHandler+0x5ac>)
 8006f90:	400a      	ands	r2, r1
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9a:	f383 8810 	msr	PRIMASK, r3
}
 8006f9e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fa8:	677b      	str	r3, [r7, #116]	; 0x74
 8006faa:	2301      	movs	r3, #1
 8006fac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb0:	f383 8810 	msr	PRIMASK, r3
}
 8006fb4:	46c0      	nop			; (mov r8, r8)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689a      	ldr	r2, [r3, #8]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2101      	movs	r1, #1
 8006fc2:	438a      	bics	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]
 8006fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fcc:	f383 8810 	msr	PRIMASK, r3
}
 8006fd0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fda:	673b      	str	r3, [r7, #112]	; 0x70
 8006fdc:	2301      	movs	r3, #1
 8006fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2140      	movs	r1, #64	; 0x40
 8006ff4:	438a      	bics	r2, r1
 8006ff6:	609a      	str	r2, [r3, #8]
 8006ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ffa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffe:	f383 8810 	msr	PRIMASK, r3
}
 8007002:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2220      	movs	r2, #32
 8007008:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007010:	f3ef 8310 	mrs	r3, PRIMASK
 8007014:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007016:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800701a:	2301      	movs	r3, #1
 800701c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007020:	f383 8810 	msr	PRIMASK, r3
}
 8007024:	46c0      	nop			; (mov r8, r8)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2110      	movs	r1, #16
 8007032:	438a      	bics	r2, r1
 8007034:	601a      	str	r2, [r3, #0]
 8007036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007038:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	f383 8810 	msr	PRIMASK, r3
}
 8007040:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007046:	0018      	movs	r0, r3
 8007048:	f7fc ffae 	bl	8003fa8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2258      	movs	r2, #88	; 0x58
 8007050:	5a9a      	ldrh	r2, [r3, r2]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	215a      	movs	r1, #90	; 0x5a
 8007056:	5a5b      	ldrh	r3, [r3, r1]
 8007058:	b29b      	uxth	r3, r3
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	b29a      	uxth	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	0011      	movs	r1, r2
 8007062:	0018      	movs	r0, r3
 8007064:	f000 f8dc 	bl	8007220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007068:	e0be      	b.n	80071e8 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2258      	movs	r2, #88	; 0x58
 800706e:	5a99      	ldrh	r1, [r3, r2]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	225a      	movs	r2, #90	; 0x5a
 8007074:	5a9b      	ldrh	r3, [r3, r2]
 8007076:	b29a      	uxth	r2, r3
 8007078:	208e      	movs	r0, #142	; 0x8e
 800707a:	183b      	adds	r3, r7, r0
 800707c:	1a8a      	subs	r2, r1, r2
 800707e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	225a      	movs	r2, #90	; 0x5a
 8007084:	5a9b      	ldrh	r3, [r3, r2]
 8007086:	b29b      	uxth	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d100      	bne.n	800708e <HAL_UART_IRQHandler+0x442>
 800708c:	e0ae      	b.n	80071ec <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 800708e:	183b      	adds	r3, r7, r0
 8007090:	881b      	ldrh	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d100      	bne.n	8007098 <HAL_UART_IRQHandler+0x44c>
 8007096:	e0a9      	b.n	80071ec <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007098:	f3ef 8310 	mrs	r3, PRIMASK
 800709c:	60fb      	str	r3, [r7, #12]
  return(result);
 800709e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070a0:	2488      	movs	r4, #136	; 0x88
 80070a2:	193a      	adds	r2, r7, r4
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	2301      	movs	r3, #1
 80070a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			; (mov r8, r8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	494f      	ldr	r1, [pc, #316]	; (80071fc <HAL_UART_IRQHandler+0x5b0>)
 80070be:	400a      	ands	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	193b      	adds	r3, r7, r4
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f383 8810 	msr	PRIMASK, r3
}
 80070ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d0:	f3ef 8310 	mrs	r3, PRIMASK
 80070d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80070d6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d8:	2484      	movs	r4, #132	; 0x84
 80070da:	193a      	adds	r2, r7, r4
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	2301      	movs	r3, #1
 80070e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	f383 8810 	msr	PRIMASK, r3
}
 80070e8:	46c0      	nop			; (mov r8, r8)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2101      	movs	r1, #1
 80070f6:	438a      	bics	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]
 80070fa:	193b      	adds	r3, r7, r4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	f383 8810 	msr	PRIMASK, r3
}
 8007106:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2220      	movs	r2, #32
 800710c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800711a:	f3ef 8310 	mrs	r3, PRIMASK
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	2480      	movs	r4, #128	; 0x80
 8007124:	193a      	adds	r2, r7, r4
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	2301      	movs	r3, #1
 800712a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800712c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712e:	f383 8810 	msr	PRIMASK, r3
}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2110      	movs	r1, #16
 8007140:	438a      	bics	r2, r1
 8007142:	601a      	str	r2, [r3, #0]
 8007144:	193b      	adds	r3, r7, r4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714c:	f383 8810 	msr	PRIMASK, r3
}
 8007150:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007152:	183b      	adds	r3, r7, r0
 8007154:	881a      	ldrh	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	0011      	movs	r1, r2
 800715a:	0018      	movs	r0, r3
 800715c:	f000 f860 	bl	8007220 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007160:	e044      	b.n	80071ec <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007162:	23a4      	movs	r3, #164	; 0xa4
 8007164:	18fb      	adds	r3, r7, r3
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	2380      	movs	r3, #128	; 0x80
 800716a:	035b      	lsls	r3, r3, #13
 800716c:	4013      	ands	r3, r2
 800716e:	d010      	beq.n	8007192 <HAL_UART_IRQHandler+0x546>
 8007170:	239c      	movs	r3, #156	; 0x9c
 8007172:	18fb      	adds	r3, r7, r3
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	2380      	movs	r3, #128	; 0x80
 8007178:	03db      	lsls	r3, r3, #15
 800717a:	4013      	ands	r3, r2
 800717c:	d009      	beq.n	8007192 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2280      	movs	r2, #128	; 0x80
 8007184:	0352      	lsls	r2, r2, #13
 8007186:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	0018      	movs	r0, r3
 800718c:	f000 fd3c 	bl	8007c08 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007190:	e02f      	b.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007192:	23a4      	movs	r3, #164	; 0xa4
 8007194:	18fb      	adds	r3, r7, r3
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2280      	movs	r2, #128	; 0x80
 800719a:	4013      	ands	r3, r2
 800719c:	d00f      	beq.n	80071be <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800719e:	23a0      	movs	r3, #160	; 0xa0
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2280      	movs	r2, #128	; 0x80
 80071a6:	4013      	ands	r3, r2
 80071a8:	d009      	beq.n	80071be <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01e      	beq.n	80071f0 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	0010      	movs	r0, r2
 80071ba:	4798      	blx	r3
    }
    return;
 80071bc:	e018      	b.n	80071f0 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071be:	23a4      	movs	r3, #164	; 0xa4
 80071c0:	18fb      	adds	r3, r7, r3
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2240      	movs	r2, #64	; 0x40
 80071c6:	4013      	ands	r3, r2
 80071c8:	d013      	beq.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
 80071ca:	23a0      	movs	r3, #160	; 0xa0
 80071cc:	18fb      	adds	r3, r7, r3
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2240      	movs	r2, #64	; 0x40
 80071d2:	4013      	ands	r3, r2
 80071d4:	d00d      	beq.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	0018      	movs	r0, r3
 80071da:	f000 fcea 	bl	8007bb2 <UART_EndTransmit_IT>
    return;
 80071de:	e008      	b.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
      return;
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	e006      	b.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
    return;
 80071e4:	46c0      	nop			; (mov r8, r8)
 80071e6:	e004      	b.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
      return;
 80071e8:	46c0      	nop			; (mov r8, r8)
 80071ea:	e002      	b.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
      return;
 80071ec:	46c0      	nop			; (mov r8, r8)
 80071ee:	e000      	b.n	80071f2 <HAL_UART_IRQHandler+0x5a6>
    return;
 80071f0:	46c0      	nop			; (mov r8, r8)
  }

}
 80071f2:	46bd      	mov	sp, r7
 80071f4:	b02b      	add	sp, #172	; 0xac
 80071f6:	bd90      	pop	{r4, r7, pc}
 80071f8:	fffffeff 	.word	0xfffffeff
 80071fc:	fffffedf 	.word	0xfffffedf

08007200 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007208:	46c0      	nop			; (mov r8, r8)
 800720a:	46bd      	mov	sp, r7
 800720c:	b002      	add	sp, #8
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007218:	46c0      	nop			; (mov r8, r8)
 800721a:	46bd      	mov	sp, r7
 800721c:	b002      	add	sp, #8
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	000a      	movs	r2, r1
 800722a:	1cbb      	adds	r3, r7, #2
 800722c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800722e:	46c0      	nop			; (mov r8, r8)
 8007230:	46bd      	mov	sp, r7
 8007232:	b002      	add	sp, #8
 8007234:	bd80      	pop	{r7, pc}
	...

08007238 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007238:	b5b0      	push	{r4, r5, r7, lr}
 800723a:	b08e      	sub	sp, #56	; 0x38
 800723c:	af00      	add	r7, sp, #0
 800723e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007240:	231a      	movs	r3, #26
 8007242:	2218      	movs	r2, #24
 8007244:	189b      	adds	r3, r3, r2
 8007246:	19db      	adds	r3, r3, r7
 8007248:	2200      	movs	r2, #0
 800724a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	689a      	ldr	r2, [r3, #8]
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	431a      	orrs	r2, r3
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	695b      	ldr	r3, [r3, #20]
 800725a:	431a      	orrs	r2, r3
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	4313      	orrs	r3, r2
 8007262:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4ac6      	ldr	r2, [pc, #792]	; (8007584 <UART_SetConfig+0x34c>)
 800726c:	4013      	ands	r3, r2
 800726e:	0019      	movs	r1, r3
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007276:	430a      	orrs	r2, r1
 8007278:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	4ac1      	ldr	r2, [pc, #772]	; (8007588 <UART_SetConfig+0x350>)
 8007282:	4013      	ands	r3, r2
 8007284:	0019      	movs	r1, r3
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4abb      	ldr	r2, [pc, #748]	; (800758c <UART_SetConfig+0x354>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d004      	beq.n	80072ac <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a8:	4313      	orrs	r3, r2
 80072aa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	4ab7      	ldr	r2, [pc, #732]	; (8007590 <UART_SetConfig+0x358>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	0019      	movs	r1, r3
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072be:	430a      	orrs	r2, r1
 80072c0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4ab3      	ldr	r2, [pc, #716]	; (8007594 <UART_SetConfig+0x35c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d131      	bne.n	8007330 <UART_SetConfig+0xf8>
 80072cc:	4bb2      	ldr	r3, [pc, #712]	; (8007598 <UART_SetConfig+0x360>)
 80072ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072d0:	2203      	movs	r2, #3
 80072d2:	4013      	ands	r3, r2
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d01d      	beq.n	8007314 <UART_SetConfig+0xdc>
 80072d8:	d823      	bhi.n	8007322 <UART_SetConfig+0xea>
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d00c      	beq.n	80072f8 <UART_SetConfig+0xc0>
 80072de:	d820      	bhi.n	8007322 <UART_SetConfig+0xea>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d002      	beq.n	80072ea <UART_SetConfig+0xb2>
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d00e      	beq.n	8007306 <UART_SetConfig+0xce>
 80072e8:	e01b      	b.n	8007322 <UART_SetConfig+0xea>
 80072ea:	231b      	movs	r3, #27
 80072ec:	2218      	movs	r2, #24
 80072ee:	189b      	adds	r3, r3, r2
 80072f0:	19db      	adds	r3, r3, r7
 80072f2:	2201      	movs	r2, #1
 80072f4:	701a      	strb	r2, [r3, #0]
 80072f6:	e09c      	b.n	8007432 <UART_SetConfig+0x1fa>
 80072f8:	231b      	movs	r3, #27
 80072fa:	2218      	movs	r2, #24
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	19db      	adds	r3, r3, r7
 8007300:	2202      	movs	r2, #2
 8007302:	701a      	strb	r2, [r3, #0]
 8007304:	e095      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007306:	231b      	movs	r3, #27
 8007308:	2218      	movs	r2, #24
 800730a:	189b      	adds	r3, r3, r2
 800730c:	19db      	adds	r3, r3, r7
 800730e:	2204      	movs	r2, #4
 8007310:	701a      	strb	r2, [r3, #0]
 8007312:	e08e      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007314:	231b      	movs	r3, #27
 8007316:	2218      	movs	r2, #24
 8007318:	189b      	adds	r3, r3, r2
 800731a:	19db      	adds	r3, r3, r7
 800731c:	2208      	movs	r2, #8
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e087      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007322:	231b      	movs	r3, #27
 8007324:	2218      	movs	r2, #24
 8007326:	189b      	adds	r3, r3, r2
 8007328:	19db      	adds	r3, r3, r7
 800732a:	2210      	movs	r2, #16
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e080      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a99      	ldr	r2, [pc, #612]	; (800759c <UART_SetConfig+0x364>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d131      	bne.n	800739e <UART_SetConfig+0x166>
 800733a:	4b97      	ldr	r3, [pc, #604]	; (8007598 <UART_SetConfig+0x360>)
 800733c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800733e:	220c      	movs	r2, #12
 8007340:	4013      	ands	r3, r2
 8007342:	2b0c      	cmp	r3, #12
 8007344:	d01d      	beq.n	8007382 <UART_SetConfig+0x14a>
 8007346:	d823      	bhi.n	8007390 <UART_SetConfig+0x158>
 8007348:	2b08      	cmp	r3, #8
 800734a:	d00c      	beq.n	8007366 <UART_SetConfig+0x12e>
 800734c:	d820      	bhi.n	8007390 <UART_SetConfig+0x158>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <UART_SetConfig+0x120>
 8007352:	2b04      	cmp	r3, #4
 8007354:	d00e      	beq.n	8007374 <UART_SetConfig+0x13c>
 8007356:	e01b      	b.n	8007390 <UART_SetConfig+0x158>
 8007358:	231b      	movs	r3, #27
 800735a:	2218      	movs	r2, #24
 800735c:	189b      	adds	r3, r3, r2
 800735e:	19db      	adds	r3, r3, r7
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
 8007364:	e065      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007366:	231b      	movs	r3, #27
 8007368:	2218      	movs	r2, #24
 800736a:	189b      	adds	r3, r3, r2
 800736c:	19db      	adds	r3, r3, r7
 800736e:	2202      	movs	r2, #2
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	e05e      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007374:	231b      	movs	r3, #27
 8007376:	2218      	movs	r2, #24
 8007378:	189b      	adds	r3, r3, r2
 800737a:	19db      	adds	r3, r3, r7
 800737c:	2204      	movs	r2, #4
 800737e:	701a      	strb	r2, [r3, #0]
 8007380:	e057      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007382:	231b      	movs	r3, #27
 8007384:	2218      	movs	r2, #24
 8007386:	189b      	adds	r3, r3, r2
 8007388:	19db      	adds	r3, r3, r7
 800738a:	2208      	movs	r2, #8
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	e050      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007390:	231b      	movs	r3, #27
 8007392:	2218      	movs	r2, #24
 8007394:	189b      	adds	r3, r3, r2
 8007396:	19db      	adds	r3, r3, r7
 8007398:	2210      	movs	r2, #16
 800739a:	701a      	strb	r2, [r3, #0]
 800739c:	e049      	b.n	8007432 <UART_SetConfig+0x1fa>
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a7a      	ldr	r2, [pc, #488]	; (800758c <UART_SetConfig+0x354>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d13e      	bne.n	8007426 <UART_SetConfig+0x1ee>
 80073a8:	4b7b      	ldr	r3, [pc, #492]	; (8007598 <UART_SetConfig+0x360>)
 80073aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073ac:	23c0      	movs	r3, #192	; 0xc0
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	4013      	ands	r3, r2
 80073b2:	22c0      	movs	r2, #192	; 0xc0
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d027      	beq.n	800740a <UART_SetConfig+0x1d2>
 80073ba:	22c0      	movs	r2, #192	; 0xc0
 80073bc:	0112      	lsls	r2, r2, #4
 80073be:	4293      	cmp	r3, r2
 80073c0:	d82a      	bhi.n	8007418 <UART_SetConfig+0x1e0>
 80073c2:	2280      	movs	r2, #128	; 0x80
 80073c4:	0112      	lsls	r2, r2, #4
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d011      	beq.n	80073ee <UART_SetConfig+0x1b6>
 80073ca:	2280      	movs	r2, #128	; 0x80
 80073cc:	0112      	lsls	r2, r2, #4
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d822      	bhi.n	8007418 <UART_SetConfig+0x1e0>
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <UART_SetConfig+0x1a8>
 80073d6:	2280      	movs	r2, #128	; 0x80
 80073d8:	00d2      	lsls	r2, r2, #3
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00e      	beq.n	80073fc <UART_SetConfig+0x1c4>
 80073de:	e01b      	b.n	8007418 <UART_SetConfig+0x1e0>
 80073e0:	231b      	movs	r3, #27
 80073e2:	2218      	movs	r2, #24
 80073e4:	189b      	adds	r3, r3, r2
 80073e6:	19db      	adds	r3, r3, r7
 80073e8:	2200      	movs	r2, #0
 80073ea:	701a      	strb	r2, [r3, #0]
 80073ec:	e021      	b.n	8007432 <UART_SetConfig+0x1fa>
 80073ee:	231b      	movs	r3, #27
 80073f0:	2218      	movs	r2, #24
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	19db      	adds	r3, r3, r7
 80073f6:	2202      	movs	r2, #2
 80073f8:	701a      	strb	r2, [r3, #0]
 80073fa:	e01a      	b.n	8007432 <UART_SetConfig+0x1fa>
 80073fc:	231b      	movs	r3, #27
 80073fe:	2218      	movs	r2, #24
 8007400:	189b      	adds	r3, r3, r2
 8007402:	19db      	adds	r3, r3, r7
 8007404:	2204      	movs	r2, #4
 8007406:	701a      	strb	r2, [r3, #0]
 8007408:	e013      	b.n	8007432 <UART_SetConfig+0x1fa>
 800740a:	231b      	movs	r3, #27
 800740c:	2218      	movs	r2, #24
 800740e:	189b      	adds	r3, r3, r2
 8007410:	19db      	adds	r3, r3, r7
 8007412:	2208      	movs	r2, #8
 8007414:	701a      	strb	r2, [r3, #0]
 8007416:	e00c      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007418:	231b      	movs	r3, #27
 800741a:	2218      	movs	r2, #24
 800741c:	189b      	adds	r3, r3, r2
 800741e:	19db      	adds	r3, r3, r7
 8007420:	2210      	movs	r2, #16
 8007422:	701a      	strb	r2, [r3, #0]
 8007424:	e005      	b.n	8007432 <UART_SetConfig+0x1fa>
 8007426:	231b      	movs	r3, #27
 8007428:	2218      	movs	r2, #24
 800742a:	189b      	adds	r3, r3, r2
 800742c:	19db      	adds	r3, r3, r7
 800742e:	2210      	movs	r2, #16
 8007430:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a55      	ldr	r2, [pc, #340]	; (800758c <UART_SetConfig+0x354>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d000      	beq.n	800743e <UART_SetConfig+0x206>
 800743c:	e084      	b.n	8007548 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800743e:	231b      	movs	r3, #27
 8007440:	2218      	movs	r2, #24
 8007442:	189b      	adds	r3, r3, r2
 8007444:	19db      	adds	r3, r3, r7
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	2b08      	cmp	r3, #8
 800744a:	d01d      	beq.n	8007488 <UART_SetConfig+0x250>
 800744c:	dc20      	bgt.n	8007490 <UART_SetConfig+0x258>
 800744e:	2b04      	cmp	r3, #4
 8007450:	d015      	beq.n	800747e <UART_SetConfig+0x246>
 8007452:	dc1d      	bgt.n	8007490 <UART_SetConfig+0x258>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <UART_SetConfig+0x226>
 8007458:	2b02      	cmp	r3, #2
 800745a:	d005      	beq.n	8007468 <UART_SetConfig+0x230>
 800745c:	e018      	b.n	8007490 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800745e:	f7fe fa8f 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8007462:	0003      	movs	r3, r0
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007466:	e01c      	b.n	80074a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007468:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <UART_SetConfig+0x360>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2210      	movs	r2, #16
 800746e:	4013      	ands	r3, r2
 8007470:	d002      	beq.n	8007478 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007472:	4b4b      	ldr	r3, [pc, #300]	; (80075a0 <UART_SetConfig+0x368>)
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007476:	e014      	b.n	80074a2 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8007478:	4b4a      	ldr	r3, [pc, #296]	; (80075a4 <UART_SetConfig+0x36c>)
 800747a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800747c:	e011      	b.n	80074a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747e:	f7fe f9cf 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 8007482:	0003      	movs	r3, r0
 8007484:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007486:	e00c      	b.n	80074a2 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800748e:	e008      	b.n	80074a2 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007494:	231a      	movs	r3, #26
 8007496:	2218      	movs	r2, #24
 8007498:	189b      	adds	r3, r3, r2
 800749a:	19db      	adds	r3, r3, r7
 800749c:	2201      	movs	r2, #1
 800749e:	701a      	strb	r2, [r3, #0]
        break;
 80074a0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80074a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d100      	bne.n	80074aa <UART_SetConfig+0x272>
 80074a8:	e133      	b.n	8007712 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	685a      	ldr	r2, [r3, #4]
 80074ae:	0013      	movs	r3, r2
 80074b0:	005b      	lsls	r3, r3, #1
 80074b2:	189b      	adds	r3, r3, r2
 80074b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d305      	bcc.n	80074c6 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80074c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d906      	bls.n	80074d4 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80074c6:	231a      	movs	r3, #26
 80074c8:	2218      	movs	r2, #24
 80074ca:	189b      	adds	r3, r3, r2
 80074cc:	19db      	adds	r3, r3, r7
 80074ce:	2201      	movs	r2, #1
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e11e      	b.n	8007712 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80074d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d6:	613b      	str	r3, [r7, #16]
 80074d8:	2300      	movs	r3, #0
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	6939      	ldr	r1, [r7, #16]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	000b      	movs	r3, r1
 80074e2:	0e1b      	lsrs	r3, r3, #24
 80074e4:	0010      	movs	r0, r2
 80074e6:	0205      	lsls	r5, r0, #8
 80074e8:	431d      	orrs	r5, r3
 80074ea:	000b      	movs	r3, r1
 80074ec:	021c      	lsls	r4, r3, #8
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	085b      	lsrs	r3, r3, #1
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
 80074fa:	68b8      	ldr	r0, [r7, #8]
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	1900      	adds	r0, r0, r4
 8007500:	4169      	adcs	r1, r5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	603b      	str	r3, [r7, #0]
 8007508:	2300      	movs	r3, #0
 800750a:	607b      	str	r3, [r7, #4]
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f7f8 fe90 	bl	8000234 <__aeabi_uldivmod>
 8007514:	0002      	movs	r2, r0
 8007516:	000b      	movs	r3, r1
 8007518:	0013      	movs	r3, r2
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800751c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800751e:	23c0      	movs	r3, #192	; 0xc0
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	429a      	cmp	r2, r3
 8007524:	d309      	bcc.n	800753a <UART_SetConfig+0x302>
 8007526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007528:	2380      	movs	r3, #128	; 0x80
 800752a:	035b      	lsls	r3, r3, #13
 800752c:	429a      	cmp	r2, r3
 800752e:	d204      	bcs.n	800753a <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007536:	60da      	str	r2, [r3, #12]
 8007538:	e0eb      	b.n	8007712 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800753a:	231a      	movs	r3, #26
 800753c:	2218      	movs	r2, #24
 800753e:	189b      	adds	r3, r3, r2
 8007540:	19db      	adds	r3, r3, r7
 8007542:	2201      	movs	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
 8007546:	e0e4      	b.n	8007712 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	2380      	movs	r3, #128	; 0x80
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	429a      	cmp	r2, r3
 8007552:	d000      	beq.n	8007556 <UART_SetConfig+0x31e>
 8007554:	e086      	b.n	8007664 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8007556:	231b      	movs	r3, #27
 8007558:	2218      	movs	r2, #24
 800755a:	189b      	adds	r3, r3, r2
 800755c:	19db      	adds	r3, r3, r7
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	2b08      	cmp	r3, #8
 8007562:	d837      	bhi.n	80075d4 <UART_SetConfig+0x39c>
 8007564:	009a      	lsls	r2, r3, #2
 8007566:	4b10      	ldr	r3, [pc, #64]	; (80075a8 <UART_SetConfig+0x370>)
 8007568:	18d3      	adds	r3, r2, r3
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800756e:	f7fe fa07 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8007572:	0003      	movs	r3, r0
 8007574:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007576:	e036      	b.n	80075e6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fe fa18 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 800757c:	0003      	movs	r3, r0
 800757e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007580:	e031      	b.n	80075e6 <UART_SetConfig+0x3ae>
 8007582:	46c0      	nop			; (mov r8, r8)
 8007584:	efff69f3 	.word	0xefff69f3
 8007588:	ffffcfff 	.word	0xffffcfff
 800758c:	40004800 	.word	0x40004800
 8007590:	fffff4ff 	.word	0xfffff4ff
 8007594:	40013800 	.word	0x40013800
 8007598:	40021000 	.word	0x40021000
 800759c:	40004400 	.word	0x40004400
 80075a0:	003d0900 	.word	0x003d0900
 80075a4:	00f42400 	.word	0x00f42400
 80075a8:	0800880c 	.word	0x0800880c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075ac:	4b60      	ldr	r3, [pc, #384]	; (8007730 <UART_SetConfig+0x4f8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2210      	movs	r2, #16
 80075b2:	4013      	ands	r3, r2
 80075b4:	d002      	beq.n	80075bc <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80075b6:	4b5f      	ldr	r3, [pc, #380]	; (8007734 <UART_SetConfig+0x4fc>)
 80075b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80075ba:	e014      	b.n	80075e6 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80075bc:	4b5e      	ldr	r3, [pc, #376]	; (8007738 <UART_SetConfig+0x500>)
 80075be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075c0:	e011      	b.n	80075e6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80075c2:	f7fe f92d 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80075c6:	0003      	movs	r3, r0
 80075c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075ca:	e00c      	b.n	80075e6 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80075cc:	2380      	movs	r3, #128	; 0x80
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80075d2:	e008      	b.n	80075e6 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80075d8:	231a      	movs	r3, #26
 80075da:	2218      	movs	r2, #24
 80075dc:	189b      	adds	r3, r3, r2
 80075de:	19db      	adds	r3, r3, r7
 80075e0:	2201      	movs	r2, #1
 80075e2:	701a      	strb	r2, [r3, #0]
        break;
 80075e4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d100      	bne.n	80075ee <UART_SetConfig+0x3b6>
 80075ec:	e091      	b.n	8007712 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f0:	005a      	lsls	r2, r3, #1
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	085b      	lsrs	r3, r3, #1
 80075f8:	18d2      	adds	r2, r2, r3
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	0019      	movs	r1, r3
 8007600:	0010      	movs	r0, r2
 8007602:	f7f8 fd8b 	bl	800011c <__udivsi3>
 8007606:	0003      	movs	r3, r0
 8007608:	b29b      	uxth	r3, r3
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	2b0f      	cmp	r3, #15
 8007610:	d921      	bls.n	8007656 <UART_SetConfig+0x41e>
 8007612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007614:	2380      	movs	r3, #128	; 0x80
 8007616:	025b      	lsls	r3, r3, #9
 8007618:	429a      	cmp	r2, r3
 800761a:	d21c      	bcs.n	8007656 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	b29a      	uxth	r2, r3
 8007620:	200e      	movs	r0, #14
 8007622:	2418      	movs	r4, #24
 8007624:	1903      	adds	r3, r0, r4
 8007626:	19db      	adds	r3, r3, r7
 8007628:	210f      	movs	r1, #15
 800762a:	438a      	bics	r2, r1
 800762c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	085b      	lsrs	r3, r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	2207      	movs	r2, #7
 8007636:	4013      	ands	r3, r2
 8007638:	b299      	uxth	r1, r3
 800763a:	1903      	adds	r3, r0, r4
 800763c:	19db      	adds	r3, r3, r7
 800763e:	1902      	adds	r2, r0, r4
 8007640:	19d2      	adds	r2, r2, r7
 8007642:	8812      	ldrh	r2, [r2, #0]
 8007644:	430a      	orrs	r2, r1
 8007646:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	1902      	adds	r2, r0, r4
 800764e:	19d2      	adds	r2, r2, r7
 8007650:	8812      	ldrh	r2, [r2, #0]
 8007652:	60da      	str	r2, [r3, #12]
 8007654:	e05d      	b.n	8007712 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8007656:	231a      	movs	r3, #26
 8007658:	2218      	movs	r2, #24
 800765a:	189b      	adds	r3, r3, r2
 800765c:	19db      	adds	r3, r3, r7
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	e056      	b.n	8007712 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007664:	231b      	movs	r3, #27
 8007666:	2218      	movs	r2, #24
 8007668:	189b      	adds	r3, r3, r2
 800766a:	19db      	adds	r3, r3, r7
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2b08      	cmp	r3, #8
 8007670:	d822      	bhi.n	80076b8 <UART_SetConfig+0x480>
 8007672:	009a      	lsls	r2, r3, #2
 8007674:	4b31      	ldr	r3, [pc, #196]	; (800773c <UART_SetConfig+0x504>)
 8007676:	18d3      	adds	r3, r2, r3
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800767c:	f7fe f980 	bl	8005980 <HAL_RCC_GetPCLK1Freq>
 8007680:	0003      	movs	r3, r0
 8007682:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007684:	e021      	b.n	80076ca <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007686:	f7fe f991 	bl	80059ac <HAL_RCC_GetPCLK2Freq>
 800768a:	0003      	movs	r3, r0
 800768c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800768e:	e01c      	b.n	80076ca <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007690:	4b27      	ldr	r3, [pc, #156]	; (8007730 <UART_SetConfig+0x4f8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2210      	movs	r2, #16
 8007696:	4013      	ands	r3, r2
 8007698:	d002      	beq.n	80076a0 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800769a:	4b26      	ldr	r3, [pc, #152]	; (8007734 <UART_SetConfig+0x4fc>)
 800769c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800769e:	e014      	b.n	80076ca <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 80076a0:	4b25      	ldr	r3, [pc, #148]	; (8007738 <UART_SetConfig+0x500>)
 80076a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076a4:	e011      	b.n	80076ca <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a6:	f7fe f8bb 	bl	8005820 <HAL_RCC_GetSysClockFreq>
 80076aa:	0003      	movs	r3, r0
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076ae:	e00c      	b.n	80076ca <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b0:	2380      	movs	r3, #128	; 0x80
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80076b6:	e008      	b.n	80076ca <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80076bc:	231a      	movs	r3, #26
 80076be:	2218      	movs	r2, #24
 80076c0:	189b      	adds	r3, r3, r2
 80076c2:	19db      	adds	r3, r3, r7
 80076c4:	2201      	movs	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]
        break;
 80076c8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80076ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d020      	beq.n	8007712 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	085a      	lsrs	r2, r3, #1
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d8:	18d2      	adds	r2, r2, r3
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	0019      	movs	r1, r3
 80076e0:	0010      	movs	r0, r2
 80076e2:	f7f8 fd1b 	bl	800011c <__udivsi3>
 80076e6:	0003      	movs	r3, r0
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	2b0f      	cmp	r3, #15
 80076f0:	d909      	bls.n	8007706 <UART_SetConfig+0x4ce>
 80076f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076f4:	2380      	movs	r3, #128	; 0x80
 80076f6:	025b      	lsls	r3, r3, #9
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d204      	bcs.n	8007706 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007702:	60da      	str	r2, [r3, #12]
 8007704:	e005      	b.n	8007712 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8007706:	231a      	movs	r3, #26
 8007708:	2218      	movs	r2, #24
 800770a:	189b      	adds	r3, r3, r2
 800770c:	19db      	adds	r3, r3, r7
 800770e:	2201      	movs	r2, #1
 8007710:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	2200      	movs	r2, #0
 8007716:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2200      	movs	r2, #0
 800771c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800771e:	231a      	movs	r3, #26
 8007720:	2218      	movs	r2, #24
 8007722:	189b      	adds	r3, r3, r2
 8007724:	19db      	adds	r3, r3, r7
 8007726:	781b      	ldrb	r3, [r3, #0]
}
 8007728:	0018      	movs	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	b00e      	add	sp, #56	; 0x38
 800772e:	bdb0      	pop	{r4, r5, r7, pc}
 8007730:	40021000 	.word	0x40021000
 8007734:	003d0900 	.word	0x003d0900
 8007738:	00f42400 	.word	0x00f42400
 800773c:	08008830 	.word	0x08008830

08007740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774c:	2201      	movs	r2, #1
 800774e:	4013      	ands	r3, r2
 8007750:	d00b      	beq.n	800776a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	4a4a      	ldr	r2, [pc, #296]	; (8007884 <UART_AdvFeatureConfig+0x144>)
 800775a:	4013      	ands	r3, r2
 800775c:	0019      	movs	r1, r3
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776e:	2202      	movs	r2, #2
 8007770:	4013      	ands	r3, r2
 8007772:	d00b      	beq.n	800778c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	4a43      	ldr	r2, [pc, #268]	; (8007888 <UART_AdvFeatureConfig+0x148>)
 800777c:	4013      	ands	r3, r2
 800777e:	0019      	movs	r1, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2204      	movs	r2, #4
 8007792:	4013      	ands	r3, r2
 8007794:	d00b      	beq.n	80077ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a3b      	ldr	r2, [pc, #236]	; (800788c <UART_AdvFeatureConfig+0x14c>)
 800779e:	4013      	ands	r3, r2
 80077a0:	0019      	movs	r1, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b2:	2208      	movs	r2, #8
 80077b4:	4013      	ands	r3, r2
 80077b6:	d00b      	beq.n	80077d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	4a34      	ldr	r2, [pc, #208]	; (8007890 <UART_AdvFeatureConfig+0x150>)
 80077c0:	4013      	ands	r3, r2
 80077c2:	0019      	movs	r1, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d4:	2210      	movs	r2, #16
 80077d6:	4013      	ands	r3, r2
 80077d8:	d00b      	beq.n	80077f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	4a2c      	ldr	r2, [pc, #176]	; (8007894 <UART_AdvFeatureConfig+0x154>)
 80077e2:	4013      	ands	r3, r2
 80077e4:	0019      	movs	r1, r3
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f6:	2220      	movs	r2, #32
 80077f8:	4013      	ands	r3, r2
 80077fa:	d00b      	beq.n	8007814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	4a25      	ldr	r2, [pc, #148]	; (8007898 <UART_AdvFeatureConfig+0x158>)
 8007804:	4013      	ands	r3, r2
 8007806:	0019      	movs	r1, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	430a      	orrs	r2, r1
 8007812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	2240      	movs	r2, #64	; 0x40
 800781a:	4013      	ands	r3, r2
 800781c:	d01d      	beq.n	800785a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	4a1d      	ldr	r2, [pc, #116]	; (800789c <UART_AdvFeatureConfig+0x15c>)
 8007826:	4013      	ands	r3, r2
 8007828:	0019      	movs	r1, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800783a:	2380      	movs	r3, #128	; 0x80
 800783c:	035b      	lsls	r3, r3, #13
 800783e:	429a      	cmp	r2, r3
 8007840:	d10b      	bne.n	800785a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <UART_AdvFeatureConfig+0x160>)
 800784a:	4013      	ands	r3, r2
 800784c:	0019      	movs	r1, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2280      	movs	r2, #128	; 0x80
 8007860:	4013      	ands	r3, r2
 8007862:	d00b      	beq.n	800787c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	4a0e      	ldr	r2, [pc, #56]	; (80078a4 <UART_AdvFeatureConfig+0x164>)
 800786c:	4013      	ands	r3, r2
 800786e:	0019      	movs	r1, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]
  }
}
 800787c:	46c0      	nop			; (mov r8, r8)
 800787e:	46bd      	mov	sp, r7
 8007880:	b002      	add	sp, #8
 8007882:	bd80      	pop	{r7, pc}
 8007884:	fffdffff 	.word	0xfffdffff
 8007888:	fffeffff 	.word	0xfffeffff
 800788c:	fffbffff 	.word	0xfffbffff
 8007890:	ffff7fff 	.word	0xffff7fff
 8007894:	ffffefff 	.word	0xffffefff
 8007898:	ffffdfff 	.word	0xffffdfff
 800789c:	ffefffff 	.word	0xffefffff
 80078a0:	ff9fffff 	.word	0xff9fffff
 80078a4:	fff7ffff 	.word	0xfff7ffff

080078a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	2100      	movs	r1, #0
 80078b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078b8:	f7fc fa6a 	bl	8003d90 <HAL_GetTick>
 80078bc:	0003      	movs	r3, r0
 80078be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2208      	movs	r2, #8
 80078c8:	4013      	ands	r3, r2
 80078ca:	2b08      	cmp	r3, #8
 80078cc:	d10c      	bne.n	80078e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2280      	movs	r2, #128	; 0x80
 80078d2:	0391      	lsls	r1, r2, #14
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	4a17      	ldr	r2, [pc, #92]	; (8007934 <UART_CheckIdleState+0x8c>)
 80078d8:	9200      	str	r2, [sp, #0]
 80078da:	2200      	movs	r2, #0
 80078dc:	f000 f82c 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 80078e0:	1e03      	subs	r3, r0, #0
 80078e2:	d001      	beq.n	80078e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e021      	b.n	800792c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2204      	movs	r2, #4
 80078f0:	4013      	ands	r3, r2
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d10c      	bne.n	8007910 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2280      	movs	r2, #128	; 0x80
 80078fa:	03d1      	lsls	r1, r2, #15
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	4a0d      	ldr	r2, [pc, #52]	; (8007934 <UART_CheckIdleState+0x8c>)
 8007900:	9200      	str	r2, [sp, #0]
 8007902:	2200      	movs	r2, #0
 8007904:	f000 f818 	bl	8007938 <UART_WaitOnFlagUntilTimeout>
 8007908:	1e03      	subs	r3, r0, #0
 800790a:	d001      	beq.n	8007910 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e00d      	b.n	800792c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2274      	movs	r2, #116	; 0x74
 8007926:	2100      	movs	r1, #0
 8007928:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	0018      	movs	r0, r3
 800792e:	46bd      	mov	sp, r7
 8007930:	b004      	add	sp, #16
 8007932:	bd80      	pop	{r7, pc}
 8007934:	01ffffff 	.word	0x01ffffff

08007938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b094      	sub	sp, #80	; 0x50
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	1dfb      	adds	r3, r7, #7
 8007946:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007948:	e0a3      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800794c:	3301      	adds	r3, #1
 800794e:	d100      	bne.n	8007952 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007950:	e09f      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007952:	f7fc fa1d 	bl	8003d90 <HAL_GetTick>
 8007956:	0002      	movs	r2, r0
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800795e:	429a      	cmp	r2, r3
 8007960:	d302      	bcc.n	8007968 <UART_WaitOnFlagUntilTimeout+0x30>
 8007962:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007964:	2b00      	cmp	r3, #0
 8007966:	d13d      	bne.n	80079e4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007968:	f3ef 8310 	mrs	r3, PRIMASK
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800796e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007970:	647b      	str	r3, [r7, #68]	; 0x44
 8007972:	2301      	movs	r3, #1
 8007974:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	f383 8810 	msr	PRIMASK, r3
}
 800797c:	46c0      	nop			; (mov r8, r8)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	494c      	ldr	r1, [pc, #304]	; (8007abc <UART_WaitOnFlagUntilTimeout+0x184>)
 800798a:	400a      	ands	r2, r1
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007990:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	f383 8810 	msr	PRIMASK, r3
}
 8007998:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800799a:	f3ef 8310 	mrs	r3, PRIMASK
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80079a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a2:	643b      	str	r3, [r7, #64]	; 0x40
 80079a4:	2301      	movs	r3, #1
 80079a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079aa:	f383 8810 	msr	PRIMASK, r3
}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689a      	ldr	r2, [r3, #8]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2101      	movs	r1, #1
 80079bc:	438a      	bics	r2, r1
 80079be:	609a      	str	r2, [r3, #8]
 80079c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c6:	f383 8810 	msr	PRIMASK, r3
}
 80079ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2220      	movs	r2, #32
 80079d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2274      	movs	r2, #116	; 0x74
 80079dc:	2100      	movs	r1, #0
 80079de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e067      	b.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2204      	movs	r2, #4
 80079ec:	4013      	ands	r3, r2
 80079ee:	d050      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	2380      	movs	r3, #128	; 0x80
 80079f8:	011b      	lsls	r3, r3, #4
 80079fa:	401a      	ands	r2, r3
 80079fc:	2380      	movs	r3, #128	; 0x80
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d146      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2280      	movs	r2, #128	; 0x80
 8007a0a:	0112      	lsls	r2, r2, #4
 8007a0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a12:	613b      	str	r3, [r7, #16]
  return(result);
 8007a14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a18:	2301      	movs	r3, #1
 8007a1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f383 8810 	msr	PRIMASK, r3
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4923      	ldr	r1, [pc, #140]	; (8007abc <UART_WaitOnFlagUntilTimeout+0x184>)
 8007a30:	400a      	ands	r2, r1
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	f383 8810 	msr	PRIMASK, r3
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a40:	f3ef 8310 	mrs	r3, PRIMASK
 8007a44:	61fb      	str	r3, [r7, #28]
  return(result);
 8007a46:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a4e:	6a3b      	ldr	r3, [r7, #32]
 8007a50:	f383 8810 	msr	PRIMASK, r3
}
 8007a54:	46c0      	nop			; (mov r8, r8)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	689a      	ldr	r2, [r3, #8]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2101      	movs	r1, #1
 8007a62:	438a      	bics	r2, r1
 8007a64:	609a      	str	r2, [r3, #8]
 8007a66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6c:	f383 8810 	msr	PRIMASK, r3
}
 8007a70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2220      	movs	r2, #32
 8007a76:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2280      	movs	r2, #128	; 0x80
 8007a82:	2120      	movs	r1, #32
 8007a84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2274      	movs	r2, #116	; 0x74
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e010      	b.n	8007ab4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	425a      	negs	r2, r3
 8007aa2:	4153      	adcs	r3, r2
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	001a      	movs	r2, r3
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d100      	bne.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007ab0:	e74b      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	b014      	add	sp, #80	; 0x50
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	fffffe5f 	.word	0xfffffe5f

08007ac0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b08e      	sub	sp, #56	; 0x38
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8007acc:	617b      	str	r3, [r7, #20]
  return(result);
 8007ace:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	f383 8810 	msr	PRIMASK, r3
}
 8007adc:	46c0      	nop			; (mov r8, r8)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4925      	ldr	r1, [pc, #148]	; (8007b80 <UART_EndRxTransfer+0xc0>)
 8007aea:	400a      	ands	r2, r1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	f383 8810 	msr	PRIMASK, r3
}
 8007af8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afa:	f3ef 8310 	mrs	r3, PRIMASK
 8007afe:	623b      	str	r3, [r7, #32]
  return(result);
 8007b00:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b02:	633b      	str	r3, [r7, #48]	; 0x30
 8007b04:	2301      	movs	r3, #1
 8007b06:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	f383 8810 	msr	PRIMASK, r3
}
 8007b0e:	46c0      	nop			; (mov r8, r8)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689a      	ldr	r2, [r3, #8]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	438a      	bics	r2, r1
 8007b1e:	609a      	str	r2, [r3, #8]
 8007b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	f383 8810 	msr	PRIMASK, r3
}
 8007b2a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d118      	bne.n	8007b66 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b34:	f3ef 8310 	mrs	r3, PRIMASK
 8007b38:	60bb      	str	r3, [r7, #8]
  return(result);
 8007b3a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b3e:	2301      	movs	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f383 8810 	msr	PRIMASK, r3
}
 8007b48:	46c0      	nop			; (mov r8, r8)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2110      	movs	r1, #16
 8007b56:	438a      	bics	r2, r1
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f383 8810 	msr	PRIMASK, r3
}
 8007b64:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2220      	movs	r2, #32
 8007b6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b78:	46c0      	nop			; (mov r8, r8)
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	b00e      	add	sp, #56	; 0x38
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	fffffedf 	.word	0xfffffedf

08007b84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	225a      	movs	r2, #90	; 0x5a
 8007b96:	2100      	movs	r1, #0
 8007b98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2252      	movs	r2, #82	; 0x52
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	0018      	movs	r0, r3
 8007ba6:	f7ff fb33 	bl	8007210 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b004      	add	sp, #16
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b086      	sub	sp, #24
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bba:	f3ef 8310 	mrs	r3, PRIMASK
 8007bbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bc0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bc2:	617b      	str	r3, [r7, #20]
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f383 8810 	msr	PRIMASK, r3
}
 8007bce:	46c0      	nop			; (mov r8, r8)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2140      	movs	r1, #64	; 0x40
 8007bdc:	438a      	bics	r2, r1
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f383 8810 	msr	PRIMASK, r3
}
 8007bea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2220      	movs	r2, #32
 8007bf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f7ff fb00 	bl	8007200 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c00:	46c0      	nop			; (mov r8, r8)
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b006      	add	sp, #24
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c10:	46c0      	nop			; (mov r8, r8)
 8007c12:	46bd      	mov	sp, r7
 8007c14:	b002      	add	sp, #8
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <__errno>:
 8007c18:	4b01      	ldr	r3, [pc, #4]	; (8007c20 <__errno+0x8>)
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	4770      	bx	lr
 8007c1e:	46c0      	nop			; (mov r8, r8)
 8007c20:	20000014 	.word	0x20000014

08007c24 <__libc_init_array>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	2600      	movs	r6, #0
 8007c28:	4d0c      	ldr	r5, [pc, #48]	; (8007c5c <__libc_init_array+0x38>)
 8007c2a:	4c0d      	ldr	r4, [pc, #52]	; (8007c60 <__libc_init_array+0x3c>)
 8007c2c:	1b64      	subs	r4, r4, r5
 8007c2e:	10a4      	asrs	r4, r4, #2
 8007c30:	42a6      	cmp	r6, r4
 8007c32:	d109      	bne.n	8007c48 <__libc_init_array+0x24>
 8007c34:	2600      	movs	r6, #0
 8007c36:	f000 fd33 	bl	80086a0 <_init>
 8007c3a:	4d0a      	ldr	r5, [pc, #40]	; (8007c64 <__libc_init_array+0x40>)
 8007c3c:	4c0a      	ldr	r4, [pc, #40]	; (8007c68 <__libc_init_array+0x44>)
 8007c3e:	1b64      	subs	r4, r4, r5
 8007c40:	10a4      	asrs	r4, r4, #2
 8007c42:	42a6      	cmp	r6, r4
 8007c44:	d105      	bne.n	8007c52 <__libc_init_array+0x2e>
 8007c46:	bd70      	pop	{r4, r5, r6, pc}
 8007c48:	00b3      	lsls	r3, r6, #2
 8007c4a:	58eb      	ldr	r3, [r5, r3]
 8007c4c:	4798      	blx	r3
 8007c4e:	3601      	adds	r6, #1
 8007c50:	e7ee      	b.n	8007c30 <__libc_init_array+0xc>
 8007c52:	00b3      	lsls	r3, r6, #2
 8007c54:	58eb      	ldr	r3, [r5, r3]
 8007c56:	4798      	blx	r3
 8007c58:	3601      	adds	r6, #1
 8007c5a:	e7f2      	b.n	8007c42 <__libc_init_array+0x1e>
 8007c5c:	08008890 	.word	0x08008890
 8007c60:	08008890 	.word	0x08008890
 8007c64:	08008890 	.word	0x08008890
 8007c68:	08008894 	.word	0x08008894

08007c6c <memset>:
 8007c6c:	0003      	movs	r3, r0
 8007c6e:	1882      	adds	r2, r0, r2
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d100      	bne.n	8007c76 <memset+0xa>
 8007c74:	4770      	bx	lr
 8007c76:	7019      	strb	r1, [r3, #0]
 8007c78:	3301      	adds	r3, #1
 8007c7a:	e7f9      	b.n	8007c70 <memset+0x4>

08007c7c <modf>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	000c      	movs	r4, r1
 8007c80:	0017      	movs	r7, r2
 8007c82:	0063      	lsls	r3, r4, #1
 8007c84:	4a2e      	ldr	r2, [pc, #184]	; (8007d40 <modf+0xc4>)
 8007c86:	0d5b      	lsrs	r3, r3, #21
 8007c88:	189a      	adds	r2, r3, r2
 8007c8a:	000e      	movs	r6, r1
 8007c8c:	0005      	movs	r5, r0
 8007c8e:	0001      	movs	r1, r0
 8007c90:	2a13      	cmp	r2, #19
 8007c92:	dc25      	bgt.n	8007ce0 <modf+0x64>
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	da07      	bge.n	8007ca8 <modf+0x2c>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	0fe6      	lsrs	r6, r4, #31
 8007c9c:	07f3      	lsls	r3, r6, #31
 8007c9e:	603a      	str	r2, [r7, #0]
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	0028      	movs	r0, r5
 8007ca4:	0021      	movs	r1, r4
 8007ca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ca8:	4826      	ldr	r0, [pc, #152]	; (8007d44 <modf+0xc8>)
 8007caa:	4110      	asrs	r0, r2
 8007cac:	0003      	movs	r3, r0
 8007cae:	4023      	ands	r3, r4
 8007cb0:	4319      	orrs	r1, r3
 8007cb2:	d109      	bne.n	8007cc8 <modf+0x4c>
 8007cb4:	002a      	movs	r2, r5
 8007cb6:	0023      	movs	r3, r4
 8007cb8:	603a      	str	r2, [r7, #0]
 8007cba:	607b      	str	r3, [r7, #4]
 8007cbc:	000a      	movs	r2, r1
 8007cbe:	0fe6      	lsrs	r6, r4, #31
 8007cc0:	07f3      	lsls	r3, r6, #31
 8007cc2:	0015      	movs	r5, r2
 8007cc4:	001c      	movs	r4, r3
 8007cc6:	e7ec      	b.n	8007ca2 <modf+0x26>
 8007cc8:	4386      	bics	r6, r0
 8007cca:	2200      	movs	r2, #0
 8007ccc:	0033      	movs	r3, r6
 8007cce:	0028      	movs	r0, r5
 8007cd0:	0021      	movs	r1, r4
 8007cd2:	603a      	str	r2, [r7, #0]
 8007cd4:	607b      	str	r3, [r7, #4]
 8007cd6:	f7f9 ffd7 	bl	8001c88 <__aeabi_dsub>
 8007cda:	0005      	movs	r5, r0
 8007cdc:	000c      	movs	r4, r1
 8007cde:	e7e0      	b.n	8007ca2 <modf+0x26>
 8007ce0:	2a33      	cmp	r2, #51	; 0x33
 8007ce2:	dd17      	ble.n	8007d14 <modf+0x98>
 8007ce4:	0002      	movs	r2, r0
 8007ce6:	0023      	movs	r3, r4
 8007ce8:	0021      	movs	r1, r4
 8007cea:	603a      	str	r2, [r7, #0]
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	f000 fb45 	bl	800837c <__fpclassifyd>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d10a      	bne.n	8007d0c <modf+0x90>
 8007cf6:	002a      	movs	r2, r5
 8007cf8:	0023      	movs	r3, r4
 8007cfa:	0028      	movs	r0, r5
 8007cfc:	0021      	movs	r1, r4
 8007cfe:	f7f9 fa1b 	bl	8001138 <__aeabi_dadd>
 8007d02:	0005      	movs	r5, r0
 8007d04:	000c      	movs	r4, r1
 8007d06:	0002      	movs	r2, r0
 8007d08:	000b      	movs	r3, r1
 8007d0a:	e7c8      	b.n	8007c9e <modf+0x22>
 8007d0c:	0fe6      	lsrs	r6, r4, #31
 8007d0e:	2200      	movs	r2, #0
 8007d10:	07f3      	lsls	r3, r6, #31
 8007d12:	e7d6      	b.n	8007cc2 <modf+0x46>
 8007d14:	2001      	movs	r0, #1
 8007d16:	4a0c      	ldr	r2, [pc, #48]	; (8007d48 <modf+0xcc>)
 8007d18:	4240      	negs	r0, r0
 8007d1a:	189b      	adds	r3, r3, r2
 8007d1c:	40d8      	lsrs	r0, r3
 8007d1e:	0003      	movs	r3, r0
 8007d20:	402b      	ands	r3, r5
 8007d22:	469c      	mov	ip, r3
 8007d24:	4228      	tst	r0, r5
 8007d26:	d107      	bne.n	8007d38 <modf+0xbc>
 8007d28:	002a      	movs	r2, r5
 8007d2a:	0023      	movs	r3, r4
 8007d2c:	0fe6      	lsrs	r6, r4, #31
 8007d2e:	603a      	str	r2, [r7, #0]
 8007d30:	607b      	str	r3, [r7, #4]
 8007d32:	4662      	mov	r2, ip
 8007d34:	07f3      	lsls	r3, r6, #31
 8007d36:	e7c4      	b.n	8007cc2 <modf+0x46>
 8007d38:	4381      	bics	r1, r0
 8007d3a:	0023      	movs	r3, r4
 8007d3c:	000a      	movs	r2, r1
 8007d3e:	e7c6      	b.n	8007cce <modf+0x52>
 8007d40:	fffffc01 	.word	0xfffffc01
 8007d44:	000fffff 	.word	0x000fffff
 8007d48:	fffffbed 	.word	0xfffffbed

08007d4c <sniprintf>:
 8007d4c:	b40c      	push	{r2, r3}
 8007d4e:	b530      	push	{r4, r5, lr}
 8007d50:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <sniprintf+0x64>)
 8007d52:	000c      	movs	r4, r1
 8007d54:	681d      	ldr	r5, [r3, #0]
 8007d56:	b09d      	sub	sp, #116	; 0x74
 8007d58:	2900      	cmp	r1, #0
 8007d5a:	da08      	bge.n	8007d6e <sniprintf+0x22>
 8007d5c:	238b      	movs	r3, #139	; 0x8b
 8007d5e:	2001      	movs	r0, #1
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	4240      	negs	r0, r0
 8007d64:	b01d      	add	sp, #116	; 0x74
 8007d66:	bc30      	pop	{r4, r5}
 8007d68:	bc08      	pop	{r3}
 8007d6a:	b002      	add	sp, #8
 8007d6c:	4718      	bx	r3
 8007d6e:	2382      	movs	r3, #130	; 0x82
 8007d70:	466a      	mov	r2, sp
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	8293      	strh	r3, [r2, #20]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9002      	str	r0, [sp, #8]
 8007d7a:	9006      	str	r0, [sp, #24]
 8007d7c:	4299      	cmp	r1, r3
 8007d7e:	d000      	beq.n	8007d82 <sniprintf+0x36>
 8007d80:	1e4b      	subs	r3, r1, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	2301      	movs	r3, #1
 8007d88:	466a      	mov	r2, sp
 8007d8a:	425b      	negs	r3, r3
 8007d8c:	82d3      	strh	r3, [r2, #22]
 8007d8e:	0028      	movs	r0, r5
 8007d90:	ab21      	add	r3, sp, #132	; 0x84
 8007d92:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007d94:	a902      	add	r1, sp, #8
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	f000 f86e 	bl	8007e78 <_svfiprintf_r>
 8007d9c:	1c43      	adds	r3, r0, #1
 8007d9e:	da01      	bge.n	8007da4 <sniprintf+0x58>
 8007da0:	238b      	movs	r3, #139	; 0x8b
 8007da2:	602b      	str	r3, [r5, #0]
 8007da4:	2c00      	cmp	r4, #0
 8007da6:	d0dd      	beq.n	8007d64 <sniprintf+0x18>
 8007da8:	2300      	movs	r3, #0
 8007daa:	9a02      	ldr	r2, [sp, #8]
 8007dac:	7013      	strb	r3, [r2, #0]
 8007dae:	e7d9      	b.n	8007d64 <sniprintf+0x18>
 8007db0:	20000014 	.word	0x20000014

08007db4 <__ssputs_r>:
 8007db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007db6:	688e      	ldr	r6, [r1, #8]
 8007db8:	b085      	sub	sp, #20
 8007dba:	0007      	movs	r7, r0
 8007dbc:	000c      	movs	r4, r1
 8007dbe:	9203      	str	r2, [sp, #12]
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	429e      	cmp	r6, r3
 8007dc4:	d83c      	bhi.n	8007e40 <__ssputs_r+0x8c>
 8007dc6:	2390      	movs	r3, #144	; 0x90
 8007dc8:	898a      	ldrh	r2, [r1, #12]
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	421a      	tst	r2, r3
 8007dce:	d034      	beq.n	8007e3a <__ssputs_r+0x86>
 8007dd0:	6909      	ldr	r1, [r1, #16]
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	6960      	ldr	r0, [r4, #20]
 8007dd6:	1a5b      	subs	r3, r3, r1
 8007dd8:	9302      	str	r3, [sp, #8]
 8007dda:	2303      	movs	r3, #3
 8007ddc:	4343      	muls	r3, r0
 8007dde:	0fdd      	lsrs	r5, r3, #31
 8007de0:	18ed      	adds	r5, r5, r3
 8007de2:	9b01      	ldr	r3, [sp, #4]
 8007de4:	9802      	ldr	r0, [sp, #8]
 8007de6:	3301      	adds	r3, #1
 8007de8:	181b      	adds	r3, r3, r0
 8007dea:	106d      	asrs	r5, r5, #1
 8007dec:	42ab      	cmp	r3, r5
 8007dee:	d900      	bls.n	8007df2 <__ssputs_r+0x3e>
 8007df0:	001d      	movs	r5, r3
 8007df2:	0553      	lsls	r3, r2, #21
 8007df4:	d532      	bpl.n	8007e5c <__ssputs_r+0xa8>
 8007df6:	0029      	movs	r1, r5
 8007df8:	0038      	movs	r0, r7
 8007dfa:	f000 fb7f 	bl	80084fc <_malloc_r>
 8007dfe:	1e06      	subs	r6, r0, #0
 8007e00:	d109      	bne.n	8007e16 <__ssputs_r+0x62>
 8007e02:	230c      	movs	r3, #12
 8007e04:	603b      	str	r3, [r7, #0]
 8007e06:	2340      	movs	r3, #64	; 0x40
 8007e08:	2001      	movs	r0, #1
 8007e0a:	89a2      	ldrh	r2, [r4, #12]
 8007e0c:	4240      	negs	r0, r0
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	81a3      	strh	r3, [r4, #12]
 8007e12:	b005      	add	sp, #20
 8007e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e16:	9a02      	ldr	r2, [sp, #8]
 8007e18:	6921      	ldr	r1, [r4, #16]
 8007e1a:	f000 fae6 	bl	80083ea <memcpy>
 8007e1e:	89a3      	ldrh	r3, [r4, #12]
 8007e20:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <__ssputs_r+0xc0>)
 8007e22:	401a      	ands	r2, r3
 8007e24:	2380      	movs	r3, #128	; 0x80
 8007e26:	4313      	orrs	r3, r2
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	6126      	str	r6, [r4, #16]
 8007e2e:	18f6      	adds	r6, r6, r3
 8007e30:	6026      	str	r6, [r4, #0]
 8007e32:	6165      	str	r5, [r4, #20]
 8007e34:	9e01      	ldr	r6, [sp, #4]
 8007e36:	1aed      	subs	r5, r5, r3
 8007e38:	60a5      	str	r5, [r4, #8]
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	429e      	cmp	r6, r3
 8007e3e:	d900      	bls.n	8007e42 <__ssputs_r+0x8e>
 8007e40:	9e01      	ldr	r6, [sp, #4]
 8007e42:	0032      	movs	r2, r6
 8007e44:	9903      	ldr	r1, [sp, #12]
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	f000 fad8 	bl	80083fc <memmove>
 8007e4c:	68a3      	ldr	r3, [r4, #8]
 8007e4e:	2000      	movs	r0, #0
 8007e50:	1b9b      	subs	r3, r3, r6
 8007e52:	60a3      	str	r3, [r4, #8]
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	199e      	adds	r6, r3, r6
 8007e58:	6026      	str	r6, [r4, #0]
 8007e5a:	e7da      	b.n	8007e12 <__ssputs_r+0x5e>
 8007e5c:	002a      	movs	r2, r5
 8007e5e:	0038      	movs	r0, r7
 8007e60:	f000 fbc2 	bl	80085e8 <_realloc_r>
 8007e64:	1e06      	subs	r6, r0, #0
 8007e66:	d1e0      	bne.n	8007e2a <__ssputs_r+0x76>
 8007e68:	0038      	movs	r0, r7
 8007e6a:	6921      	ldr	r1, [r4, #16]
 8007e6c:	f000 fada 	bl	8008424 <_free_r>
 8007e70:	e7c7      	b.n	8007e02 <__ssputs_r+0x4e>
 8007e72:	46c0      	nop			; (mov r8, r8)
 8007e74:	fffffb7f 	.word	0xfffffb7f

08007e78 <_svfiprintf_r>:
 8007e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e7a:	b0a1      	sub	sp, #132	; 0x84
 8007e7c:	9003      	str	r0, [sp, #12]
 8007e7e:	001d      	movs	r5, r3
 8007e80:	898b      	ldrh	r3, [r1, #12]
 8007e82:	000f      	movs	r7, r1
 8007e84:	0016      	movs	r6, r2
 8007e86:	061b      	lsls	r3, r3, #24
 8007e88:	d511      	bpl.n	8007eae <_svfiprintf_r+0x36>
 8007e8a:	690b      	ldr	r3, [r1, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d10e      	bne.n	8007eae <_svfiprintf_r+0x36>
 8007e90:	2140      	movs	r1, #64	; 0x40
 8007e92:	f000 fb33 	bl	80084fc <_malloc_r>
 8007e96:	6038      	str	r0, [r7, #0]
 8007e98:	6138      	str	r0, [r7, #16]
 8007e9a:	2800      	cmp	r0, #0
 8007e9c:	d105      	bne.n	8007eaa <_svfiprintf_r+0x32>
 8007e9e:	230c      	movs	r3, #12
 8007ea0:	9a03      	ldr	r2, [sp, #12]
 8007ea2:	3801      	subs	r0, #1
 8007ea4:	6013      	str	r3, [r2, #0]
 8007ea6:	b021      	add	sp, #132	; 0x84
 8007ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007eaa:	2340      	movs	r3, #64	; 0x40
 8007eac:	617b      	str	r3, [r7, #20]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	ac08      	add	r4, sp, #32
 8007eb2:	6163      	str	r3, [r4, #20]
 8007eb4:	3320      	adds	r3, #32
 8007eb6:	7663      	strb	r3, [r4, #25]
 8007eb8:	3310      	adds	r3, #16
 8007eba:	76a3      	strb	r3, [r4, #26]
 8007ebc:	9507      	str	r5, [sp, #28]
 8007ebe:	0035      	movs	r5, r6
 8007ec0:	782b      	ldrb	r3, [r5, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <_svfiprintf_r+0x52>
 8007ec6:	2b25      	cmp	r3, #37	; 0x25
 8007ec8:	d147      	bne.n	8007f5a <_svfiprintf_r+0xe2>
 8007eca:	1bab      	subs	r3, r5, r6
 8007ecc:	9305      	str	r3, [sp, #20]
 8007ece:	42b5      	cmp	r5, r6
 8007ed0:	d00c      	beq.n	8007eec <_svfiprintf_r+0x74>
 8007ed2:	0032      	movs	r2, r6
 8007ed4:	0039      	movs	r1, r7
 8007ed6:	9803      	ldr	r0, [sp, #12]
 8007ed8:	f7ff ff6c 	bl	8007db4 <__ssputs_r>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d100      	bne.n	8007ee2 <_svfiprintf_r+0x6a>
 8007ee0:	e0ae      	b.n	8008040 <_svfiprintf_r+0x1c8>
 8007ee2:	6962      	ldr	r2, [r4, #20]
 8007ee4:	9b05      	ldr	r3, [sp, #20]
 8007ee6:	4694      	mov	ip, r2
 8007ee8:	4463      	add	r3, ip
 8007eea:	6163      	str	r3, [r4, #20]
 8007eec:	782b      	ldrb	r3, [r5, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d100      	bne.n	8007ef4 <_svfiprintf_r+0x7c>
 8007ef2:	e0a5      	b.n	8008040 <_svfiprintf_r+0x1c8>
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	4252      	negs	r2, r2
 8007efa:	6062      	str	r2, [r4, #4]
 8007efc:	a904      	add	r1, sp, #16
 8007efe:	3254      	adds	r2, #84	; 0x54
 8007f00:	1852      	adds	r2, r2, r1
 8007f02:	1c6e      	adds	r6, r5, #1
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	60e3      	str	r3, [r4, #12]
 8007f08:	60a3      	str	r3, [r4, #8]
 8007f0a:	7013      	strb	r3, [r2, #0]
 8007f0c:	65a3      	str	r3, [r4, #88]	; 0x58
 8007f0e:	2205      	movs	r2, #5
 8007f10:	7831      	ldrb	r1, [r6, #0]
 8007f12:	4854      	ldr	r0, [pc, #336]	; (8008064 <_svfiprintf_r+0x1ec>)
 8007f14:	f000 fa5e 	bl	80083d4 <memchr>
 8007f18:	1c75      	adds	r5, r6, #1
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d11f      	bne.n	8007f5e <_svfiprintf_r+0xe6>
 8007f1e:	6822      	ldr	r2, [r4, #0]
 8007f20:	06d3      	lsls	r3, r2, #27
 8007f22:	d504      	bpl.n	8007f2e <_svfiprintf_r+0xb6>
 8007f24:	2353      	movs	r3, #83	; 0x53
 8007f26:	a904      	add	r1, sp, #16
 8007f28:	185b      	adds	r3, r3, r1
 8007f2a:	2120      	movs	r1, #32
 8007f2c:	7019      	strb	r1, [r3, #0]
 8007f2e:	0713      	lsls	r3, r2, #28
 8007f30:	d504      	bpl.n	8007f3c <_svfiprintf_r+0xc4>
 8007f32:	2353      	movs	r3, #83	; 0x53
 8007f34:	a904      	add	r1, sp, #16
 8007f36:	185b      	adds	r3, r3, r1
 8007f38:	212b      	movs	r1, #43	; 0x2b
 8007f3a:	7019      	strb	r1, [r3, #0]
 8007f3c:	7833      	ldrb	r3, [r6, #0]
 8007f3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f40:	d016      	beq.n	8007f70 <_svfiprintf_r+0xf8>
 8007f42:	0035      	movs	r5, r6
 8007f44:	2100      	movs	r1, #0
 8007f46:	200a      	movs	r0, #10
 8007f48:	68e3      	ldr	r3, [r4, #12]
 8007f4a:	782a      	ldrb	r2, [r5, #0]
 8007f4c:	1c6e      	adds	r6, r5, #1
 8007f4e:	3a30      	subs	r2, #48	; 0x30
 8007f50:	2a09      	cmp	r2, #9
 8007f52:	d94e      	bls.n	8007ff2 <_svfiprintf_r+0x17a>
 8007f54:	2900      	cmp	r1, #0
 8007f56:	d111      	bne.n	8007f7c <_svfiprintf_r+0x104>
 8007f58:	e017      	b.n	8007f8a <_svfiprintf_r+0x112>
 8007f5a:	3501      	adds	r5, #1
 8007f5c:	e7b0      	b.n	8007ec0 <_svfiprintf_r+0x48>
 8007f5e:	4b41      	ldr	r3, [pc, #260]	; (8008064 <_svfiprintf_r+0x1ec>)
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	1ac0      	subs	r0, r0, r3
 8007f64:	2301      	movs	r3, #1
 8007f66:	4083      	lsls	r3, r0
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	002e      	movs	r6, r5
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	e7ce      	b.n	8007f0e <_svfiprintf_r+0x96>
 8007f70:	9b07      	ldr	r3, [sp, #28]
 8007f72:	1d19      	adds	r1, r3, #4
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	9107      	str	r1, [sp, #28]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	db01      	blt.n	8007f80 <_svfiprintf_r+0x108>
 8007f7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f7e:	e004      	b.n	8007f8a <_svfiprintf_r+0x112>
 8007f80:	425b      	negs	r3, r3
 8007f82:	60e3      	str	r3, [r4, #12]
 8007f84:	2302      	movs	r3, #2
 8007f86:	4313      	orrs	r3, r2
 8007f88:	6023      	str	r3, [r4, #0]
 8007f8a:	782b      	ldrb	r3, [r5, #0]
 8007f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f8e:	d10a      	bne.n	8007fa6 <_svfiprintf_r+0x12e>
 8007f90:	786b      	ldrb	r3, [r5, #1]
 8007f92:	2b2a      	cmp	r3, #42	; 0x2a
 8007f94:	d135      	bne.n	8008002 <_svfiprintf_r+0x18a>
 8007f96:	9b07      	ldr	r3, [sp, #28]
 8007f98:	3502      	adds	r5, #2
 8007f9a:	1d1a      	adds	r2, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	9207      	str	r2, [sp, #28]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	db2b      	blt.n	8007ffc <_svfiprintf_r+0x184>
 8007fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa6:	4e30      	ldr	r6, [pc, #192]	; (8008068 <_svfiprintf_r+0x1f0>)
 8007fa8:	2203      	movs	r2, #3
 8007faa:	0030      	movs	r0, r6
 8007fac:	7829      	ldrb	r1, [r5, #0]
 8007fae:	f000 fa11 	bl	80083d4 <memchr>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	d006      	beq.n	8007fc4 <_svfiprintf_r+0x14c>
 8007fb6:	2340      	movs	r3, #64	; 0x40
 8007fb8:	1b80      	subs	r0, r0, r6
 8007fba:	4083      	lsls	r3, r0
 8007fbc:	6822      	ldr	r2, [r4, #0]
 8007fbe:	3501      	adds	r5, #1
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	6023      	str	r3, [r4, #0]
 8007fc4:	7829      	ldrb	r1, [r5, #0]
 8007fc6:	2206      	movs	r2, #6
 8007fc8:	4828      	ldr	r0, [pc, #160]	; (800806c <_svfiprintf_r+0x1f4>)
 8007fca:	1c6e      	adds	r6, r5, #1
 8007fcc:	7621      	strb	r1, [r4, #24]
 8007fce:	f000 fa01 	bl	80083d4 <memchr>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	d03c      	beq.n	8008050 <_svfiprintf_r+0x1d8>
 8007fd6:	4b26      	ldr	r3, [pc, #152]	; (8008070 <_svfiprintf_r+0x1f8>)
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d125      	bne.n	8008028 <_svfiprintf_r+0x1b0>
 8007fdc:	2207      	movs	r2, #7
 8007fde:	9b07      	ldr	r3, [sp, #28]
 8007fe0:	3307      	adds	r3, #7
 8007fe2:	4393      	bics	r3, r2
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	9307      	str	r3, [sp, #28]
 8007fe8:	6963      	ldr	r3, [r4, #20]
 8007fea:	9a04      	ldr	r2, [sp, #16]
 8007fec:	189b      	adds	r3, r3, r2
 8007fee:	6163      	str	r3, [r4, #20]
 8007ff0:	e765      	b.n	8007ebe <_svfiprintf_r+0x46>
 8007ff2:	4343      	muls	r3, r0
 8007ff4:	0035      	movs	r5, r6
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	189b      	adds	r3, r3, r2
 8007ffa:	e7a6      	b.n	8007f4a <_svfiprintf_r+0xd2>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	425b      	negs	r3, r3
 8008000:	e7d0      	b.n	8007fa4 <_svfiprintf_r+0x12c>
 8008002:	2300      	movs	r3, #0
 8008004:	200a      	movs	r0, #10
 8008006:	001a      	movs	r2, r3
 8008008:	3501      	adds	r5, #1
 800800a:	6063      	str	r3, [r4, #4]
 800800c:	7829      	ldrb	r1, [r5, #0]
 800800e:	1c6e      	adds	r6, r5, #1
 8008010:	3930      	subs	r1, #48	; 0x30
 8008012:	2909      	cmp	r1, #9
 8008014:	d903      	bls.n	800801e <_svfiprintf_r+0x1a6>
 8008016:	2b00      	cmp	r3, #0
 8008018:	d0c5      	beq.n	8007fa6 <_svfiprintf_r+0x12e>
 800801a:	9209      	str	r2, [sp, #36]	; 0x24
 800801c:	e7c3      	b.n	8007fa6 <_svfiprintf_r+0x12e>
 800801e:	4342      	muls	r2, r0
 8008020:	0035      	movs	r5, r6
 8008022:	2301      	movs	r3, #1
 8008024:	1852      	adds	r2, r2, r1
 8008026:	e7f1      	b.n	800800c <_svfiprintf_r+0x194>
 8008028:	ab07      	add	r3, sp, #28
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	003a      	movs	r2, r7
 800802e:	0021      	movs	r1, r4
 8008030:	4b10      	ldr	r3, [pc, #64]	; (8008074 <_svfiprintf_r+0x1fc>)
 8008032:	9803      	ldr	r0, [sp, #12]
 8008034:	e000      	b.n	8008038 <_svfiprintf_r+0x1c0>
 8008036:	bf00      	nop
 8008038:	9004      	str	r0, [sp, #16]
 800803a:	9b04      	ldr	r3, [sp, #16]
 800803c:	3301      	adds	r3, #1
 800803e:	d1d3      	bne.n	8007fe8 <_svfiprintf_r+0x170>
 8008040:	89bb      	ldrh	r3, [r7, #12]
 8008042:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008044:	065b      	lsls	r3, r3, #25
 8008046:	d400      	bmi.n	800804a <_svfiprintf_r+0x1d2>
 8008048:	e72d      	b.n	8007ea6 <_svfiprintf_r+0x2e>
 800804a:	2001      	movs	r0, #1
 800804c:	4240      	negs	r0, r0
 800804e:	e72a      	b.n	8007ea6 <_svfiprintf_r+0x2e>
 8008050:	ab07      	add	r3, sp, #28
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	003a      	movs	r2, r7
 8008056:	0021      	movs	r1, r4
 8008058:	4b06      	ldr	r3, [pc, #24]	; (8008074 <_svfiprintf_r+0x1fc>)
 800805a:	9803      	ldr	r0, [sp, #12]
 800805c:	f000 f87c 	bl	8008158 <_printf_i>
 8008060:	e7ea      	b.n	8008038 <_svfiprintf_r+0x1c0>
 8008062:	46c0      	nop			; (mov r8, r8)
 8008064:	08008854 	.word	0x08008854
 8008068:	0800885a 	.word	0x0800885a
 800806c:	0800885e 	.word	0x0800885e
 8008070:	00000000 	.word	0x00000000
 8008074:	08007db5 	.word	0x08007db5

08008078 <_printf_common>:
 8008078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800807a:	0015      	movs	r5, r2
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	688a      	ldr	r2, [r1, #8]
 8008080:	690b      	ldr	r3, [r1, #16]
 8008082:	000c      	movs	r4, r1
 8008084:	9000      	str	r0, [sp, #0]
 8008086:	4293      	cmp	r3, r2
 8008088:	da00      	bge.n	800808c <_printf_common+0x14>
 800808a:	0013      	movs	r3, r2
 800808c:	0022      	movs	r2, r4
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	3243      	adds	r2, #67	; 0x43
 8008092:	7812      	ldrb	r2, [r2, #0]
 8008094:	2a00      	cmp	r2, #0
 8008096:	d001      	beq.n	800809c <_printf_common+0x24>
 8008098:	3301      	adds	r3, #1
 800809a:	602b      	str	r3, [r5, #0]
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	069b      	lsls	r3, r3, #26
 80080a0:	d502      	bpl.n	80080a8 <_printf_common+0x30>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	3302      	adds	r3, #2
 80080a6:	602b      	str	r3, [r5, #0]
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	2306      	movs	r3, #6
 80080ac:	0017      	movs	r7, r2
 80080ae:	401f      	ands	r7, r3
 80080b0:	421a      	tst	r2, r3
 80080b2:	d027      	beq.n	8008104 <_printf_common+0x8c>
 80080b4:	0023      	movs	r3, r4
 80080b6:	3343      	adds	r3, #67	; 0x43
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	1e5a      	subs	r2, r3, #1
 80080bc:	4193      	sbcs	r3, r2
 80080be:	6822      	ldr	r2, [r4, #0]
 80080c0:	0692      	lsls	r2, r2, #26
 80080c2:	d430      	bmi.n	8008126 <_printf_common+0xae>
 80080c4:	0022      	movs	r2, r4
 80080c6:	9901      	ldr	r1, [sp, #4]
 80080c8:	9800      	ldr	r0, [sp, #0]
 80080ca:	9e08      	ldr	r6, [sp, #32]
 80080cc:	3243      	adds	r2, #67	; 0x43
 80080ce:	47b0      	blx	r6
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d025      	beq.n	8008120 <_printf_common+0xa8>
 80080d4:	2306      	movs	r3, #6
 80080d6:	6820      	ldr	r0, [r4, #0]
 80080d8:	682a      	ldr	r2, [r5, #0]
 80080da:	68e1      	ldr	r1, [r4, #12]
 80080dc:	2500      	movs	r5, #0
 80080de:	4003      	ands	r3, r0
 80080e0:	2b04      	cmp	r3, #4
 80080e2:	d103      	bne.n	80080ec <_printf_common+0x74>
 80080e4:	1a8d      	subs	r5, r1, r2
 80080e6:	43eb      	mvns	r3, r5
 80080e8:	17db      	asrs	r3, r3, #31
 80080ea:	401d      	ands	r5, r3
 80080ec:	68a3      	ldr	r3, [r4, #8]
 80080ee:	6922      	ldr	r2, [r4, #16]
 80080f0:	4293      	cmp	r3, r2
 80080f2:	dd01      	ble.n	80080f8 <_printf_common+0x80>
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	18ed      	adds	r5, r5, r3
 80080f8:	2700      	movs	r7, #0
 80080fa:	42bd      	cmp	r5, r7
 80080fc:	d120      	bne.n	8008140 <_printf_common+0xc8>
 80080fe:	2000      	movs	r0, #0
 8008100:	e010      	b.n	8008124 <_printf_common+0xac>
 8008102:	3701      	adds	r7, #1
 8008104:	68e3      	ldr	r3, [r4, #12]
 8008106:	682a      	ldr	r2, [r5, #0]
 8008108:	1a9b      	subs	r3, r3, r2
 800810a:	42bb      	cmp	r3, r7
 800810c:	ddd2      	ble.n	80080b4 <_printf_common+0x3c>
 800810e:	0022      	movs	r2, r4
 8008110:	2301      	movs	r3, #1
 8008112:	9901      	ldr	r1, [sp, #4]
 8008114:	9800      	ldr	r0, [sp, #0]
 8008116:	9e08      	ldr	r6, [sp, #32]
 8008118:	3219      	adds	r2, #25
 800811a:	47b0      	blx	r6
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d1f0      	bne.n	8008102 <_printf_common+0x8a>
 8008120:	2001      	movs	r0, #1
 8008122:	4240      	negs	r0, r0
 8008124:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008126:	2030      	movs	r0, #48	; 0x30
 8008128:	18e1      	adds	r1, r4, r3
 800812a:	3143      	adds	r1, #67	; 0x43
 800812c:	7008      	strb	r0, [r1, #0]
 800812e:	0021      	movs	r1, r4
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	3145      	adds	r1, #69	; 0x45
 8008134:	7809      	ldrb	r1, [r1, #0]
 8008136:	18a2      	adds	r2, r4, r2
 8008138:	3243      	adds	r2, #67	; 0x43
 800813a:	3302      	adds	r3, #2
 800813c:	7011      	strb	r1, [r2, #0]
 800813e:	e7c1      	b.n	80080c4 <_printf_common+0x4c>
 8008140:	0022      	movs	r2, r4
 8008142:	2301      	movs	r3, #1
 8008144:	9901      	ldr	r1, [sp, #4]
 8008146:	9800      	ldr	r0, [sp, #0]
 8008148:	9e08      	ldr	r6, [sp, #32]
 800814a:	321a      	adds	r2, #26
 800814c:	47b0      	blx	r6
 800814e:	1c43      	adds	r3, r0, #1
 8008150:	d0e6      	beq.n	8008120 <_printf_common+0xa8>
 8008152:	3701      	adds	r7, #1
 8008154:	e7d1      	b.n	80080fa <_printf_common+0x82>
	...

08008158 <_printf_i>:
 8008158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800815a:	b08b      	sub	sp, #44	; 0x2c
 800815c:	9206      	str	r2, [sp, #24]
 800815e:	000a      	movs	r2, r1
 8008160:	3243      	adds	r2, #67	; 0x43
 8008162:	9307      	str	r3, [sp, #28]
 8008164:	9005      	str	r0, [sp, #20]
 8008166:	9204      	str	r2, [sp, #16]
 8008168:	7e0a      	ldrb	r2, [r1, #24]
 800816a:	000c      	movs	r4, r1
 800816c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800816e:	2a78      	cmp	r2, #120	; 0x78
 8008170:	d807      	bhi.n	8008182 <_printf_i+0x2a>
 8008172:	2a62      	cmp	r2, #98	; 0x62
 8008174:	d809      	bhi.n	800818a <_printf_i+0x32>
 8008176:	2a00      	cmp	r2, #0
 8008178:	d100      	bne.n	800817c <_printf_i+0x24>
 800817a:	e0c1      	b.n	8008300 <_printf_i+0x1a8>
 800817c:	2a58      	cmp	r2, #88	; 0x58
 800817e:	d100      	bne.n	8008182 <_printf_i+0x2a>
 8008180:	e08c      	b.n	800829c <_printf_i+0x144>
 8008182:	0026      	movs	r6, r4
 8008184:	3642      	adds	r6, #66	; 0x42
 8008186:	7032      	strb	r2, [r6, #0]
 8008188:	e022      	b.n	80081d0 <_printf_i+0x78>
 800818a:	0010      	movs	r0, r2
 800818c:	3863      	subs	r0, #99	; 0x63
 800818e:	2815      	cmp	r0, #21
 8008190:	d8f7      	bhi.n	8008182 <_printf_i+0x2a>
 8008192:	f7f7 ffb9 	bl	8000108 <__gnu_thumb1_case_shi>
 8008196:	0016      	.short	0x0016
 8008198:	fff6001f 	.word	0xfff6001f
 800819c:	fff6fff6 	.word	0xfff6fff6
 80081a0:	001ffff6 	.word	0x001ffff6
 80081a4:	fff6fff6 	.word	0xfff6fff6
 80081a8:	fff6fff6 	.word	0xfff6fff6
 80081ac:	003600a8 	.word	0x003600a8
 80081b0:	fff6009a 	.word	0xfff6009a
 80081b4:	00b9fff6 	.word	0x00b9fff6
 80081b8:	0036fff6 	.word	0x0036fff6
 80081bc:	fff6fff6 	.word	0xfff6fff6
 80081c0:	009e      	.short	0x009e
 80081c2:	0026      	movs	r6, r4
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	3642      	adds	r6, #66	; 0x42
 80081c8:	1d11      	adds	r1, r2, #4
 80081ca:	6019      	str	r1, [r3, #0]
 80081cc:	6813      	ldr	r3, [r2, #0]
 80081ce:	7033      	strb	r3, [r6, #0]
 80081d0:	2301      	movs	r3, #1
 80081d2:	e0a7      	b.n	8008324 <_printf_i+0x1cc>
 80081d4:	6808      	ldr	r0, [r1, #0]
 80081d6:	6819      	ldr	r1, [r3, #0]
 80081d8:	1d0a      	adds	r2, r1, #4
 80081da:	0605      	lsls	r5, r0, #24
 80081dc:	d50b      	bpl.n	80081f6 <_printf_i+0x9e>
 80081de:	680d      	ldr	r5, [r1, #0]
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	2d00      	cmp	r5, #0
 80081e4:	da03      	bge.n	80081ee <_printf_i+0x96>
 80081e6:	232d      	movs	r3, #45	; 0x2d
 80081e8:	9a04      	ldr	r2, [sp, #16]
 80081ea:	426d      	negs	r5, r5
 80081ec:	7013      	strb	r3, [r2, #0]
 80081ee:	4b61      	ldr	r3, [pc, #388]	; (8008374 <_printf_i+0x21c>)
 80081f0:	270a      	movs	r7, #10
 80081f2:	9303      	str	r3, [sp, #12]
 80081f4:	e01b      	b.n	800822e <_printf_i+0xd6>
 80081f6:	680d      	ldr	r5, [r1, #0]
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	0641      	lsls	r1, r0, #25
 80081fc:	d5f1      	bpl.n	80081e2 <_printf_i+0x8a>
 80081fe:	b22d      	sxth	r5, r5
 8008200:	e7ef      	b.n	80081e2 <_printf_i+0x8a>
 8008202:	680d      	ldr	r5, [r1, #0]
 8008204:	6819      	ldr	r1, [r3, #0]
 8008206:	1d08      	adds	r0, r1, #4
 8008208:	6018      	str	r0, [r3, #0]
 800820a:	062e      	lsls	r6, r5, #24
 800820c:	d501      	bpl.n	8008212 <_printf_i+0xba>
 800820e:	680d      	ldr	r5, [r1, #0]
 8008210:	e003      	b.n	800821a <_printf_i+0xc2>
 8008212:	066d      	lsls	r5, r5, #25
 8008214:	d5fb      	bpl.n	800820e <_printf_i+0xb6>
 8008216:	680d      	ldr	r5, [r1, #0]
 8008218:	b2ad      	uxth	r5, r5
 800821a:	4b56      	ldr	r3, [pc, #344]	; (8008374 <_printf_i+0x21c>)
 800821c:	2708      	movs	r7, #8
 800821e:	9303      	str	r3, [sp, #12]
 8008220:	2a6f      	cmp	r2, #111	; 0x6f
 8008222:	d000      	beq.n	8008226 <_printf_i+0xce>
 8008224:	3702      	adds	r7, #2
 8008226:	0023      	movs	r3, r4
 8008228:	2200      	movs	r2, #0
 800822a:	3343      	adds	r3, #67	; 0x43
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	db03      	blt.n	800823e <_printf_i+0xe6>
 8008236:	2204      	movs	r2, #4
 8008238:	6821      	ldr	r1, [r4, #0]
 800823a:	4391      	bics	r1, r2
 800823c:	6021      	str	r1, [r4, #0]
 800823e:	2d00      	cmp	r5, #0
 8008240:	d102      	bne.n	8008248 <_printf_i+0xf0>
 8008242:	9e04      	ldr	r6, [sp, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <_printf_i+0x10a>
 8008248:	9e04      	ldr	r6, [sp, #16]
 800824a:	0028      	movs	r0, r5
 800824c:	0039      	movs	r1, r7
 800824e:	f7f7 ffeb 	bl	8000228 <__aeabi_uidivmod>
 8008252:	9b03      	ldr	r3, [sp, #12]
 8008254:	3e01      	subs	r6, #1
 8008256:	5c5b      	ldrb	r3, [r3, r1]
 8008258:	7033      	strb	r3, [r6, #0]
 800825a:	002b      	movs	r3, r5
 800825c:	0005      	movs	r5, r0
 800825e:	429f      	cmp	r7, r3
 8008260:	d9f3      	bls.n	800824a <_printf_i+0xf2>
 8008262:	2f08      	cmp	r7, #8
 8008264:	d109      	bne.n	800827a <_printf_i+0x122>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	07db      	lsls	r3, r3, #31
 800826a:	d506      	bpl.n	800827a <_printf_i+0x122>
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	6922      	ldr	r2, [r4, #16]
 8008270:	4293      	cmp	r3, r2
 8008272:	dc02      	bgt.n	800827a <_printf_i+0x122>
 8008274:	2330      	movs	r3, #48	; 0x30
 8008276:	3e01      	subs	r6, #1
 8008278:	7033      	strb	r3, [r6, #0]
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	1b9b      	subs	r3, r3, r6
 800827e:	6123      	str	r3, [r4, #16]
 8008280:	9b07      	ldr	r3, [sp, #28]
 8008282:	0021      	movs	r1, r4
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	9805      	ldr	r0, [sp, #20]
 8008288:	9b06      	ldr	r3, [sp, #24]
 800828a:	aa09      	add	r2, sp, #36	; 0x24
 800828c:	f7ff fef4 	bl	8008078 <_printf_common>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d14c      	bne.n	800832e <_printf_i+0x1d6>
 8008294:	2001      	movs	r0, #1
 8008296:	4240      	negs	r0, r0
 8008298:	b00b      	add	sp, #44	; 0x2c
 800829a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829c:	3145      	adds	r1, #69	; 0x45
 800829e:	700a      	strb	r2, [r1, #0]
 80082a0:	4a34      	ldr	r2, [pc, #208]	; (8008374 <_printf_i+0x21c>)
 80082a2:	9203      	str	r2, [sp, #12]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	6821      	ldr	r1, [r4, #0]
 80082a8:	ca20      	ldmia	r2!, {r5}
 80082aa:	601a      	str	r2, [r3, #0]
 80082ac:	0608      	lsls	r0, r1, #24
 80082ae:	d516      	bpl.n	80082de <_printf_i+0x186>
 80082b0:	07cb      	lsls	r3, r1, #31
 80082b2:	d502      	bpl.n	80082ba <_printf_i+0x162>
 80082b4:	2320      	movs	r3, #32
 80082b6:	4319      	orrs	r1, r3
 80082b8:	6021      	str	r1, [r4, #0]
 80082ba:	2710      	movs	r7, #16
 80082bc:	2d00      	cmp	r5, #0
 80082be:	d1b2      	bne.n	8008226 <_printf_i+0xce>
 80082c0:	2320      	movs	r3, #32
 80082c2:	6822      	ldr	r2, [r4, #0]
 80082c4:	439a      	bics	r2, r3
 80082c6:	6022      	str	r2, [r4, #0]
 80082c8:	e7ad      	b.n	8008226 <_printf_i+0xce>
 80082ca:	2220      	movs	r2, #32
 80082cc:	6809      	ldr	r1, [r1, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	6022      	str	r2, [r4, #0]
 80082d2:	0022      	movs	r2, r4
 80082d4:	2178      	movs	r1, #120	; 0x78
 80082d6:	3245      	adds	r2, #69	; 0x45
 80082d8:	7011      	strb	r1, [r2, #0]
 80082da:	4a27      	ldr	r2, [pc, #156]	; (8008378 <_printf_i+0x220>)
 80082dc:	e7e1      	b.n	80082a2 <_printf_i+0x14a>
 80082de:	0648      	lsls	r0, r1, #25
 80082e0:	d5e6      	bpl.n	80082b0 <_printf_i+0x158>
 80082e2:	b2ad      	uxth	r5, r5
 80082e4:	e7e4      	b.n	80082b0 <_printf_i+0x158>
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	680d      	ldr	r5, [r1, #0]
 80082ea:	1d10      	adds	r0, r2, #4
 80082ec:	6949      	ldr	r1, [r1, #20]
 80082ee:	6018      	str	r0, [r3, #0]
 80082f0:	6813      	ldr	r3, [r2, #0]
 80082f2:	062e      	lsls	r6, r5, #24
 80082f4:	d501      	bpl.n	80082fa <_printf_i+0x1a2>
 80082f6:	6019      	str	r1, [r3, #0]
 80082f8:	e002      	b.n	8008300 <_printf_i+0x1a8>
 80082fa:	066d      	lsls	r5, r5, #25
 80082fc:	d5fb      	bpl.n	80082f6 <_printf_i+0x19e>
 80082fe:	8019      	strh	r1, [r3, #0]
 8008300:	2300      	movs	r3, #0
 8008302:	9e04      	ldr	r6, [sp, #16]
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	e7bb      	b.n	8008280 <_printf_i+0x128>
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	1d11      	adds	r1, r2, #4
 800830c:	6019      	str	r1, [r3, #0]
 800830e:	6816      	ldr	r6, [r2, #0]
 8008310:	2100      	movs	r1, #0
 8008312:	0030      	movs	r0, r6
 8008314:	6862      	ldr	r2, [r4, #4]
 8008316:	f000 f85d 	bl	80083d4 <memchr>
 800831a:	2800      	cmp	r0, #0
 800831c:	d001      	beq.n	8008322 <_printf_i+0x1ca>
 800831e:	1b80      	subs	r0, r0, r6
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2300      	movs	r3, #0
 8008328:	9a04      	ldr	r2, [sp, #16]
 800832a:	7013      	strb	r3, [r2, #0]
 800832c:	e7a8      	b.n	8008280 <_printf_i+0x128>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	0032      	movs	r2, r6
 8008332:	9906      	ldr	r1, [sp, #24]
 8008334:	9805      	ldr	r0, [sp, #20]
 8008336:	9d07      	ldr	r5, [sp, #28]
 8008338:	47a8      	blx	r5
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d0aa      	beq.n	8008294 <_printf_i+0x13c>
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	079b      	lsls	r3, r3, #30
 8008342:	d415      	bmi.n	8008370 <_printf_i+0x218>
 8008344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008346:	68e0      	ldr	r0, [r4, #12]
 8008348:	4298      	cmp	r0, r3
 800834a:	daa5      	bge.n	8008298 <_printf_i+0x140>
 800834c:	0018      	movs	r0, r3
 800834e:	e7a3      	b.n	8008298 <_printf_i+0x140>
 8008350:	0022      	movs	r2, r4
 8008352:	2301      	movs	r3, #1
 8008354:	9906      	ldr	r1, [sp, #24]
 8008356:	9805      	ldr	r0, [sp, #20]
 8008358:	9e07      	ldr	r6, [sp, #28]
 800835a:	3219      	adds	r2, #25
 800835c:	47b0      	blx	r6
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	d098      	beq.n	8008294 <_printf_i+0x13c>
 8008362:	3501      	adds	r5, #1
 8008364:	68e3      	ldr	r3, [r4, #12]
 8008366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008368:	1a9b      	subs	r3, r3, r2
 800836a:	42ab      	cmp	r3, r5
 800836c:	dcf0      	bgt.n	8008350 <_printf_i+0x1f8>
 800836e:	e7e9      	b.n	8008344 <_printf_i+0x1ec>
 8008370:	2500      	movs	r5, #0
 8008372:	e7f7      	b.n	8008364 <_printf_i+0x20c>
 8008374:	08008865 	.word	0x08008865
 8008378:	08008876 	.word	0x08008876

0800837c <__fpclassifyd>:
 800837c:	b530      	push	{r4, r5, lr}
 800837e:	0005      	movs	r5, r0
 8008380:	0002      	movs	r2, r0
 8008382:	000b      	movs	r3, r1
 8008384:	2002      	movs	r0, #2
 8008386:	430d      	orrs	r5, r1
 8008388:	d006      	beq.n	8008398 <__fpclassifyd+0x1c>
 800838a:	2080      	movs	r0, #128	; 0x80
 800838c:	0600      	lsls	r0, r0, #24
 800838e:	4281      	cmp	r1, r0
 8008390:	d103      	bne.n	800839a <__fpclassifyd+0x1e>
 8008392:	2002      	movs	r0, #2
 8008394:	2a00      	cmp	r2, #0
 8008396:	d10a      	bne.n	80083ae <__fpclassifyd+0x32>
 8008398:	bd30      	pop	{r4, r5, pc}
 800839a:	490b      	ldr	r1, [pc, #44]	; (80083c8 <__fpclassifyd+0x4c>)
 800839c:	4c0b      	ldr	r4, [pc, #44]	; (80083cc <__fpclassifyd+0x50>)
 800839e:	1859      	adds	r1, r3, r1
 80083a0:	2004      	movs	r0, #4
 80083a2:	42a1      	cmp	r1, r4
 80083a4:	d9f8      	bls.n	8008398 <__fpclassifyd+0x1c>
 80083a6:	490a      	ldr	r1, [pc, #40]	; (80083d0 <__fpclassifyd+0x54>)
 80083a8:	1859      	adds	r1, r3, r1
 80083aa:	42a1      	cmp	r1, r4
 80083ac:	d9f4      	bls.n	8008398 <__fpclassifyd+0x1c>
 80083ae:	4908      	ldr	r1, [pc, #32]	; (80083d0 <__fpclassifyd+0x54>)
 80083b0:	2003      	movs	r0, #3
 80083b2:	4219      	tst	r1, r3
 80083b4:	d0f0      	beq.n	8008398 <__fpclassifyd+0x1c>
 80083b6:	005b      	lsls	r3, r3, #1
 80083b8:	2000      	movs	r0, #0
 80083ba:	085b      	lsrs	r3, r3, #1
 80083bc:	428b      	cmp	r3, r1
 80083be:	d1eb      	bne.n	8008398 <__fpclassifyd+0x1c>
 80083c0:	4250      	negs	r0, r2
 80083c2:	4150      	adcs	r0, r2
 80083c4:	e7e8      	b.n	8008398 <__fpclassifyd+0x1c>
 80083c6:	46c0      	nop			; (mov r8, r8)
 80083c8:	fff00000 	.word	0xfff00000
 80083cc:	7fdfffff 	.word	0x7fdfffff
 80083d0:	7ff00000 	.word	0x7ff00000

080083d4 <memchr>:
 80083d4:	b2c9      	uxtb	r1, r1
 80083d6:	1882      	adds	r2, r0, r2
 80083d8:	4290      	cmp	r0, r2
 80083da:	d101      	bne.n	80083e0 <memchr+0xc>
 80083dc:	2000      	movs	r0, #0
 80083de:	4770      	bx	lr
 80083e0:	7803      	ldrb	r3, [r0, #0]
 80083e2:	428b      	cmp	r3, r1
 80083e4:	d0fb      	beq.n	80083de <memchr+0xa>
 80083e6:	3001      	adds	r0, #1
 80083e8:	e7f6      	b.n	80083d8 <memchr+0x4>

080083ea <memcpy>:
 80083ea:	2300      	movs	r3, #0
 80083ec:	b510      	push	{r4, lr}
 80083ee:	429a      	cmp	r2, r3
 80083f0:	d100      	bne.n	80083f4 <memcpy+0xa>
 80083f2:	bd10      	pop	{r4, pc}
 80083f4:	5ccc      	ldrb	r4, [r1, r3]
 80083f6:	54c4      	strb	r4, [r0, r3]
 80083f8:	3301      	adds	r3, #1
 80083fa:	e7f8      	b.n	80083ee <memcpy+0x4>

080083fc <memmove>:
 80083fc:	b510      	push	{r4, lr}
 80083fe:	4288      	cmp	r0, r1
 8008400:	d902      	bls.n	8008408 <memmove+0xc>
 8008402:	188b      	adds	r3, r1, r2
 8008404:	4298      	cmp	r0, r3
 8008406:	d303      	bcc.n	8008410 <memmove+0x14>
 8008408:	2300      	movs	r3, #0
 800840a:	e007      	b.n	800841c <memmove+0x20>
 800840c:	5c8b      	ldrb	r3, [r1, r2]
 800840e:	5483      	strb	r3, [r0, r2]
 8008410:	3a01      	subs	r2, #1
 8008412:	d2fb      	bcs.n	800840c <memmove+0x10>
 8008414:	bd10      	pop	{r4, pc}
 8008416:	5ccc      	ldrb	r4, [r1, r3]
 8008418:	54c4      	strb	r4, [r0, r3]
 800841a:	3301      	adds	r3, #1
 800841c:	429a      	cmp	r2, r3
 800841e:	d1fa      	bne.n	8008416 <memmove+0x1a>
 8008420:	e7f8      	b.n	8008414 <memmove+0x18>
	...

08008424 <_free_r>:
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	0005      	movs	r5, r0
 8008428:	2900      	cmp	r1, #0
 800842a:	d010      	beq.n	800844e <_free_r+0x2a>
 800842c:	1f0c      	subs	r4, r1, #4
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	da00      	bge.n	8008436 <_free_r+0x12>
 8008434:	18e4      	adds	r4, r4, r3
 8008436:	0028      	movs	r0, r5
 8008438:	f000 f918 	bl	800866c <__malloc_lock>
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <_free_r+0x90>)
 800843e:	6813      	ldr	r3, [r2, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <_free_r+0x2c>
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	6014      	str	r4, [r2, #0]
 8008448:	0028      	movs	r0, r5
 800844a:	f000 f917 	bl	800867c <__malloc_unlock>
 800844e:	bd70      	pop	{r4, r5, r6, pc}
 8008450:	42a3      	cmp	r3, r4
 8008452:	d908      	bls.n	8008466 <_free_r+0x42>
 8008454:	6821      	ldr	r1, [r4, #0]
 8008456:	1860      	adds	r0, r4, r1
 8008458:	4283      	cmp	r3, r0
 800845a:	d1f3      	bne.n	8008444 <_free_r+0x20>
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	1841      	adds	r1, r0, r1
 8008462:	6021      	str	r1, [r4, #0]
 8008464:	e7ee      	b.n	8008444 <_free_r+0x20>
 8008466:	001a      	movs	r2, r3
 8008468:	685b      	ldr	r3, [r3, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <_free_r+0x4e>
 800846e:	42a3      	cmp	r3, r4
 8008470:	d9f9      	bls.n	8008466 <_free_r+0x42>
 8008472:	6811      	ldr	r1, [r2, #0]
 8008474:	1850      	adds	r0, r2, r1
 8008476:	42a0      	cmp	r0, r4
 8008478:	d10b      	bne.n	8008492 <_free_r+0x6e>
 800847a:	6820      	ldr	r0, [r4, #0]
 800847c:	1809      	adds	r1, r1, r0
 800847e:	1850      	adds	r0, r2, r1
 8008480:	6011      	str	r1, [r2, #0]
 8008482:	4283      	cmp	r3, r0
 8008484:	d1e0      	bne.n	8008448 <_free_r+0x24>
 8008486:	6818      	ldr	r0, [r3, #0]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	1841      	adds	r1, r0, r1
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	6053      	str	r3, [r2, #4]
 8008490:	e7da      	b.n	8008448 <_free_r+0x24>
 8008492:	42a0      	cmp	r0, r4
 8008494:	d902      	bls.n	800849c <_free_r+0x78>
 8008496:	230c      	movs	r3, #12
 8008498:	602b      	str	r3, [r5, #0]
 800849a:	e7d5      	b.n	8008448 <_free_r+0x24>
 800849c:	6821      	ldr	r1, [r4, #0]
 800849e:	1860      	adds	r0, r4, r1
 80084a0:	4283      	cmp	r3, r0
 80084a2:	d103      	bne.n	80084ac <_free_r+0x88>
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	1841      	adds	r1, r0, r1
 80084aa:	6021      	str	r1, [r4, #0]
 80084ac:	6063      	str	r3, [r4, #4]
 80084ae:	6054      	str	r4, [r2, #4]
 80084b0:	e7ca      	b.n	8008448 <_free_r+0x24>
 80084b2:	46c0      	nop			; (mov r8, r8)
 80084b4:	2000024c 	.word	0x2000024c

080084b8 <sbrk_aligned>:
 80084b8:	b570      	push	{r4, r5, r6, lr}
 80084ba:	4e0f      	ldr	r6, [pc, #60]	; (80084f8 <sbrk_aligned+0x40>)
 80084bc:	000d      	movs	r5, r1
 80084be:	6831      	ldr	r1, [r6, #0]
 80084c0:	0004      	movs	r4, r0
 80084c2:	2900      	cmp	r1, #0
 80084c4:	d102      	bne.n	80084cc <sbrk_aligned+0x14>
 80084c6:	f000 f8bf 	bl	8008648 <_sbrk_r>
 80084ca:	6030      	str	r0, [r6, #0]
 80084cc:	0029      	movs	r1, r5
 80084ce:	0020      	movs	r0, r4
 80084d0:	f000 f8ba 	bl	8008648 <_sbrk_r>
 80084d4:	1c43      	adds	r3, r0, #1
 80084d6:	d00a      	beq.n	80084ee <sbrk_aligned+0x36>
 80084d8:	2303      	movs	r3, #3
 80084da:	1cc5      	adds	r5, r0, #3
 80084dc:	439d      	bics	r5, r3
 80084de:	42a8      	cmp	r0, r5
 80084e0:	d007      	beq.n	80084f2 <sbrk_aligned+0x3a>
 80084e2:	1a29      	subs	r1, r5, r0
 80084e4:	0020      	movs	r0, r4
 80084e6:	f000 f8af 	bl	8008648 <_sbrk_r>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d101      	bne.n	80084f2 <sbrk_aligned+0x3a>
 80084ee:	2501      	movs	r5, #1
 80084f0:	426d      	negs	r5, r5
 80084f2:	0028      	movs	r0, r5
 80084f4:	bd70      	pop	{r4, r5, r6, pc}
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	20000250 	.word	0x20000250

080084fc <_malloc_r>:
 80084fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fe:	2203      	movs	r2, #3
 8008500:	1ccb      	adds	r3, r1, #3
 8008502:	4393      	bics	r3, r2
 8008504:	3308      	adds	r3, #8
 8008506:	0006      	movs	r6, r0
 8008508:	001f      	movs	r7, r3
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d232      	bcs.n	8008574 <_malloc_r+0x78>
 800850e:	270c      	movs	r7, #12
 8008510:	42b9      	cmp	r1, r7
 8008512:	d831      	bhi.n	8008578 <_malloc_r+0x7c>
 8008514:	0030      	movs	r0, r6
 8008516:	f000 f8a9 	bl	800866c <__malloc_lock>
 800851a:	4d32      	ldr	r5, [pc, #200]	; (80085e4 <_malloc_r+0xe8>)
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	001c      	movs	r4, r3
 8008520:	2c00      	cmp	r4, #0
 8008522:	d12e      	bne.n	8008582 <_malloc_r+0x86>
 8008524:	0039      	movs	r1, r7
 8008526:	0030      	movs	r0, r6
 8008528:	f7ff ffc6 	bl	80084b8 <sbrk_aligned>
 800852c:	0004      	movs	r4, r0
 800852e:	1c43      	adds	r3, r0, #1
 8008530:	d11e      	bne.n	8008570 <_malloc_r+0x74>
 8008532:	682c      	ldr	r4, [r5, #0]
 8008534:	0025      	movs	r5, r4
 8008536:	2d00      	cmp	r5, #0
 8008538:	d14a      	bne.n	80085d0 <_malloc_r+0xd4>
 800853a:	6823      	ldr	r3, [r4, #0]
 800853c:	0029      	movs	r1, r5
 800853e:	18e3      	adds	r3, r4, r3
 8008540:	0030      	movs	r0, r6
 8008542:	9301      	str	r3, [sp, #4]
 8008544:	f000 f880 	bl	8008648 <_sbrk_r>
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	4283      	cmp	r3, r0
 800854c:	d143      	bne.n	80085d6 <_malloc_r+0xda>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	3703      	adds	r7, #3
 8008552:	1aff      	subs	r7, r7, r3
 8008554:	2303      	movs	r3, #3
 8008556:	439f      	bics	r7, r3
 8008558:	3708      	adds	r7, #8
 800855a:	2f0c      	cmp	r7, #12
 800855c:	d200      	bcs.n	8008560 <_malloc_r+0x64>
 800855e:	270c      	movs	r7, #12
 8008560:	0039      	movs	r1, r7
 8008562:	0030      	movs	r0, r6
 8008564:	f7ff ffa8 	bl	80084b8 <sbrk_aligned>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	d034      	beq.n	80085d6 <_malloc_r+0xda>
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	19df      	adds	r7, r3, r7
 8008570:	6027      	str	r7, [r4, #0]
 8008572:	e013      	b.n	800859c <_malloc_r+0xa0>
 8008574:	2b00      	cmp	r3, #0
 8008576:	dacb      	bge.n	8008510 <_malloc_r+0x14>
 8008578:	230c      	movs	r3, #12
 800857a:	2500      	movs	r5, #0
 800857c:	6033      	str	r3, [r6, #0]
 800857e:	0028      	movs	r0, r5
 8008580:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008582:	6822      	ldr	r2, [r4, #0]
 8008584:	1bd1      	subs	r1, r2, r7
 8008586:	d420      	bmi.n	80085ca <_malloc_r+0xce>
 8008588:	290b      	cmp	r1, #11
 800858a:	d917      	bls.n	80085bc <_malloc_r+0xc0>
 800858c:	19e2      	adds	r2, r4, r7
 800858e:	6027      	str	r7, [r4, #0]
 8008590:	42a3      	cmp	r3, r4
 8008592:	d111      	bne.n	80085b8 <_malloc_r+0xbc>
 8008594:	602a      	str	r2, [r5, #0]
 8008596:	6863      	ldr	r3, [r4, #4]
 8008598:	6011      	str	r1, [r2, #0]
 800859a:	6053      	str	r3, [r2, #4]
 800859c:	0030      	movs	r0, r6
 800859e:	0025      	movs	r5, r4
 80085a0:	f000 f86c 	bl	800867c <__malloc_unlock>
 80085a4:	2207      	movs	r2, #7
 80085a6:	350b      	adds	r5, #11
 80085a8:	1d23      	adds	r3, r4, #4
 80085aa:	4395      	bics	r5, r2
 80085ac:	1aea      	subs	r2, r5, r3
 80085ae:	429d      	cmp	r5, r3
 80085b0:	d0e5      	beq.n	800857e <_malloc_r+0x82>
 80085b2:	1b5b      	subs	r3, r3, r5
 80085b4:	50a3      	str	r3, [r4, r2]
 80085b6:	e7e2      	b.n	800857e <_malloc_r+0x82>
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	e7ec      	b.n	8008596 <_malloc_r+0x9a>
 80085bc:	6862      	ldr	r2, [r4, #4]
 80085be:	42a3      	cmp	r3, r4
 80085c0:	d101      	bne.n	80085c6 <_malloc_r+0xca>
 80085c2:	602a      	str	r2, [r5, #0]
 80085c4:	e7ea      	b.n	800859c <_malloc_r+0xa0>
 80085c6:	605a      	str	r2, [r3, #4]
 80085c8:	e7e8      	b.n	800859c <_malloc_r+0xa0>
 80085ca:	0023      	movs	r3, r4
 80085cc:	6864      	ldr	r4, [r4, #4]
 80085ce:	e7a7      	b.n	8008520 <_malloc_r+0x24>
 80085d0:	002c      	movs	r4, r5
 80085d2:	686d      	ldr	r5, [r5, #4]
 80085d4:	e7af      	b.n	8008536 <_malloc_r+0x3a>
 80085d6:	230c      	movs	r3, #12
 80085d8:	0030      	movs	r0, r6
 80085da:	6033      	str	r3, [r6, #0]
 80085dc:	f000 f84e 	bl	800867c <__malloc_unlock>
 80085e0:	e7cd      	b.n	800857e <_malloc_r+0x82>
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	2000024c 	.word	0x2000024c

080085e8 <_realloc_r>:
 80085e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085ea:	0007      	movs	r7, r0
 80085ec:	000e      	movs	r6, r1
 80085ee:	0014      	movs	r4, r2
 80085f0:	2900      	cmp	r1, #0
 80085f2:	d105      	bne.n	8008600 <_realloc_r+0x18>
 80085f4:	0011      	movs	r1, r2
 80085f6:	f7ff ff81 	bl	80084fc <_malloc_r>
 80085fa:	0005      	movs	r5, r0
 80085fc:	0028      	movs	r0, r5
 80085fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008600:	2a00      	cmp	r2, #0
 8008602:	d103      	bne.n	800860c <_realloc_r+0x24>
 8008604:	f7ff ff0e 	bl	8008424 <_free_r>
 8008608:	0025      	movs	r5, r4
 800860a:	e7f7      	b.n	80085fc <_realloc_r+0x14>
 800860c:	f000 f83e 	bl	800868c <_malloc_usable_size_r>
 8008610:	9001      	str	r0, [sp, #4]
 8008612:	4284      	cmp	r4, r0
 8008614:	d803      	bhi.n	800861e <_realloc_r+0x36>
 8008616:	0035      	movs	r5, r6
 8008618:	0843      	lsrs	r3, r0, #1
 800861a:	42a3      	cmp	r3, r4
 800861c:	d3ee      	bcc.n	80085fc <_realloc_r+0x14>
 800861e:	0021      	movs	r1, r4
 8008620:	0038      	movs	r0, r7
 8008622:	f7ff ff6b 	bl	80084fc <_malloc_r>
 8008626:	1e05      	subs	r5, r0, #0
 8008628:	d0e8      	beq.n	80085fc <_realloc_r+0x14>
 800862a:	9b01      	ldr	r3, [sp, #4]
 800862c:	0022      	movs	r2, r4
 800862e:	429c      	cmp	r4, r3
 8008630:	d900      	bls.n	8008634 <_realloc_r+0x4c>
 8008632:	001a      	movs	r2, r3
 8008634:	0031      	movs	r1, r6
 8008636:	0028      	movs	r0, r5
 8008638:	f7ff fed7 	bl	80083ea <memcpy>
 800863c:	0031      	movs	r1, r6
 800863e:	0038      	movs	r0, r7
 8008640:	f7ff fef0 	bl	8008424 <_free_r>
 8008644:	e7da      	b.n	80085fc <_realloc_r+0x14>
	...

08008648 <_sbrk_r>:
 8008648:	2300      	movs	r3, #0
 800864a:	b570      	push	{r4, r5, r6, lr}
 800864c:	4d06      	ldr	r5, [pc, #24]	; (8008668 <_sbrk_r+0x20>)
 800864e:	0004      	movs	r4, r0
 8008650:	0008      	movs	r0, r1
 8008652:	602b      	str	r3, [r5, #0]
 8008654:	f7fb f8c4 	bl	80037e0 <_sbrk>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d103      	bne.n	8008664 <_sbrk_r+0x1c>
 800865c:	682b      	ldr	r3, [r5, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d000      	beq.n	8008664 <_sbrk_r+0x1c>
 8008662:	6023      	str	r3, [r4, #0]
 8008664:	bd70      	pop	{r4, r5, r6, pc}
 8008666:	46c0      	nop			; (mov r8, r8)
 8008668:	20000254 	.word	0x20000254

0800866c <__malloc_lock>:
 800866c:	b510      	push	{r4, lr}
 800866e:	4802      	ldr	r0, [pc, #8]	; (8008678 <__malloc_lock+0xc>)
 8008670:	f000 f814 	bl	800869c <__retarget_lock_acquire_recursive>
 8008674:	bd10      	pop	{r4, pc}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	20000258 	.word	0x20000258

0800867c <__malloc_unlock>:
 800867c:	b510      	push	{r4, lr}
 800867e:	4802      	ldr	r0, [pc, #8]	; (8008688 <__malloc_unlock+0xc>)
 8008680:	f000 f80d 	bl	800869e <__retarget_lock_release_recursive>
 8008684:	bd10      	pop	{r4, pc}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	20000258 	.word	0x20000258

0800868c <_malloc_usable_size_r>:
 800868c:	1f0b      	subs	r3, r1, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	1f18      	subs	r0, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	da01      	bge.n	800869a <_malloc_usable_size_r+0xe>
 8008696:	580b      	ldr	r3, [r1, r0]
 8008698:	18c0      	adds	r0, r0, r3
 800869a:	4770      	bx	lr

0800869c <__retarget_lock_acquire_recursive>:
 800869c:	4770      	bx	lr

0800869e <__retarget_lock_release_recursive>:
 800869e:	4770      	bx	lr

080086a0 <_init>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	46c0      	nop			; (mov r8, r8)
 80086a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a6:	bc08      	pop	{r3}
 80086a8:	469e      	mov	lr, r3
 80086aa:	4770      	bx	lr

080086ac <_fini>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	46c0      	nop			; (mov r8, r8)
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr
